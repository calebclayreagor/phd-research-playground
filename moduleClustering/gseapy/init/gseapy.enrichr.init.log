LINE 206 : 2020-06-05 19:02:22,174 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:22,253 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:22,254 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:22,254 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:22,254 [INFO    ] Analysis name: init, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:22,258 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:22,505 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:23,516 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:23,702 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8080&filename=KEGG_2019.init.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 None
LINE 363 : 2020-06-05 19:02:23,730 [INFO    ] Save file of enrichment results: Job Id:ea0a3225c98164d047a683a4ddacc66f
LINE 373 : 2020-06-05 19:02:23,735 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:23,773 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:23,813 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:23,814 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:23,815 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:23,815 [INFO    ] Analysis name: 0, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:23,818 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:23,937 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:24,945 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:25,094 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8081&filename=KEGG_2019.0.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 None
LINE 363 : 2020-06-05 19:02:25,104 [INFO    ] Save file of enrichment results: Job Id:43550612fb21777a4ac731d31c6c6447
LINE 373 : 2020-06-05 19:02:25,111 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:25,146 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:25,176 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:25,177 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:25,178 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:25,178 [INFO    ] Analysis name: 1, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:25,182 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:25,274 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:26,280 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:26,395 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8082&filename=KEGG_2019.1.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 6287
LINE 363 : 2020-06-05 19:02:26,404 [INFO    ] Save file of enrichment results: Job Id:ad8d239c84a5a3bda6e5a1861abc3a60
LINE 373 : 2020-06-05 19:02:26,408 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:26,429 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:26,476 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:26,477 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:26,478 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:26,478 [INFO    ] Analysis name: 2, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:26,484 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:26,593 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:27,602 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:27,694 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8083&filename=KEGG_2019.2.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 4149
LINE 363 : 2020-06-05 19:02:27,704 [INFO    ] Save file of enrichment results: Job Id:93ee1497e59d22fff0331e3307da16e6
LINE 373 : 2020-06-05 19:02:27,706 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:27,716 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:27,781 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:27,784 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:27,785 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:27,785 [INFO    ] Analysis name: 3, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:27,789 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:27,921 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:28,925 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:29,081 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8084&filename=KEGG_2019.3.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 None
LINE 363 : 2020-06-05 19:02:29,103 [INFO    ] Save file of enrichment results: Job Id:8a63b5946f910dd837a0cd9b61a39885
LINE 373 : 2020-06-05 19:02:29,106 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:29,130 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:29,179 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:29,180 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:29,180 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:29,180 [INFO    ] Analysis name: 4, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:29,184 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:29,295 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:30,308 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:30,412 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8085&filename=KEGG_2019.4.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 5038
LINE 363 : 2020-06-05 19:02:30,423 [INFO    ] Save file of enrichment results: Job Id:66e2ce79ea4186c753abc1bea9f0e042
LINE 373 : 2020-06-05 19:02:30,426 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:30,437 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:30,484 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:30,485 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:30,485 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:30,486 [INFO    ] Analysis name: 5, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:30,489 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:30,568 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:31,576 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:31,684 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8086&filename=KEGG_2019.5.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 2233
LINE 363 : 2020-06-05 19:02:31,692 [INFO    ] Save file of enrichment results: Job Id:687ced117670559b93f404479fae6d8e
LINE 373 : 2020-06-05 19:02:31,694 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:31,703 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:31,763 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:31,765 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:31,766 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:31,766 [INFO    ] Analysis name: 6, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:31,770 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:31,846 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:32,858 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:32,905 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8087&filename=KEGG_2019.6.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 100
LINE 363 : 2020-06-05 19:02:32,913 [INFO    ] Save file of enrichment results: Job Id:63339bdad670098ea29da28309879c68
LINE 373 : 2020-06-05 19:02:32,915 [INFO    ] Done.

LINE 206 : 2020-06-05 19:02:32,921 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:32,972 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/datasetStatistics HTTP/1.1" 200 4443
LINE 336 : 2020-06-05 19:02:32,974 [INFO    ] Connecting to Enrichr Server to get latest library names
LINE 354 : 2020-06-05 19:02:32,974 [DEBUG   ] Start Enrichr using library: KEGG_2019
LINE 355 : 2020-06-05 19:02:32,974 [INFO    ] Analysis name: 7, Enrichr Library: KEGG_2019
LINE 206 : 2020-06-05 19:02:32,977 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:33,110 [DEBUG   ] http://amp.pharm.mssm.edu:80 "POST /FishEnrichr/addList HTTP/1.1" 200 70
LINE 206 : 2020-06-05 19:02:34,119 [DEBUG   ] Starting new HTTP connection (1): amp.pharm.mssm.edu:80
LINE 396 : 2020-06-05 19:02:34,221 [DEBUG   ] http://amp.pharm.mssm.edu:80 "GET /FishEnrichr/export?userListId=8088&filename=KEGG_2019.7.reports&backgroundType=KEGG_2019 HTTP/1.1" 200 1963
LINE 363 : 2020-06-05 19:02:34,230 [INFO    ] Save file of enrichment results: Job Id:9b0f393b57830e1f2f3db16cbd09147d
LINE 373 : 2020-06-05 19:02:34,231 [INFO    ] Done.

LINE 2157: 2020-06-05 19:02:34,301 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:34,301 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:34,303 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:34,303 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 1254: 2020-06-05 19:02:34,751 [DEBUG   ] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=20.0 to DejaVu Sans ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
LINE 2515: 2020-06-05 19:02:34,765 [DEBUG   ] update_title_pos
LINE 2157: 2020-06-05 19:02:34,767 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:34,768 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:34,770 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:34,770 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:02:34,849 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:34,849 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:34,850 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:34,851 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 1254: 2020-06-05 19:02:34,858 [DEBUG   ] findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXGeneral ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,863 [DEBUG   ] findfont: Matching :family=STIXGeneral:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXGeneral ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,864 [DEBUG   ] findfont: Matching :family=STIXGeneral:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to STIXGeneral ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf') with score of 0.000000.
LINE 1254: 2020-06-05 19:02:34,868 [DEBUG   ] findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXNonUnicode ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,873 [DEBUG   ] findfont: Matching :family=STIXNonUnicode:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXNonUnicode ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,874 [DEBUG   ] findfont: Matching :family=STIXNonUnicode:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to STIXNonUnicode ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf') with score of 0.000000.
LINE 1254: 2020-06-05 19:02:34,877 [DEBUG   ] findfont: Matching :family=STIXSizeOneSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeOneSym ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,881 [DEBUG   ] findfont: Matching :family=STIXSizeTwoSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeTwoSym ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,885 [DEBUG   ] findfont: Matching :family=STIXSizeThreeSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeThreeSym ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,890 [DEBUG   ] findfont: Matching :family=STIXSizeFourSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeFourSym ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,895 [DEBUG   ] findfont: Matching :family=STIXSizeFiveSym:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to STIXSizeFiveSym ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,898 [DEBUG   ] findfont: Matching :family=cmsy10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmsy10 ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,902 [DEBUG   ] findfont: Matching :family=cmr10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmr10 ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,906 [DEBUG   ] findfont: Matching :family=cmtt10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmtt10 ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,909 [DEBUG   ] findfont: Matching :family=cmmi10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmmi10 ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,914 [DEBUG   ] findfont: Matching :family=cmb10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmb10 ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,918 [DEBUG   ] findfont: Matching :family=cmss10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmss10 ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,922 [DEBUG   ] findfont: Matching :family=cmex10:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to cmex10 ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,925 [DEBUG   ] findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,929 [DEBUG   ] findfont: Matching :family=DejaVu Sans:style=italic:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf') with score of 0.150000.
LINE 1254: 2020-06-05 19:02:34,930 [DEBUG   ] findfont: Matching :family=DejaVu Sans:style=normal:variant=normal:weight=bold:stretch=normal:size=10.0 to DejaVu Sans ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf') with score of 0.000000.
LINE 1254: 2020-06-05 19:02:34,933 [DEBUG   ] findfont: Matching :family=DejaVu Sans Mono:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans Mono ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:34,937 [DEBUG   ] findfont: Matching :family=DejaVu Sans Display:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans Display ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf') with score of 0.050000.
LINE 1254: 2020-06-05 19:02:35,135 [DEBUG   ] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
LINE 2157: 2020-06-05 19:02:35,159 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,160 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:35,162 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,162 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:02:35,167 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,167 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:35,168 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,168 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2515: 2020-06-05 19:02:35,269 [DEBUG   ] update_title_pos
LINE 2157: 2020-06-05 19:02:35,329 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,329 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:35,331 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,332 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:02:35,357 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,358 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:35,359 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:35,359 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2515: 2020-06-05 19:02:48,102 [DEBUG   ] update_title_pos
LINE 2157: 2020-06-05 19:02:48,149 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,150 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:48,151 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,151 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:02:48,172 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,172 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:48,173 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,173 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:02:48,457 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,457 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2515: 2020-06-05 19:02:48,509 [DEBUG   ] update_title_pos
LINE 2157: 2020-06-05 19:02:48,595 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,596 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:48,598 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,598 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:02:48,653 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,653 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:02:48,655 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:02:48,655 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2515: 2020-06-05 19:03:01,017 [DEBUG   ] update_title_pos
LINE 2157: 2020-06-05 19:03:01,021 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,022 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,023 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,023 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,026 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,026 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,028 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,028 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,070 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,070 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,072 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,072 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,076 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,076 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,079 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,079 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,122 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,122 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,123 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,124 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,126 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,127 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,128 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,129 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2515: 2020-06-05 19:03:01,154 [DEBUG   ] update_title_pos
LINE 2157: 2020-06-05 19:03:01,155 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,155 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,157 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,157 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,160 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,160 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,162 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,162 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,197 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,198 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,199 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,199 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,204 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,204 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,205 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,206 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2515: 2020-06-05 19:03:01,654 [DEBUG   ] update_title_pos
LINE 2157: 2020-06-05 19:03:01,706 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,706 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,707 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,708 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2157: 2020-06-05 19:03:01,760 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,760 [DEBUG   ] ticklocs array([1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05])
LINE 2157: 2020-06-05 19:03:01,761 [DEBUG   ] vmin 0.1 vmax 3000.0
LINE 2212: 2020-06-05 19:03:01,761 [DEBUG   ] ticklocs [0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.2, 0.30000000000000004, 0.4, 0.5, 0.6000000000000001, 0.7000000000000001, 0.8, 0.9, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 20.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 2000.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 20000.0, 30000.0, 40000.0, 50000.0, 60000.0, 70000.0, 80000.0, 90000.0, 200000.0, 300000.0, 400000.0, 500000.0, 600000.0, 700000.0, 800000.0, 900000.0]
LINE 2515: 2020-06-05 19:03:32,834 [DEBUG   ] update_title_pos
LINE 1254: 2020-06-05 19:03:32,853 [DEBUG   ] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0 to DejaVu Sans ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
LINE 2515: 2020-06-05 19:03:33,147 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:03:33,172 [DEBUG   ] update_title_pos
LINE 1254: 2020-06-05 19:03:33,595 [DEBUG   ] findfont: Matching :family=sans-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
LINE 2515: 2020-06-05 19:03:33,598 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:03:33,631 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:03:33,653 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,317 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,355 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,383 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,409 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,461 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,508 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,537 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:28,562 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:33,987 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:34,024 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:34,056 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:34,078 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:34,126 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:34,165 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:34,198 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:34,222 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,155 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,172 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,189 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,206 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,257 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,273 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,287 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,303 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,365 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,405 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,439 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:04:39,463 [DEBUG   ] update_title_pos
LINE 22  : 2020-06-05 19:05:00,509 [DEBUG   ] Loading extension: init = sparse._numba_extension:_init_extension
LINE 74  : 2020-06-05 19:05:00,617 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=24)
           2	LOAD_FAST(arg=0, lineno=24)
           4	LOAD_CONST(arg=1, lineno=24)
           6	BINARY_SUBSCR(arg=None, lineno=24)
           8	LOAD_CONST(arg=2, lineno=24)
          10	BINARY_AND(arg=None, lineno=24)
          12	LOAD_CONST(arg=3, lineno=24)
          14	BINARY_LSHIFT(arg=None, lineno=24)
          16	LOAD_CONST(arg=4, lineno=24)
          18	BINARY_AND(arg=None, lineno=24)
          20	LOAD_FAST(arg=0, lineno=25)
          22	LOAD_CONST(arg=1, lineno=25)
          24	BINARY_SUBSCR(arg=None, lineno=25)
          26	LOAD_CONST(arg=5, lineno=25)
          28	BINARY_LSHIFT(arg=None, lineno=25)
          30	LOAD_CONST(arg=4, lineno=25)
          32	BINARY_AND(arg=None, lineno=25)
          34	LOAD_FAST(arg=0, lineno=25)
          36	LOAD_CONST(arg=1, lineno=25)
          38	BINARY_SUBSCR(arg=None, lineno=25)
          40	BINARY_XOR(arg=None, lineno=25)
          42	LOAD_CONST(arg=6, lineno=25)
          44	BINARY_RSHIFT(arg=None, lineno=25)
          46	BINARY_XOR(arg=None, lineno=25)
          48	LOAD_FAST(arg=0, lineno=25)
          50	LOAD_CONST(arg=1, lineno=25)
          52	STORE_SUBSCR(arg=None, lineno=25)
          54	LOAD_FAST(arg=0, lineno=27)
          56	LOAD_CONST(arg=7, lineno=27)
          58	BINARY_SUBSCR(arg=None, lineno=27)
          60	LOAD_CONST(arg=8, lineno=27)
          62	BINARY_AND(arg=None, lineno=27)
          64	LOAD_CONST(arg=9, lineno=27)
          66	BINARY_LSHIFT(arg=None, lineno=27)
          68	LOAD_CONST(arg=4, lineno=27)
          70	BINARY_AND(arg=None, lineno=27)
          72	LOAD_FAST(arg=0, lineno=28)
          74	LOAD_CONST(arg=7, lineno=28)
          76	BINARY_SUBSCR(arg=None, lineno=28)
          78	LOAD_CONST(arg=10, lineno=28)
          80	BINARY_LSHIFT(arg=None, lineno=28)
          82	LOAD_CONST(arg=4, lineno=28)
          84	BINARY_AND(arg=None, lineno=28)
          86	LOAD_FAST(arg=0, lineno=28)
          88	LOAD_CONST(arg=7, lineno=28)
          90	BINARY_SUBSCR(arg=None, lineno=28)
          92	BINARY_XOR(arg=None, lineno=28)
          94	LOAD_CONST(arg=11, lineno=28)
          96	BINARY_RSHIFT(arg=None, lineno=28)
          98	BINARY_XOR(arg=None, lineno=28)
         100	LOAD_FAST(arg=0, lineno=28)
         102	LOAD_CONST(arg=7, lineno=28)
         104	STORE_SUBSCR(arg=None, lineno=28)
         106	LOAD_FAST(arg=0, lineno=30)
         108	LOAD_CONST(arg=10, lineno=30)
         110	BINARY_SUBSCR(arg=None, lineno=30)
         112	LOAD_CONST(arg=12, lineno=30)
         114	BINARY_AND(arg=None, lineno=30)
         116	LOAD_CONST(arg=13, lineno=30)
         118	BINARY_LSHIFT(arg=None, lineno=30)
         120	LOAD_CONST(arg=4, lineno=30)
         122	BINARY_AND(arg=None, lineno=30)
         124	LOAD_FAST(arg=0, lineno=31)
         126	LOAD_CONST(arg=10, lineno=31)
         128	BINARY_SUBSCR(arg=None, lineno=31)
         130	LOAD_CONST(arg=14, lineno=31)
         132	BINARY_LSHIFT(arg=None, lineno=31)
         134	LOAD_CONST(arg=4, lineno=31)
         136	BINARY_AND(arg=None, lineno=31)
         138	LOAD_FAST(arg=0, lineno=31)
         140	LOAD_CONST(arg=10, lineno=31)
         142	BINARY_SUBSCR(arg=None, lineno=31)
         144	BINARY_XOR(arg=None, lineno=31)
         146	LOAD_CONST(arg=15, lineno=31)
         148	BINARY_RSHIFT(arg=None, lineno=31)
         150	BINARY_XOR(arg=None, lineno=31)
         152	LOAD_FAST(arg=0, lineno=31)
         154	LOAD_CONST(arg=10, lineno=31)
         156	STORE_SUBSCR(arg=None, lineno=31)
         158	LOAD_FAST(arg=0, lineno=34)
         160	LOAD_CONST(arg=1, lineno=34)
         162	BINARY_SUBSCR(arg=None, lineno=34)
         164	LOAD_FAST(arg=0, lineno=34)
         166	LOAD_CONST(arg=7, lineno=34)
         168	BINARY_SUBSCR(arg=None, lineno=34)
         170	BINARY_XOR(arg=None, lineno=34)
         172	LOAD_FAST(arg=0, lineno=34)
         174	LOAD_CONST(arg=10, lineno=34)
         176	BINARY_SUBSCR(arg=None, lineno=34)
         178	BINARY_XOR(arg=None, lineno=34)
         180	RETURN_VALUE(arg=None, lineno=34)
LINE 100 : 2020-06-05 19:05:00,618 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:00,618 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:00,618 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=24)
LINE 263 : 2020-06-05 19:05:00,618 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,619 [DEBUG   ] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=24)
LINE 263 : 2020-06-05 19:05:00,619 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,619 [DEBUG   ] dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=24)
LINE 263 : 2020-06-05 19:05:00,619 [DEBUG   ] stack ['$state2.0']
LINE 262 : 2020-06-05 19:05:00,619 [DEBUG   ] dispatch pc=6, inst=BINARY_SUBSCR(arg=None, lineno=24)
LINE 263 : 2020-06-05 19:05:00,619 [DEBUG   ] stack ['$state2.0', '$const4.1']
LINE 262 : 2020-06-05 19:05:00,619 [DEBUG   ] dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=24)
LINE 263 : 2020-06-05 19:05:00,619 [DEBUG   ] stack ['$6binary_subscr.2']
LINE 262 : 2020-06-05 19:05:00,619 [DEBUG   ] dispatch pc=10, inst=BINARY_AND(arg=None, lineno=24)
LINE 263 : 2020-06-05 19:05:00,619 [DEBUG   ] stack ['$6binary_subscr.2', '$const8.3']
LINE 262 : 2020-06-05 19:05:00,619 [DEBUG   ] dispatch pc=12, inst=LOAD_CONST(arg=3, lineno=24)
LINE 263 : 2020-06-05 19:05:00,619 [DEBUG   ] stack ['$10binary_and.4']
LINE 262 : 2020-06-05 19:05:00,619 [DEBUG   ] dispatch pc=14, inst=BINARY_LSHIFT(arg=None, lineno=24)
LINE 263 : 2020-06-05 19:05:00,619 [DEBUG   ] stack ['$10binary_and.4', '$const12.5']
LINE 262 : 2020-06-05 19:05:00,620 [DEBUG   ] dispatch pc=16, inst=LOAD_CONST(arg=4, lineno=24)
LINE 263 : 2020-06-05 19:05:00,620 [DEBUG   ] stack ['$14binary_lshift.6']
LINE 262 : 2020-06-05 19:05:00,620 [DEBUG   ] dispatch pc=18, inst=BINARY_AND(arg=None, lineno=24)
LINE 263 : 2020-06-05 19:05:00,620 [DEBUG   ] stack ['$14binary_lshift.6', '$const16.7']
LINE 262 : 2020-06-05 19:05:00,620 [DEBUG   ] dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=25)
LINE 263 : 2020-06-05 19:05:00,620 [DEBUG   ] stack ['$18binary_and.8']
LINE 262 : 2020-06-05 19:05:00,620 [DEBUG   ] dispatch pc=22, inst=LOAD_CONST(arg=1, lineno=25)
LINE 263 : 2020-06-05 19:05:00,620 [DEBUG   ] stack ['$18binary_and.8', '$state20.9']
LINE 262 : 2020-06-05 19:05:00,620 [DEBUG   ] dispatch pc=24, inst=BINARY_SUBSCR(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,620 [DEBUG   ] stack ['$18binary_and.8', '$state20.9', '$const22.10']
LINE 262 : 2020-06-05 19:05:00,620 [DEBUG   ] dispatch pc=26, inst=LOAD_CONST(arg=5, lineno=25)
LINE 263 : 2020-06-05 19:05:00,620 [DEBUG   ] stack ['$18binary_and.8', '$24binary_subscr.11']
LINE 262 : 2020-06-05 19:05:00,620 [DEBUG   ] dispatch pc=28, inst=BINARY_LSHIFT(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,620 [DEBUG   ] stack ['$18binary_and.8', '$24binary_subscr.11', '$const26.12']
LINE 262 : 2020-06-05 19:05:00,621 [DEBUG   ] dispatch pc=30, inst=LOAD_CONST(arg=4, lineno=25)
LINE 263 : 2020-06-05 19:05:00,621 [DEBUG   ] stack ['$18binary_and.8', '$28binary_lshift.13']
LINE 262 : 2020-06-05 19:05:00,621 [DEBUG   ] dispatch pc=32, inst=BINARY_AND(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,621 [DEBUG   ] stack ['$18binary_and.8', '$28binary_lshift.13', '$const30.14']
LINE 262 : 2020-06-05 19:05:00,621 [DEBUG   ] dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=25)
LINE 263 : 2020-06-05 19:05:00,621 [DEBUG   ] stack ['$18binary_and.8', '$32binary_and.15']
LINE 262 : 2020-06-05 19:05:00,621 [DEBUG   ] dispatch pc=36, inst=LOAD_CONST(arg=1, lineno=25)
LINE 263 : 2020-06-05 19:05:00,621 [DEBUG   ] stack ['$18binary_and.8', '$32binary_and.15', '$state34.16']
LINE 262 : 2020-06-05 19:05:00,621 [DEBUG   ] dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,621 [DEBUG   ] stack ['$18binary_and.8', '$32binary_and.15', '$state34.16', '$const36.17']
LINE 262 : 2020-06-05 19:05:00,621 [DEBUG   ] dispatch pc=40, inst=BINARY_XOR(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,621 [DEBUG   ] stack ['$18binary_and.8', '$32binary_and.15', '$38binary_subscr.18']
LINE 262 : 2020-06-05 19:05:00,621 [DEBUG   ] dispatch pc=42, inst=LOAD_CONST(arg=6, lineno=25)
LINE 263 : 2020-06-05 19:05:00,621 [DEBUG   ] stack ['$18binary_and.8', '$40binary_xor.19']
LINE 262 : 2020-06-05 19:05:00,622 [DEBUG   ] dispatch pc=44, inst=BINARY_RSHIFT(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,622 [DEBUG   ] stack ['$18binary_and.8', '$40binary_xor.19', '$const42.20']
LINE 262 : 2020-06-05 19:05:00,622 [DEBUG   ] dispatch pc=46, inst=BINARY_XOR(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,622 [DEBUG   ] stack ['$18binary_and.8', '$44binary_rshift.21']
LINE 262 : 2020-06-05 19:05:00,622 [DEBUG   ] dispatch pc=48, inst=LOAD_FAST(arg=0, lineno=25)
LINE 263 : 2020-06-05 19:05:00,622 [DEBUG   ] stack ['$46binary_xor.22']
LINE 262 : 2020-06-05 19:05:00,622 [DEBUG   ] dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=25)
LINE 263 : 2020-06-05 19:05:00,622 [DEBUG   ] stack ['$46binary_xor.22', '$state48.23']
LINE 262 : 2020-06-05 19:05:00,622 [DEBUG   ] dispatch pc=52, inst=STORE_SUBSCR(arg=None, lineno=25)
LINE 263 : 2020-06-05 19:05:00,622 [DEBUG   ] stack ['$46binary_xor.22', '$state48.23', '$const50.24']
LINE 262 : 2020-06-05 19:05:00,622 [DEBUG   ] dispatch pc=54, inst=LOAD_FAST(arg=0, lineno=27)
LINE 263 : 2020-06-05 19:05:00,622 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,622 [DEBUG   ] dispatch pc=56, inst=LOAD_CONST(arg=7, lineno=27)
LINE 263 : 2020-06-05 19:05:00,623 [DEBUG   ] stack ['$state54.25']
LINE 262 : 2020-06-05 19:05:00,623 [DEBUG   ] dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=27)
LINE 263 : 2020-06-05 19:05:00,623 [DEBUG   ] stack ['$state54.25', '$const56.26']
LINE 262 : 2020-06-05 19:05:00,623 [DEBUG   ] dispatch pc=60, inst=LOAD_CONST(arg=8, lineno=27)
LINE 263 : 2020-06-05 19:05:00,623 [DEBUG   ] stack ['$58binary_subscr.27']
LINE 262 : 2020-06-05 19:05:00,623 [DEBUG   ] dispatch pc=62, inst=BINARY_AND(arg=None, lineno=27)
LINE 263 : 2020-06-05 19:05:00,623 [DEBUG   ] stack ['$58binary_subscr.27', '$const60.28']
LINE 262 : 2020-06-05 19:05:00,623 [DEBUG   ] dispatch pc=64, inst=LOAD_CONST(arg=9, lineno=27)
LINE 263 : 2020-06-05 19:05:00,623 [DEBUG   ] stack ['$62binary_and.29']
LINE 262 : 2020-06-05 19:05:00,623 [DEBUG   ] dispatch pc=66, inst=BINARY_LSHIFT(arg=None, lineno=27)
LINE 263 : 2020-06-05 19:05:00,623 [DEBUG   ] stack ['$62binary_and.29', '$const64.30']
LINE 262 : 2020-06-05 19:05:00,623 [DEBUG   ] dispatch pc=68, inst=LOAD_CONST(arg=4, lineno=27)
LINE 263 : 2020-06-05 19:05:00,623 [DEBUG   ] stack ['$66binary_lshift.31']
LINE 262 : 2020-06-05 19:05:00,624 [DEBUG   ] dispatch pc=70, inst=BINARY_AND(arg=None, lineno=27)
LINE 263 : 2020-06-05 19:05:00,624 [DEBUG   ] stack ['$66binary_lshift.31', '$const68.32']
LINE 262 : 2020-06-05 19:05:00,624 [DEBUG   ] dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=28)
LINE 263 : 2020-06-05 19:05:00,624 [DEBUG   ] stack ['$70binary_and.33']
LINE 262 : 2020-06-05 19:05:00,624 [DEBUG   ] dispatch pc=74, inst=LOAD_CONST(arg=7, lineno=28)
LINE 263 : 2020-06-05 19:05:00,624 [DEBUG   ] stack ['$70binary_and.33', '$state72.34']
LINE 262 : 2020-06-05 19:05:00,624 [DEBUG   ] dispatch pc=76, inst=BINARY_SUBSCR(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,624 [DEBUG   ] stack ['$70binary_and.33', '$state72.34', '$const74.35']
LINE 262 : 2020-06-05 19:05:00,624 [DEBUG   ] dispatch pc=78, inst=LOAD_CONST(arg=10, lineno=28)
LINE 263 : 2020-06-05 19:05:00,625 [DEBUG   ] stack ['$70binary_and.33', '$76binary_subscr.36']
LINE 262 : 2020-06-05 19:05:00,625 [DEBUG   ] dispatch pc=80, inst=BINARY_LSHIFT(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,625 [DEBUG   ] stack ['$70binary_and.33', '$76binary_subscr.36', '$const78.37']
LINE 262 : 2020-06-05 19:05:00,625 [DEBUG   ] dispatch pc=82, inst=LOAD_CONST(arg=4, lineno=28)
LINE 263 : 2020-06-05 19:05:00,625 [DEBUG   ] stack ['$70binary_and.33', '$80binary_lshift.38']
LINE 262 : 2020-06-05 19:05:00,625 [DEBUG   ] dispatch pc=84, inst=BINARY_AND(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,625 [DEBUG   ] stack ['$70binary_and.33', '$80binary_lshift.38', '$const82.39']
LINE 262 : 2020-06-05 19:05:00,626 [DEBUG   ] dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=28)
LINE 263 : 2020-06-05 19:05:00,626 [DEBUG   ] stack ['$70binary_and.33', '$84binary_and.40']
LINE 262 : 2020-06-05 19:05:00,626 [DEBUG   ] dispatch pc=88, inst=LOAD_CONST(arg=7, lineno=28)
LINE 263 : 2020-06-05 19:05:00,626 [DEBUG   ] stack ['$70binary_and.33', '$84binary_and.40', '$state86.41']
LINE 262 : 2020-06-05 19:05:00,626 [DEBUG   ] dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,626 [DEBUG   ] stack ['$70binary_and.33', '$84binary_and.40', '$state86.41', '$const88.42']
LINE 262 : 2020-06-05 19:05:00,626 [DEBUG   ] dispatch pc=92, inst=BINARY_XOR(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,626 [DEBUG   ] stack ['$70binary_and.33', '$84binary_and.40', '$90binary_subscr.43']
LINE 262 : 2020-06-05 19:05:00,626 [DEBUG   ] dispatch pc=94, inst=LOAD_CONST(arg=11, lineno=28)
LINE 263 : 2020-06-05 19:05:00,626 [DEBUG   ] stack ['$70binary_and.33', '$92binary_xor.44']
LINE 262 : 2020-06-05 19:05:00,626 [DEBUG   ] dispatch pc=96, inst=BINARY_RSHIFT(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,626 [DEBUG   ] stack ['$70binary_and.33', '$92binary_xor.44', '$const94.45']
LINE 262 : 2020-06-05 19:05:00,626 [DEBUG   ] dispatch pc=98, inst=BINARY_XOR(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,627 [DEBUG   ] stack ['$70binary_and.33', '$96binary_rshift.46']
LINE 262 : 2020-06-05 19:05:00,627 [DEBUG   ] dispatch pc=100, inst=LOAD_FAST(arg=0, lineno=28)
LINE 263 : 2020-06-05 19:05:00,627 [DEBUG   ] stack ['$98binary_xor.47']
LINE 262 : 2020-06-05 19:05:00,627 [DEBUG   ] dispatch pc=102, inst=LOAD_CONST(arg=7, lineno=28)
LINE 263 : 2020-06-05 19:05:00,627 [DEBUG   ] stack ['$98binary_xor.47', '$state100.48']
LINE 262 : 2020-06-05 19:05:00,627 [DEBUG   ] dispatch pc=104, inst=STORE_SUBSCR(arg=None, lineno=28)
LINE 263 : 2020-06-05 19:05:00,627 [DEBUG   ] stack ['$98binary_xor.47', '$state100.48', '$const102.49']
LINE 262 : 2020-06-05 19:05:00,627 [DEBUG   ] dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=30)
LINE 263 : 2020-06-05 19:05:00,628 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,628 [DEBUG   ] dispatch pc=108, inst=LOAD_CONST(arg=10, lineno=30)
LINE 263 : 2020-06-05 19:05:00,628 [DEBUG   ] stack ['$state106.50']
LINE 262 : 2020-06-05 19:05:00,629 [DEBUG   ] dispatch pc=110, inst=BINARY_SUBSCR(arg=None, lineno=30)
LINE 263 : 2020-06-05 19:05:00,629 [DEBUG   ] stack ['$state106.50', '$const108.51']
LINE 262 : 2020-06-05 19:05:00,629 [DEBUG   ] dispatch pc=112, inst=LOAD_CONST(arg=12, lineno=30)
LINE 263 : 2020-06-05 19:05:00,629 [DEBUG   ] stack ['$110binary_subscr.52']
LINE 262 : 2020-06-05 19:05:00,630 [DEBUG   ] dispatch pc=114, inst=BINARY_AND(arg=None, lineno=30)
LINE 263 : 2020-06-05 19:05:00,630 [DEBUG   ] stack ['$110binary_subscr.52', '$const112.53']
LINE 262 : 2020-06-05 19:05:00,630 [DEBUG   ] dispatch pc=116, inst=LOAD_CONST(arg=13, lineno=30)
LINE 263 : 2020-06-05 19:05:00,630 [DEBUG   ] stack ['$114binary_and.54']
LINE 262 : 2020-06-05 19:05:00,630 [DEBUG   ] dispatch pc=118, inst=BINARY_LSHIFT(arg=None, lineno=30)
LINE 263 : 2020-06-05 19:05:00,630 [DEBUG   ] stack ['$114binary_and.54', '$const116.55']
LINE 262 : 2020-06-05 19:05:00,630 [DEBUG   ] dispatch pc=120, inst=LOAD_CONST(arg=4, lineno=30)
LINE 263 : 2020-06-05 19:05:00,630 [DEBUG   ] stack ['$118binary_lshift.56']
LINE 262 : 2020-06-05 19:05:00,630 [DEBUG   ] dispatch pc=122, inst=BINARY_AND(arg=None, lineno=30)
LINE 263 : 2020-06-05 19:05:00,631 [DEBUG   ] stack ['$118binary_lshift.56', '$const120.57']
LINE 262 : 2020-06-05 19:05:00,631 [DEBUG   ] dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=31)
LINE 263 : 2020-06-05 19:05:00,631 [DEBUG   ] stack ['$122binary_and.58']
LINE 262 : 2020-06-05 19:05:00,631 [DEBUG   ] dispatch pc=126, inst=LOAD_CONST(arg=10, lineno=31)
LINE 263 : 2020-06-05 19:05:00,631 [DEBUG   ] stack ['$122binary_and.58', '$state124.59']
LINE 262 : 2020-06-05 19:05:00,631 [DEBUG   ] dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,631 [DEBUG   ] stack ['$122binary_and.58', '$state124.59', '$const126.60']
LINE 262 : 2020-06-05 19:05:00,631 [DEBUG   ] dispatch pc=130, inst=LOAD_CONST(arg=14, lineno=31)
LINE 263 : 2020-06-05 19:05:00,631 [DEBUG   ] stack ['$122binary_and.58', '$128binary_subscr.61']
LINE 262 : 2020-06-05 19:05:00,631 [DEBUG   ] dispatch pc=132, inst=BINARY_LSHIFT(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,631 [DEBUG   ] stack ['$122binary_and.58', '$128binary_subscr.61', '$const130.62']
LINE 262 : 2020-06-05 19:05:00,632 [DEBUG   ] dispatch pc=134, inst=LOAD_CONST(arg=4, lineno=31)
LINE 263 : 2020-06-05 19:05:00,632 [DEBUG   ] stack ['$122binary_and.58', '$132binary_lshift.63']
LINE 262 : 2020-06-05 19:05:00,632 [DEBUG   ] dispatch pc=136, inst=BINARY_AND(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,632 [DEBUG   ] stack ['$122binary_and.58', '$132binary_lshift.63', '$const134.64']
LINE 262 : 2020-06-05 19:05:00,632 [DEBUG   ] dispatch pc=138, inst=LOAD_FAST(arg=0, lineno=31)
LINE 263 : 2020-06-05 19:05:00,632 [DEBUG   ] stack ['$122binary_and.58', '$136binary_and.65']
LINE 262 : 2020-06-05 19:05:00,633 [DEBUG   ] dispatch pc=140, inst=LOAD_CONST(arg=10, lineno=31)
LINE 263 : 2020-06-05 19:05:00,633 [DEBUG   ] stack ['$122binary_and.58', '$136binary_and.65', '$state138.66']
LINE 262 : 2020-06-05 19:05:00,633 [DEBUG   ] dispatch pc=142, inst=BINARY_SUBSCR(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,633 [DEBUG   ] stack ['$122binary_and.58', '$136binary_and.65', '$state138.66', '$const140.67']
LINE 262 : 2020-06-05 19:05:00,634 [DEBUG   ] dispatch pc=144, inst=BINARY_XOR(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,634 [DEBUG   ] stack ['$122binary_and.58', '$136binary_and.65', '$142binary_subscr.68']
LINE 262 : 2020-06-05 19:05:00,634 [DEBUG   ] dispatch pc=146, inst=LOAD_CONST(arg=15, lineno=31)
LINE 263 : 2020-06-05 19:05:00,634 [DEBUG   ] stack ['$122binary_and.58', '$144binary_xor.69']
LINE 262 : 2020-06-05 19:05:00,634 [DEBUG   ] dispatch pc=148, inst=BINARY_RSHIFT(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,634 [DEBUG   ] stack ['$122binary_and.58', '$144binary_xor.69', '$const146.70']
LINE 262 : 2020-06-05 19:05:00,634 [DEBUG   ] dispatch pc=150, inst=BINARY_XOR(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,634 [DEBUG   ] stack ['$122binary_and.58', '$148binary_rshift.71']
LINE 262 : 2020-06-05 19:05:00,634 [DEBUG   ] dispatch pc=152, inst=LOAD_FAST(arg=0, lineno=31)
LINE 263 : 2020-06-05 19:05:00,634 [DEBUG   ] stack ['$150binary_xor.72']
LINE 262 : 2020-06-05 19:05:00,634 [DEBUG   ] dispatch pc=154, inst=LOAD_CONST(arg=10, lineno=31)
LINE 263 : 2020-06-05 19:05:00,634 [DEBUG   ] stack ['$150binary_xor.72', '$state152.73']
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=156, inst=STORE_SUBSCR(arg=None, lineno=31)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack ['$150binary_xor.72', '$state152.73', '$const154.74']
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=158, inst=LOAD_FAST(arg=0, lineno=34)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=160, inst=LOAD_CONST(arg=1, lineno=34)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack ['$state158.75']
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=162, inst=BINARY_SUBSCR(arg=None, lineno=34)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack ['$state158.75', '$const160.76']
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=34)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack ['$162binary_subscr.77']
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=166, inst=LOAD_CONST(arg=7, lineno=34)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack ['$162binary_subscr.77', '$state164.78']
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=34)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack ['$162binary_subscr.77', '$state164.78', '$const166.79']
LINE 262 : 2020-06-05 19:05:00,635 [DEBUG   ] dispatch pc=170, inst=BINARY_XOR(arg=None, lineno=34)
LINE 263 : 2020-06-05 19:05:00,635 [DEBUG   ] stack ['$162binary_subscr.77', '$168binary_subscr.80']
LINE 262 : 2020-06-05 19:05:00,636 [DEBUG   ] dispatch pc=172, inst=LOAD_FAST(arg=0, lineno=34)
LINE 263 : 2020-06-05 19:05:00,636 [DEBUG   ] stack ['$170binary_xor.81']
LINE 262 : 2020-06-05 19:05:00,636 [DEBUG   ] dispatch pc=174, inst=LOAD_CONST(arg=10, lineno=34)
LINE 263 : 2020-06-05 19:05:00,636 [DEBUG   ] stack ['$170binary_xor.81', '$state172.82']
LINE 262 : 2020-06-05 19:05:00,636 [DEBUG   ] dispatch pc=176, inst=BINARY_SUBSCR(arg=None, lineno=34)
LINE 263 : 2020-06-05 19:05:00,636 [DEBUG   ] stack ['$170binary_xor.81', '$state172.82', '$const174.83']
LINE 262 : 2020-06-05 19:05:00,636 [DEBUG   ] dispatch pc=178, inst=BINARY_XOR(arg=None, lineno=34)
LINE 263 : 2020-06-05 19:05:00,636 [DEBUG   ] stack ['$170binary_xor.81', '$176binary_subscr.84']
LINE 262 : 2020-06-05 19:05:00,636 [DEBUG   ] dispatch pc=180, inst=RETURN_VALUE(arg=None, lineno=34)
LINE 263 : 2020-06-05 19:05:00,636 [DEBUG   ] stack ['$178binary_xor.85']
LINE 135 : 2020-06-05 19:05:00,636 [DEBUG   ] end state. edges=[]
LINE 163 : 2020-06-05 19:05:00,637 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:00,637 [DEBUG   ] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:00,637 [DEBUG   ] defmap: {}
LINE 190 : 2020-06-05 19:05:00,637 [DEBUG   ] phismap: defaultdict(<class 'set'>, {})
LINE 211 : 2020-06-05 19:05:00,637 [DEBUG   ] changing phismap: defaultdict(<class 'set'>, {})
LINE 220 : 2020-06-05 19:05:00,638 [DEBUG   ] keep phismap: {}
LINE 226 : 2020-06-05 19:05:00,638 [DEBUG   ] new_out: defaultdict(<class 'dict'>, {})
LINE 236 : 2020-06-05 19:05:00,638 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:00,638 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$state2.0'}), (4, {'res': '$const4.1'}), (6, {'index': '$const4.1', 'target': '$state2.0', 'res': '$6binary_subscr.2'}), (8, {'res': '$const8.3'}), (10, {'lhs': '$6binary_subscr.2', 'rhs': '$const8.3', 'res': '$10binary_and.4'}), (12, {'res': '$const12.5'}), (14, {'lhs': '$10binary_and.4', 'rhs': '$const12.5', 'res': '$14binary_lshift.6'}), (16, {'res': '$const16.7'}), (18, {'lhs': '$14binary_lshift.6', 'rhs': '$const16.7', 'res': '$18binary_and.8'}), (20, {'res': '$state20.9'}), (22, {'res': '$const22.10'}), (24, {'index': '$const22.10', 'target': '$state20.9', 'res': '$24binary_subscr.11'}), (26, {'res': '$const26.12'}), (28, {'lhs': '$24binary_subscr.11', 'rhs': '$const26.12', 'res': '$28binary_lshift.13'}), (30, {'res': '$const30.14'}), (32, {'lhs': '$28binary_lshift.13', 'rhs': '$const30.14', 'res': '$32binary_and.15'}), (34, {'res': '$state34.16'}), (36, {'res': '$const36.17'}), (38, {'index': '$const36.17', 'target': '$state34.16', 'res': '$38binary_subscr.18'}), (40, {'lhs': '$32binary_and.15', 'rhs': '$38binary_subscr.18', 'res': '$40binary_xor.19'}), (42, {'res': '$const42.20'}), (44, {'lhs': '$40binary_xor.19', 'rhs': '$const42.20', 'res': '$44binary_rshift.21'}), (46, {'lhs': '$18binary_and.8', 'rhs': '$44binary_rshift.21', 'res': '$46binary_xor.22'}), (48, {'res': '$state48.23'}), (50, {'res': '$const50.24'}), (52, {'target': '$state48.23', 'index': '$const50.24', 'value': '$46binary_xor.22'}), (54, {'res': '$state54.25'}), (56, {'res': '$const56.26'}), (58, {'index': '$const56.26', 'target': '$state54.25', 'res': '$58binary_subscr.27'}), (60, {'res': '$const60.28'}), (62, {'lhs': '$58binary_subscr.27', 'rhs': '$const60.28', 'res': '$62binary_and.29'}), (64, {'res': '$const64.30'}), (66, {'lhs': '$62binary_and.29', 'rhs': '$const64.30', 'res': '$66binary_lshift.31'}), (68, {'res': '$const68.32'}), (70, {'lhs': '$66binary_lshift.31', 'rhs': '$const68.32', 'res': '$70binary_and.33'}), (72, {'res': '$state72.34'}), (74, {'res': '$const74.35'}), (76, {'index': '$const74.35', 'target': '$state72.34', 'res': '$76binary_subscr.36'}), (78, {'res': '$const78.37'}), (80, {'lhs': '$76binary_subscr.36', 'rhs': '$const78.37', 'res': '$80binary_lshift.38'}), (82, {'res': '$const82.39'}), (84, {'lhs': '$80binary_lshift.38', 'rhs': '$const82.39', 'res': '$84binary_and.40'}), (86, {'res': '$state86.41'}), (88, {'res': '$const88.42'}), (90, {'index': '$const88.42', 'target': '$state86.41', 'res': '$90binary_subscr.43'}), (92, {'lhs': '$84binary_and.40', 'rhs': '$90binary_subscr.43', 'res': '$92binary_xor.44'}), (94, {'res': '$const94.45'}), (96, {'lhs': '$92binary_xor.44', 'rhs': '$const94.45', 'res': '$96binary_rshift.46'}), (98, {'lhs': '$70binary_and.33', 'rhs': '$96binary_rshift.46', 'res': '$98binary_xor.47'}), (100, {'res': '$state100.48'}), (102, {'res': '$const102.49'}), (104, {'target': '$state100.48', 'index': '$const102.49', 'value': '$98binary_xor.47'}), (106, {'res': '$state106.50'}), (108, {'res': '$const108.51'}), (110, {'index': '$const108.51', 'target': '$state106.50', 'res': '$110binary_subscr.52'}), (112, {'res': '$const112.53'}), (114, {'lhs': '$110binary_subscr.52', 'rhs': '$const112.53', 'res': '$114binary_and.54'}), (116, {'res': '$const116.55'}), (118, {'lhs': '$114binary_and.54', 'rhs': '$const116.55', 'res': '$118binary_lshift.56'}), (120, {'res': '$const120.57'}), (122, {'lhs': '$118binary_lshift.56', 'rhs': '$const120.57', 'res': '$122binary_and.58'}), (124, {'res': '$state124.59'}), (126, {'res': '$const126.60'}), (128, {'index': '$const126.60', 'target': '$state124.59', 'res': '$128binary_subscr.61'}), (130, {'res': '$const130.62'}), (132, {'lhs': '$128binary_subscr.61', 'rhs': '$const130.62', 'res': '$132binary_lshift.63'}), (134, {'res': '$const134.64'}), (136, {'lhs': '$132binary_lshift.63', 'rhs': '$const134.64', 'res': '$136binary_and.65'}), (138, {'res': '$state138.66'}), (140, {'res': '$const140.67'}), (142, {'index': '$const140.67', 'target': '$state138.66', 'res': '$142binary_subscr.68'}), (144, {'lhs': '$136binary_and.65', 'rhs': '$142binary_subscr.68', 'res': '$144binary_xor.69'}), (146, {'res': '$const146.70'}), (148, {'lhs': '$144binary_xor.69', 'rhs': '$const146.70', 'res': '$148binary_rshift.71'}), (150, {'lhs': '$122binary_and.58', 'rhs': '$148binary_rshift.71', 'res': '$150binary_xor.72'}), (152, {'res': '$state152.73'}), (154, {'res': '$const154.74'}), (156, {'target': '$state152.73', 'index': '$const154.74', 'value': '$150binary_xor.72'}), (158, {'res': '$state158.75'}), (160, {'res': '$const160.76'}), (162, {'index': '$const160.76', 'target': '$state158.75', 'res': '$162binary_subscr.77'}), (164, {'res': '$state164.78'}), (166, {'res': '$const166.79'}), (168, {'index': '$const166.79', 'target': '$state164.78', 'res': '$168binary_subscr.80'}), (170, {'lhs': '$162binary_subscr.77', 'rhs': '$168binary_subscr.80', 'res': '$170binary_xor.81'}), (172, {'res': '$state172.82'}), (174, {'res': '$const174.83'}), (176, {'index': '$const174.83', 'target': '$state172.82', 'res': '$176binary_subscr.84'}), (178, {'lhs': '$170binary_xor.81', 'rhs': '$176binary_subscr.84', 'res': '$178binary_xor.85'}), (180, {'retval': '$178binary_xor.85', 'castval': '$180return_value.86'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:00,641 [DEBUG   ] label 0:
    state = arg(0, name=state)               ['state']
    $const4.1 = const(int, 0)                ['$const4.1']
    $6binary_subscr.2 = getitem(value=state, index=$const4.1) ['$6binary_subscr.2', '$const4.1', 'state']
    $const8.3 = const(int, 4294967294)       ['$const8.3']
    $10binary_and.4 = $6binary_subscr.2 & $const8.3 ['$10binary_and.4', '$6binary_subscr.2', '$const8.3']
    $const12.5 = const(int, 12)              ['$const12.5']
    $14binary_lshift.6 = $10binary_and.4 << $const12.5 ['$10binary_and.4', '$14binary_lshift.6', '$const12.5']
    $const16.7 = const(int, 4294967295)      ['$const16.7']
    $18binary_and.8 = $14binary_lshift.6 & $const16.7 ['$14binary_lshift.6', '$18binary_and.8', '$const16.7']
    $const22.10 = const(int, 0)              ['$const22.10']
    $24binary_subscr.11 = getitem(value=state, index=$const22.10) ['$24binary_subscr.11', '$const22.10', 'state']
    $const26.12 = const(int, 13)             ['$const26.12']
    $28binary_lshift.13 = $24binary_subscr.11 << $const26.12 ['$24binary_subscr.11', '$28binary_lshift.13', '$const26.12']
    $const30.14 = const(int, 4294967295)     ['$const30.14']
    $32binary_and.15 = $28binary_lshift.13 & $const30.14 ['$28binary_lshift.13', '$32binary_and.15', '$const30.14']
    $const36.17 = const(int, 0)              ['$const36.17']
    $38binary_subscr.18 = getitem(value=state, index=$const36.17) ['$38binary_subscr.18', '$const36.17', 'state']
    $40binary_xor.19 = $32binary_and.15 ^ $38binary_subscr.18 ['$32binary_and.15', '$38binary_subscr.18', '$40binary_xor.19']
    $const42.20 = const(int, 19)             ['$const42.20']
    $44binary_rshift.21 = $40binary_xor.19 >> $const42.20 ['$40binary_xor.19', '$44binary_rshift.21', '$const42.20']
    $46binary_xor.22 = $18binary_and.8 ^ $44binary_rshift.21 ['$18binary_and.8', '$44binary_rshift.21', '$46binary_xor.22']
    $const50.24 = const(int, 0)              ['$const50.24']
    state[$const50.24] = $46binary_xor.22    ['$46binary_xor.22', '$const50.24', 'state']
    $const56.26 = const(int, 1)              ['$const56.26']
    $58binary_subscr.27 = getitem(value=state, index=$const56.26) ['$58binary_subscr.27', '$const56.26', 'state']
    $const60.28 = const(int, 4294967288)     ['$const60.28']
    $62binary_and.29 = $58binary_subscr.27 & $const60.28 ['$58binary_subscr.27', '$62binary_and.29', '$const60.28']
    $const64.30 = const(int, 4)              ['$const64.30']
    $66binary_lshift.31 = $62binary_and.29 << $const64.30 ['$62binary_and.29', '$66binary_lshift.31', '$const64.30']
    $const68.32 = const(int, 4294967295)     ['$const68.32']
    $70binary_and.33 = $66binary_lshift.31 & $const68.32 ['$66binary_lshift.31', '$70binary_and.33', '$const68.32']
    $const74.35 = const(int, 1)              ['$const74.35']
    $76binary_subscr.36 = getitem(value=state, index=$const74.35) ['$76binary_subscr.36', '$const74.35', 'state']
    $const78.37 = const(int, 2)              ['$const78.37']
    $80binary_lshift.38 = $76binary_subscr.36 << $const78.37 ['$76binary_subscr.36', '$80binary_lshift.38', '$const78.37']
    $const82.39 = const(int, 4294967295)     ['$const82.39']
    $84binary_and.40 = $80binary_lshift.38 & $const82.39 ['$80binary_lshift.38', '$84binary_and.40', '$const82.39']
    $const88.42 = const(int, 1)              ['$const88.42']
    $90binary_subscr.43 = getitem(value=state, index=$const88.42) ['$90binary_subscr.43', '$const88.42', 'state']
    $92binary_xor.44 = $84binary_and.40 ^ $90binary_subscr.43 ['$84binary_and.40', '$90binary_subscr.43', '$92binary_xor.44']
    $const94.45 = const(int, 25)             ['$const94.45']
    $96binary_rshift.46 = $92binary_xor.44 >> $const94.45 ['$92binary_xor.44', '$96binary_rshift.46', '$const94.45']
    $98binary_xor.47 = $70binary_and.33 ^ $96binary_rshift.46 ['$70binary_and.33', '$96binary_rshift.46', '$98binary_xor.47']
    $const102.49 = const(int, 1)             ['$const102.49']
    state[$const102.49] = $98binary_xor.47   ['$98binary_xor.47', '$const102.49', 'state']
    $const108.51 = const(int, 2)             ['$const108.51']
    $110binary_subscr.52 = getitem(value=state, index=$const108.51) ['$110binary_subscr.52', '$const108.51', 'state']
    $const112.53 = const(int, 4294967280)    ['$const112.53']
    $114binary_and.54 = $110binary_subscr.52 & $const112.53 ['$110binary_subscr.52', '$114binary_and.54', '$const112.53']
    $const116.55 = const(int, 17)            ['$const116.55']
    $118binary_lshift.56 = $114binary_and.54 << $const116.55 ['$114binary_and.54', '$118binary_lshift.56', '$const116.55']
    $const120.57 = const(int, 4294967295)    ['$const120.57']
    $122binary_and.58 = $118binary_lshift.56 & $const120.57 ['$118binary_lshift.56', '$122binary_and.58', '$const120.57']
    $const126.60 = const(int, 2)             ['$const126.60']
    $128binary_subscr.61 = getitem(value=state, index=$const126.60) ['$128binary_subscr.61', '$const126.60', 'state']
    $const130.62 = const(int, 3)             ['$const130.62']
    $132binary_lshift.63 = $128binary_subscr.61 << $const130.62 ['$128binary_subscr.61', '$132binary_lshift.63', '$const130.62']
    $const134.64 = const(int, 4294967295)    ['$const134.64']
    $136binary_and.65 = $132binary_lshift.63 & $const134.64 ['$132binary_lshift.63', '$136binary_and.65', '$const134.64']
    $const140.67 = const(int, 2)             ['$const140.67']
    $142binary_subscr.68 = getitem(value=state, index=$const140.67) ['$142binary_subscr.68', '$const140.67', 'state']
    $144binary_xor.69 = $136binary_and.65 ^ $142binary_subscr.68 ['$136binary_and.65', '$142binary_subscr.68', '$144binary_xor.69']
    $const146.70 = const(int, 11)            ['$const146.70']
    $148binary_rshift.71 = $144binary_xor.69 >> $const146.70 ['$144binary_xor.69', '$148binary_rshift.71', '$const146.70']
    $150binary_xor.72 = $122binary_and.58 ^ $148binary_rshift.71 ['$122binary_and.58', '$148binary_rshift.71', '$150binary_xor.72']
    $const154.74 = const(int, 2)             ['$const154.74']
    state[$const154.74] = $150binary_xor.72  ['$150binary_xor.72', '$const154.74', 'state']
    $const160.76 = const(int, 0)             ['$const160.76']
    $162binary_subscr.77 = getitem(value=state, index=$const160.76) ['$162binary_subscr.77', '$const160.76', 'state']
    $const166.79 = const(int, 1)             ['$const166.79']
    $168binary_subscr.80 = getitem(value=state, index=$const166.79) ['$168binary_subscr.80', '$const166.79', 'state']
    $170binary_xor.81 = $162binary_subscr.77 ^ $168binary_subscr.80 ['$162binary_subscr.77', '$168binary_subscr.80', '$170binary_xor.81']
    $const174.83 = const(int, 2)             ['$const174.83']
    $176binary_subscr.84 = getitem(value=state, index=$const174.83) ['$176binary_subscr.84', '$const174.83', 'state']
    $178binary_xor.85 = $170binary_xor.81 ^ $176binary_subscr.84 ['$170binary_xor.81', '$176binary_subscr.84', '$178binary_xor.85']
    $180return_value.86 = cast(value=$178binary_xor.85) ['$178binary_xor.85', '$180return_value.86']
    return $180return_value.86               ['$180return_value.86']

LINE 74  : 2020-06-05 19:05:00,826 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=50)
           2	LOAD_GLOBAL(arg=0, lineno=50)
           4	LOAD_FAST(arg=0, lineno=50)
           6	CALL_FUNCTION(arg=1, lineno=50)
           8	STORE_FAST(arg=1, lineno=50)
          10	LOAD_GLOBAL(arg=1, lineno=51)
          12	LOAD_GLOBAL(arg=2, lineno=51)
          14	LOAD_FAST(arg=1, lineno=51)
          16	CALL_FUNCTION(arg=1, lineno=51)
          18	LOAD_CONST(arg=1, lineno=51)
          20	BINARY_TRUE_DIVIDE(arg=None, lineno=51)
          22	CALL_FUNCTION(arg=1, lineno=51)
          24	RETURN_VALUE(arg=None, lineno=51)
LINE 100 : 2020-06-05 19:05:00,826 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:00,826 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:00,826 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=50)
LINE 263 : 2020-06-05 19:05:00,826 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,826 [DEBUG   ] dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=50)
LINE 263 : 2020-06-05 19:05:00,826 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,826 [DEBUG   ] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=50)
LINE 263 : 2020-06-05 19:05:00,826 [DEBUG   ] stack ['$2load_global.0']
LINE 262 : 2020-06-05 19:05:00,827 [DEBUG   ] dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=50)
LINE 263 : 2020-06-05 19:05:00,827 [DEBUG   ] stack ['$2load_global.0', '$state4.1']
LINE 262 : 2020-06-05 19:05:00,827 [DEBUG   ] dispatch pc=8, inst=STORE_FAST(arg=1, lineno=50)
LINE 263 : 2020-06-05 19:05:00,827 [DEBUG   ] stack ['$6call_function.2']
LINE 262 : 2020-06-05 19:05:00,827 [DEBUG   ] dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=51)
LINE 263 : 2020-06-05 19:05:00,827 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,827 [DEBUG   ] dispatch pc=12, inst=LOAD_GLOBAL(arg=2, lineno=51)
LINE 263 : 2020-06-05 19:05:00,827 [DEBUG   ] stack ['$10load_global.3']
LINE 262 : 2020-06-05 19:05:00,827 [DEBUG   ] dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=51)
LINE 263 : 2020-06-05 19:05:00,827 [DEBUG   ] stack ['$10load_global.3', '$12load_global.4']
LINE 262 : 2020-06-05 19:05:00,827 [DEBUG   ] dispatch pc=16, inst=CALL_FUNCTION(arg=1, lineno=51)
LINE 263 : 2020-06-05 19:05:00,827 [DEBUG   ] stack ['$10load_global.3', '$12load_global.4', '$integer14.5']
LINE 262 : 2020-06-05 19:05:00,827 [DEBUG   ] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=51)
LINE 263 : 2020-06-05 19:05:00,828 [DEBUG   ] stack ['$10load_global.3', '$16call_function.6']
LINE 262 : 2020-06-05 19:05:00,828 [DEBUG   ] dispatch pc=20, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=51)
LINE 263 : 2020-06-05 19:05:00,828 [DEBUG   ] stack ['$10load_global.3', '$16call_function.6', '$const18.7']
LINE 262 : 2020-06-05 19:05:00,828 [DEBUG   ] dispatch pc=22, inst=CALL_FUNCTION(arg=1, lineno=51)
LINE 263 : 2020-06-05 19:05:00,828 [DEBUG   ] stack ['$10load_global.3', '$20binary_true_divide.8']
LINE 262 : 2020-06-05 19:05:00,828 [DEBUG   ] dispatch pc=24, inst=RETURN_VALUE(arg=None, lineno=51)
LINE 263 : 2020-06-05 19:05:00,828 [DEBUG   ] stack ['$22call_function.9']
LINE 135 : 2020-06-05 19:05:00,828 [DEBUG   ] end state. edges=[]
LINE 163 : 2020-06-05 19:05:00,828 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:00,828 [DEBUG   ] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:00,828 [DEBUG   ] defmap: {}
LINE 190 : 2020-06-05 19:05:00,828 [DEBUG   ] phismap: defaultdict(<class 'set'>, {})
LINE 211 : 2020-06-05 19:05:00,829 [DEBUG   ] changing phismap: defaultdict(<class 'set'>, {})
LINE 220 : 2020-06-05 19:05:00,829 [DEBUG   ] keep phismap: {}
LINE 226 : 2020-06-05 19:05:00,829 [DEBUG   ] new_out: defaultdict(<class 'dict'>, {})
LINE 236 : 2020-06-05 19:05:00,829 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:00,829 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$state4.1'}), (6, {'func': '$2load_global.0', 'args': ['$state4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_global.3'}), (12, {'res': '$12load_global.4'}), (14, {'res': '$integer14.5'}), (16, {'func': '$12load_global.4', 'args': ['$integer14.5'], 'res': '$16call_function.6'}), (18, {'res': '$const18.7'}), (20, {'lhs': '$16call_function.6', 'rhs': '$const18.7', 'res': '$20binary_true_divide.8'}), (22, {'func': '$10load_global.3', 'args': ['$20binary_true_divide.8'], 'res': '$22call_function.9'}), (24, {'retval': '$22call_function.9', 'castval': '$24return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:00,830 [DEBUG   ] label 0:
    state = arg(0, name=state)               ['state']
    $2load_global.0 = global(tau_rand_int: CPUDispatcher(<function tau_rand_int at 0x123f99730>)) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(state, func=$2load_global.0, args=[Var(state, utils.py:50)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'state']
    integer = $6call_function.2              ['$6call_function.2', 'integer']
    $10load_global.3 = global(abs: <built-in function abs>) ['$10load_global.3']
    $12load_global.4 = global(float: <class 'float'>) ['$12load_global.4']
    $16call_function.6 = call $12load_global.4(integer, func=$12load_global.4, args=[Var(integer, utils.py:50)], kws=(), vararg=None) ['$12load_global.4', '$16call_function.6', 'integer']
    $const18.7 = const(int, 2147483647)      ['$const18.7']
    $20binary_true_divide.8 = $16call_function.6 / $const18.7 ['$16call_function.6', '$20binary_true_divide.8', '$const18.7']
    $22call_function.9 = call $10load_global.3($20binary_true_divide.8, func=$10load_global.3, args=[Var($20binary_true_divide.8, utils.py:51)], kws=(), vararg=None) ['$10load_global.3', '$20binary_true_divide.8', '$22call_function.9']
    $24return_value.10 = cast(value=$22call_function.9) ['$22call_function.9', '$24return_value.10']
    return $24return_value.10                ['$24return_value.10']

LINE 74  : 2020-06-05 19:05:00,893 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=131)
           2	LOAD_GLOBAL(arg=0, lineno=131)
           4	LOAD_ATTR(arg=1, lineno=131)
           6	LOAD_CONST(arg=1, lineno=131)
           8	LOAD_GLOBAL(arg=2, lineno=131)
          10	LOAD_FAST(arg=0, lineno=131)
          12	CALL_FUNCTION(arg=1, lineno=131)
          14	LOAD_GLOBAL(arg=2, lineno=131)
          16	LOAD_FAST(arg=1, lineno=131)
          18	CALL_FUNCTION(arg=1, lineno=131)
          20	BUILD_TUPLE(arg=3, lineno=131)
          22	LOAD_GLOBAL(arg=0, lineno=131)
          24	LOAD_ATTR(arg=3, lineno=131)
          26	LOAD_CONST(arg=2, lineno=131)
          28	CALL_FUNCTION_KW(arg=2, lineno=131)
          30	STORE_FAST(arg=2, lineno=131)
          32	LOAD_CONST(arg=3, lineno=132)
          34	LOAD_FAST(arg=2, lineno=132)
          36	LOAD_CONST(arg=4, lineno=132)
          38	STORE_SUBSCR(arg=None, lineno=132)
          40	LOAD_GLOBAL(arg=0, lineno=133)
          42	LOAD_ATTR(arg=4, lineno=133)
          44	LOAD_FAST(arg=2, lineno=133)
          46	LOAD_CONST(arg=5, lineno=133)
          48	STORE_SUBSCR(arg=None, lineno=133)
          50	LOAD_CONST(arg=4, lineno=134)
          52	LOAD_FAST(arg=2, lineno=134)
          54	LOAD_CONST(arg=6, lineno=134)
          56	STORE_SUBSCR(arg=None, lineno=134)
          58	LOAD_FAST(arg=2, lineno=136)
          60	RETURN_VALUE(arg=None, lineno=136)
LINE 100 : 2020-06-05 19:05:00,893 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:00,893 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:00,893 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=131)
LINE 263 : 2020-06-05 19:05:00,893 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,893 [DEBUG   ] dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=131)
LINE 263 : 2020-06-05 19:05:00,893 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,893 [DEBUG   ] dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=131)
LINE 263 : 2020-06-05 19:05:00,893 [DEBUG   ] stack ['$2load_global.0']
LINE 262 : 2020-06-05 19:05:00,893 [DEBUG   ] dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=131)
LINE 263 : 2020-06-05 19:05:00,893 [DEBUG   ] stack ['$4load_attr.1']
LINE 262 : 2020-06-05 19:05:00,894 [DEBUG   ] dispatch pc=8, inst=LOAD_GLOBAL(arg=2, lineno=131)
LINE 263 : 2020-06-05 19:05:00,894 [DEBUG   ] stack ['$4load_attr.1', '$const6.2']
LINE 262 : 2020-06-05 19:05:00,894 [DEBUG   ] dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=131)
LINE 263 : 2020-06-05 19:05:00,894 [DEBUG   ] stack ['$4load_attr.1', '$const6.2', '$8load_global.3']
LINE 262 : 2020-06-05 19:05:00,894 [DEBUG   ] dispatch pc=12, inst=CALL_FUNCTION(arg=1, lineno=131)
LINE 263 : 2020-06-05 19:05:00,894 [DEBUG   ] stack ['$4load_attr.1', '$const6.2', '$8load_global.3', '$n_points10.4']
LINE 262 : 2020-06-05 19:05:00,894 [DEBUG   ] dispatch pc=14, inst=LOAD_GLOBAL(arg=2, lineno=131)
LINE 263 : 2020-06-05 19:05:00,894 [DEBUG   ] stack ['$4load_attr.1', '$const6.2', '$12call_function.5']
LINE 262 : 2020-06-05 19:05:00,894 [DEBUG   ] dispatch pc=16, inst=LOAD_FAST(arg=1, lineno=131)
LINE 263 : 2020-06-05 19:05:00,894 [DEBUG   ] stack ['$4load_attr.1', '$const6.2', '$12call_function.5', '$14load_global.6']
LINE 262 : 2020-06-05 19:05:00,894 [DEBUG   ] dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=131)
LINE 263 : 2020-06-05 19:05:00,894 [DEBUG   ] stack ['$4load_attr.1', '$const6.2', '$12call_function.5', '$14load_global.6', '$size16.7']
LINE 262 : 2020-06-05 19:05:00,894 [DEBUG   ] dispatch pc=20, inst=BUILD_TUPLE(arg=3, lineno=131)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$4load_attr.1', '$const6.2', '$12call_function.5', '$18call_function.8']
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=22, inst=LOAD_GLOBAL(arg=0, lineno=131)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$4load_attr.1', '$20build_tuple.9']
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=24, inst=LOAD_ATTR(arg=3, lineno=131)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$4load_attr.1', '$20build_tuple.9', '$22load_global.10']
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=26, inst=LOAD_CONST(arg=2, lineno=131)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$4load_attr.1', '$20build_tuple.9', '$24load_attr.11']
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=28, inst=CALL_FUNCTION_KW(arg=2, lineno=131)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$4load_attr.1', '$20build_tuple.9', '$24load_attr.11', '$const26.12']
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=30, inst=STORE_FAST(arg=2, lineno=131)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$28call_function_kw.13']
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=32, inst=LOAD_CONST(arg=3, lineno=132)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=34, inst=LOAD_FAST(arg=2, lineno=132)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$const32.14']
LINE 262 : 2020-06-05 19:05:00,895 [DEBUG   ] dispatch pc=36, inst=LOAD_CONST(arg=4, lineno=132)
LINE 263 : 2020-06-05 19:05:00,895 [DEBUG   ] stack ['$const32.14', '$result34.15']
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=38, inst=STORE_SUBSCR(arg=None, lineno=132)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack ['$const32.14', '$result34.15', '$const36.16']
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=40, inst=LOAD_GLOBAL(arg=0, lineno=133)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=42, inst=LOAD_ATTR(arg=4, lineno=133)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack ['$40load_global.17']
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=44, inst=LOAD_FAST(arg=2, lineno=133)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack ['$42load_attr.18']
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=46, inst=LOAD_CONST(arg=5, lineno=133)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack ['$42load_attr.18', '$result44.19']
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=48, inst=STORE_SUBSCR(arg=None, lineno=133)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack ['$42load_attr.18', '$result44.19', '$const46.20']
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=50, inst=LOAD_CONST(arg=4, lineno=134)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=134)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack ['$const50.21']
LINE 262 : 2020-06-05 19:05:00,896 [DEBUG   ] dispatch pc=54, inst=LOAD_CONST(arg=6, lineno=134)
LINE 263 : 2020-06-05 19:05:00,896 [DEBUG   ] stack ['$const50.21', '$result52.22']
LINE 262 : 2020-06-05 19:05:00,897 [DEBUG   ] dispatch pc=56, inst=STORE_SUBSCR(arg=None, lineno=134)
LINE 263 : 2020-06-05 19:05:00,897 [DEBUG   ] stack ['$const50.21', '$result52.22', '$const54.23']
LINE 262 : 2020-06-05 19:05:00,897 [DEBUG   ] dispatch pc=58, inst=LOAD_FAST(arg=2, lineno=136)
LINE 263 : 2020-06-05 19:05:00,897 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:00,897 [DEBUG   ] dispatch pc=60, inst=RETURN_VALUE(arg=None, lineno=136)
LINE 263 : 2020-06-05 19:05:00,897 [DEBUG   ] stack ['$result58.24']
LINE 135 : 2020-06-05 19:05:00,897 [DEBUG   ] end state. edges=[]
LINE 163 : 2020-06-05 19:05:00,897 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:00,897 [DEBUG   ] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:00,897 [DEBUG   ] defmap: {}
LINE 190 : 2020-06-05 19:05:00,897 [DEBUG   ] phismap: defaultdict(<class 'set'>, {})
LINE 211 : 2020-06-05 19:05:00,897 [DEBUG   ] changing phismap: defaultdict(<class 'set'>, {})
LINE 220 : 2020-06-05 19:05:00,897 [DEBUG   ] keep phismap: {}
LINE 226 : 2020-06-05 19:05:00,897 [DEBUG   ] new_out: defaultdict(<class 'dict'>, {})
LINE 236 : 2020-06-05 19:05:00,897 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:00,898 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'res': '$8load_global.3'}), (10, {'res': '$n_points10.4'}), (12, {'func': '$8load_global.3', 'args': ['$n_points10.4'], 'res': '$12call_function.5'}), (14, {'res': '$14load_global.6'}), (16, {'res': '$size16.7'}), (18, {'func': '$14load_global.6', 'args': ['$size16.7'], 'res': '$18call_function.8'}), (20, {'items': ['$const6.2', '$12call_function.5', '$18call_function.8'], 'res': '$20build_tuple.9'}), (22, {'res': '$22load_global.10'}), (24, {'item': '$22load_global.10', 'res': '$24load_attr.11'}), (26, {'res': '$const26.12'}), (28, {'func': '$4load_attr.1', 'args': ['$20build_tuple.9', '$24load_attr.11'], 'names': '$const26.12', 'res': '$28call_function_kw.13'}), (30, {'value': '$28call_function_kw.13'}), (32, {'res': '$const32.14'}), (34, {'res': '$result34.15'}), (36, {'res': '$const36.16'}), (38, {'target': '$result34.15', 'index': '$const36.16', 'value': '$const32.14'}), (40, {'res': '$40load_global.17'}), (42, {'item': '$40load_global.17', 'res': '$42load_attr.18'}), (44, {'res': '$result44.19'}), (46, {'res': '$const46.20'}), (48, {'target': '$result44.19', 'index': '$const46.20', 'value': '$42load_attr.18'}), (50, {'res': '$const50.21'}), (52, {'res': '$result52.22'}), (54, {'res': '$const54.23'}), (56, {'target': '$result52.22', 'index': '$const54.23', 'value': '$const50.21'}), (58, {'res': '$result58.24'}), (60, {'retval': '$result58.24', 'castval': '$60return_value.25'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:00,899 [DEBUG   ] label 0:
    n_points = arg(0, name=n_points)         ['n_points']
    size = arg(1, name=size)                 ['size']
    $2load_global.0 = global(np: <module 'numpy' from '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/__init__.py'>) ['$2load_global.0']
    $4load_attr.1 = getattr(value=$2load_global.0, attr=zeros) ['$2load_global.0', '$4load_attr.1']
    $const6.2 = const(int, 3)                ['$const6.2']
    $8load_global.3 = global(int: <class 'int'>) ['$8load_global.3']
    $12call_function.5 = call $8load_global.3(n_points, func=$8load_global.3, args=[Var(n_points, utils.py:131)], kws=(), vararg=None) ['$12call_function.5', '$8load_global.3', 'n_points']
    $14load_global.6 = global(int: <class 'int'>) ['$14load_global.6']
    $18call_function.8 = call $14load_global.6(size, func=$14load_global.6, args=[Var(size, utils.py:131)], kws=(), vararg=None) ['$14load_global.6', '$18call_function.8', 'size']
    $20build_tuple.9 = build_tuple(items=[Var($const6.2, utils.py:131), Var($12call_function.5, utils.py:131), Var($18call_function.8, utils.py:131)]) ['$12call_function.5', '$18call_function.8', '$20build_tuple.9', '$const6.2']
    $22load_global.10 = global(np: <module 'numpy' from '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/__init__.py'>) ['$22load_global.10']
    $24load_attr.11 = getattr(value=$22load_global.10, attr=float64) ['$22load_global.10', '$24load_attr.11']
    $28call_function_kw.13 = call $4load_attr.1($20build_tuple.9, func=$4load_attr.1, args=[Var($20build_tuple.9, utils.py:131)], kws=[('dtype', Var($24load_attr.11, utils.py:131))], vararg=None) ['$20build_tuple.9', '$24load_attr.11', '$28call_function_kw.13', '$4load_attr.1']
    result = $28call_function_kw.13          ['$28call_function_kw.13', 'result']
    $const32.14 = const(int, -1)             ['$const32.14']
    $const36.16 = const(int, 0)              ['$const36.16']
    result[$const36.16] = $const32.14        ['$const32.14', '$const36.16', 'result']
    $40load_global.17 = global(np: <module 'numpy' from '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/__init__.py'>) ['$40load_global.17']
    $42load_attr.18 = getattr(value=$40load_global.17, attr=infty) ['$40load_global.17', '$42load_attr.18']
    $const46.20 = const(int, 1)              ['$const46.20']
    result[$const46.20] = $42load_attr.18    ['$42load_attr.18', '$const46.20', 'result']
    $const50.21 = const(int, 0)              ['$const50.21']
    $const54.23 = const(int, 2)              ['$const54.23']
    result[$const54.23] = $const50.21        ['$const50.21', '$const54.23', 'result']
    $60return_value.25 = cast(value=result)  ['$60return_value.25', 'result']
    return $60return_value.25                ['$60return_value.25']

LINE 74  : 2020-06-05 19:05:01,048 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=168)
           2	LOAD_GLOBAL(arg=0, lineno=168)
           4	LOAD_FAST(arg=1, lineno=168)
           6	CALL_FUNCTION(arg=1, lineno=168)
           8	STORE_FAST(arg=1, lineno=168)
          10	LOAD_FAST(arg=0, lineno=169)
          12	LOAD_CONST(arg=1, lineno=169)
          14	LOAD_FAST(arg=1, lineno=169)
          16	BUILD_TUPLE(arg=2, lineno=169)
          18	BINARY_SUBSCR(arg=None, lineno=169)
          20	STORE_FAST(arg=5, lineno=169)
          22	LOAD_FAST(arg=0, lineno=170)
          24	LOAD_CONST(arg=2, lineno=170)
          26	LOAD_FAST(arg=1, lineno=170)
          28	BUILD_TUPLE(arg=2, lineno=170)
          30	BINARY_SUBSCR(arg=None, lineno=170)
          32	STORE_FAST(arg=6, lineno=170)
          34	LOAD_FAST(arg=0, lineno=171)
          36	LOAD_CONST(arg=3, lineno=171)
          38	LOAD_FAST(arg=1, lineno=171)
          40	BUILD_TUPLE(arg=2, lineno=171)
          42	BINARY_SUBSCR(arg=None, lineno=171)
          44	STORE_FAST(arg=7, lineno=171)
          46	LOAD_FAST(arg=2, lineno=173)
          48	LOAD_FAST(arg=6, lineno=173)
          50	LOAD_CONST(arg=1, lineno=173)
          52	BINARY_SUBSCR(arg=None, lineno=173)
          54	COMPARE_OP(arg=5, lineno=173)
          56	POP_JUMP_IF_FALSE(arg=62, lineno=173)
          58	LOAD_CONST(arg=1, lineno=174)
          60	RETURN_VALUE(arg=None, lineno=174)
>         62	SETUP_LOOP(arg=38, lineno=177)
          64	LOAD_GLOBAL(arg=1, lineno=177)
          66	LOAD_FAST(arg=5, lineno=177)
          68	LOAD_ATTR(arg=2, lineno=177)
          70	LOAD_CONST(arg=1, lineno=177)
          72	BINARY_SUBSCR(arg=None, lineno=177)
          74	CALL_FUNCTION(arg=1, lineno=177)
          76	GET_ITER(arg=None, lineno=177)
>         78	FOR_ITER(arg=20, lineno=177)
          80	STORE_FAST(arg=8, lineno=177)
          82	LOAD_FAST(arg=3, lineno=178)
          84	LOAD_FAST(arg=5, lineno=178)
          86	LOAD_FAST(arg=8, lineno=178)
          88	BINARY_SUBSCR(arg=None, lineno=178)
          90	COMPARE_OP(arg=2, lineno=178)
          92	POP_JUMP_IF_FALSE(arg=78, lineno=178)
          94	LOAD_CONST(arg=1, lineno=179)
          96	RETURN_VALUE(arg=None, lineno=179)
          98	JUMP_ABSOLUTE(arg=78, lineno=179)
>        100	POP_BLOCK(arg=None, lineno=179)
>        102	LOAD_FAST(arg=2, lineno=182)
         104	LOAD_FAST(arg=6, lineno=182)
         106	LOAD_CONST(arg=1, lineno=182)
         108	STORE_SUBSCR(arg=None, lineno=182)
         110	LOAD_FAST(arg=3, lineno=183)
         112	LOAD_FAST(arg=5, lineno=183)
         114	LOAD_CONST(arg=1, lineno=183)
         116	STORE_SUBSCR(arg=None, lineno=183)
         118	LOAD_FAST(arg=4, lineno=184)
         120	LOAD_FAST(arg=7, lineno=184)
         122	LOAD_CONST(arg=1, lineno=184)
         124	STORE_SUBSCR(arg=None, lineno=184)
         126	LOAD_CONST(arg=1, lineno=187)
         128	STORE_FAST(arg=8, lineno=187)
         130	SETUP_LOOP(arg=178, lineno=188)
>        132	LOAD_CONST(arg=3, lineno=189)
         134	LOAD_FAST(arg=8, lineno=189)
         136	BINARY_MULTIPLY(arg=None, lineno=189)
         138	LOAD_CONST(arg=2, lineno=189)
         140	BINARY_ADD(arg=None, lineno=189)
         142	STORE_FAST(arg=9, lineno=189)
         144	LOAD_FAST(arg=9, lineno=190)
         146	LOAD_CONST(arg=2, lineno=190)
         148	BINARY_ADD(arg=None, lineno=190)
         150	STORE_FAST(arg=10, lineno=190)
         152	LOAD_FAST(arg=9, lineno=192)
         154	LOAD_FAST(arg=0, lineno=192)
         156	LOAD_ATTR(arg=2, lineno=192)
         158	LOAD_CONST(arg=3, lineno=192)
         160	BINARY_SUBSCR(arg=None, lineno=192)
         162	COMPARE_OP(arg=5, lineno=192)
         164	POP_JUMP_IF_FALSE(arg=170, lineno=192)
         166	BREAK_LOOP(arg=None, lineno=193)
         168	JUMP_FORWARD(arg=96, lineno=193)
>        170	LOAD_FAST(arg=10, lineno=194)
         172	LOAD_FAST(arg=0, lineno=194)
         174	LOAD_ATTR(arg=2, lineno=194)
         176	LOAD_CONST(arg=3, lineno=194)
         178	BINARY_SUBSCR(arg=None, lineno=194)
         180	COMPARE_OP(arg=5, lineno=194)
         182	POP_JUMP_IF_FALSE(arg=206, lineno=194)
         184	LOAD_FAST(arg=6, lineno=195)
         186	LOAD_FAST(arg=9, lineno=195)
         188	BINARY_SUBSCR(arg=None, lineno=195)
         190	LOAD_FAST(arg=2, lineno=195)
         192	COMPARE_OP(arg=4, lineno=195)
         194	POP_JUMP_IF_FALSE(arg=202, lineno=195)
         196	LOAD_FAST(arg=9, lineno=196)
         198	STORE_FAST(arg=11, lineno=196)
         200	JUMP_FORWARD(arg=2, lineno=196)
>        202	BREAK_LOOP(arg=None, lineno=198)
>        204	JUMP_FORWARD(arg=60, lineno=198)
>        206	LOAD_FAST(arg=6, lineno=199)
         208	LOAD_FAST(arg=9, lineno=199)
         210	BINARY_SUBSCR(arg=None, lineno=199)
         212	LOAD_FAST(arg=6, lineno=199)
         214	LOAD_FAST(arg=10, lineno=199)
         216	BINARY_SUBSCR(arg=None, lineno=199)
         218	COMPARE_OP(arg=5, lineno=199)
         220	POP_JUMP_IF_FALSE(arg=244, lineno=199)
         222	LOAD_FAST(arg=2, lineno=200)
         224	LOAD_FAST(arg=6, lineno=200)
         226	LOAD_FAST(arg=9, lineno=200)
         228	BINARY_SUBSCR(arg=None, lineno=200)
         230	COMPARE_OP(arg=0, lineno=200)
         232	POP_JUMP_IF_FALSE(arg=240, lineno=200)
         234	LOAD_FAST(arg=9, lineno=201)
         236	STORE_FAST(arg=11, lineno=201)
         238	JUMP_FORWARD(arg=2, lineno=201)
>        240	BREAK_LOOP(arg=None, lineno=203)
>        242	JUMP_FORWARD(arg=22, lineno=203)
>        244	LOAD_FAST(arg=2, lineno=205)
         246	LOAD_FAST(arg=6, lineno=205)
         248	LOAD_FAST(arg=10, lineno=205)
         250	BINARY_SUBSCR(arg=None, lineno=205)
         252	COMPARE_OP(arg=0, lineno=205)
         254	POP_JUMP_IF_FALSE(arg=264, lineno=205)
         258	LOAD_FAST(arg=10, lineno=206)
         260	STORE_FAST(arg=11, lineno=206)
         262	JUMP_FORWARD(arg=2, lineno=206)
>        264	BREAK_LOOP(arg=None, lineno=208)
>        266	LOAD_FAST(arg=6, lineno=210)
         268	LOAD_FAST(arg=11, lineno=210)
         270	BINARY_SUBSCR(arg=None, lineno=210)
         272	LOAD_FAST(arg=6, lineno=210)
         274	LOAD_FAST(arg=8, lineno=210)
         276	STORE_SUBSCR(arg=None, lineno=210)
         278	LOAD_FAST(arg=5, lineno=211)
         280	LOAD_FAST(arg=11, lineno=211)
         282	BINARY_SUBSCR(arg=None, lineno=211)
         284	LOAD_FAST(arg=5, lineno=211)
         286	LOAD_FAST(arg=8, lineno=211)
         288	STORE_SUBSCR(arg=None, lineno=211)
         290	LOAD_FAST(arg=7, lineno=212)
         292	LOAD_FAST(arg=11, lineno=212)
         294	BINARY_SUBSCR(arg=None, lineno=212)
         296	LOAD_FAST(arg=7, lineno=212)
         298	LOAD_FAST(arg=8, lineno=212)
         300	STORE_SUBSCR(arg=None, lineno=212)
         302	LOAD_FAST(arg=11, lineno=214)
         304	STORE_FAST(arg=8, lineno=214)
         306	JUMP_ABSOLUTE(arg=132, lineno=214)
         308	POP_BLOCK(arg=None, lineno=214)
>        310	LOAD_FAST(arg=2, lineno=216)
         312	LOAD_FAST(arg=6, lineno=216)
         314	LOAD_FAST(arg=8, lineno=216)
         316	STORE_SUBSCR(arg=None, lineno=216)
         318	LOAD_FAST(arg=3, lineno=217)
         320	LOAD_FAST(arg=5, lineno=217)
         322	LOAD_FAST(arg=8, lineno=217)
         324	STORE_SUBSCR(arg=None, lineno=217)
         326	LOAD_FAST(arg=4, lineno=218)
         328	LOAD_FAST(arg=7, lineno=218)
         330	LOAD_FAST(arg=8, lineno=218)
         332	STORE_SUBSCR(arg=None, lineno=218)
         334	LOAD_CONST(arg=2, lineno=220)
         336	RETURN_VALUE(arg=None, lineno=220)
LINE 100 : 2020-06-05 19:05:01,048 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,048 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,048 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=168)
LINE 263 : 2020-06-05 19:05:01,049 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,049 [DEBUG   ] dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=168)
LINE 263 : 2020-06-05 19:05:01,049 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,049 [DEBUG   ] dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=168)
LINE 263 : 2020-06-05 19:05:01,049 [DEBUG   ] stack ['$2load_global.0']
LINE 262 : 2020-06-05 19:05:01,049 [DEBUG   ] dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=168)
LINE 263 : 2020-06-05 19:05:01,049 [DEBUG   ] stack ['$2load_global.0', '$row4.1']
LINE 262 : 2020-06-05 19:05:01,049 [DEBUG   ] dispatch pc=8, inst=STORE_FAST(arg=1, lineno=168)
LINE 263 : 2020-06-05 19:05:01,049 [DEBUG   ] stack ['$6call_function.2']
LINE 262 : 2020-06-05 19:05:01,049 [DEBUG   ] dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=169)
LINE 263 : 2020-06-05 19:05:01,049 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,049 [DEBUG   ] dispatch pc=12, inst=LOAD_CONST(arg=1, lineno=169)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack ['$heap10.3']
LINE 262 : 2020-06-05 19:05:01,050 [DEBUG   ] dispatch pc=14, inst=LOAD_FAST(arg=1, lineno=169)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack ['$heap10.3', '$const12.4']
LINE 262 : 2020-06-05 19:05:01,050 [DEBUG   ] dispatch pc=16, inst=BUILD_TUPLE(arg=2, lineno=169)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack ['$heap10.3', '$const12.4', '$row14.5']
LINE 262 : 2020-06-05 19:05:01,050 [DEBUG   ] dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=169)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack ['$heap10.3', '$16build_tuple.6']
LINE 262 : 2020-06-05 19:05:01,050 [DEBUG   ] dispatch pc=20, inst=STORE_FAST(arg=5, lineno=169)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack ['$18binary_subscr.7']
LINE 262 : 2020-06-05 19:05:01,050 [DEBUG   ] dispatch pc=22, inst=LOAD_FAST(arg=0, lineno=170)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,050 [DEBUG   ] dispatch pc=24, inst=LOAD_CONST(arg=2, lineno=170)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack ['$heap22.8']
LINE 262 : 2020-06-05 19:05:01,050 [DEBUG   ] dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=170)
LINE 263 : 2020-06-05 19:05:01,050 [DEBUG   ] stack ['$heap22.8', '$const24.9']
LINE 262 : 2020-06-05 19:05:01,051 [DEBUG   ] dispatch pc=28, inst=BUILD_TUPLE(arg=2, lineno=170)
LINE 263 : 2020-06-05 19:05:01,051 [DEBUG   ] stack ['$heap22.8', '$const24.9', '$row26.10']
LINE 262 : 2020-06-05 19:05:01,051 [DEBUG   ] dispatch pc=30, inst=BINARY_SUBSCR(arg=None, lineno=170)
LINE 263 : 2020-06-05 19:05:01,051 [DEBUG   ] stack ['$heap22.8', '$28build_tuple.11']
LINE 262 : 2020-06-05 19:05:01,051 [DEBUG   ] dispatch pc=32, inst=STORE_FAST(arg=6, lineno=170)
LINE 263 : 2020-06-05 19:05:01,051 [DEBUG   ] stack ['$30binary_subscr.12']
LINE 262 : 2020-06-05 19:05:01,051 [DEBUG   ] dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=171)
LINE 263 : 2020-06-05 19:05:01,051 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,051 [DEBUG   ] dispatch pc=36, inst=LOAD_CONST(arg=3, lineno=171)
LINE 263 : 2020-06-05 19:05:01,051 [DEBUG   ] stack ['$heap34.13']
LINE 262 : 2020-06-05 19:05:01,051 [DEBUG   ] dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=171)
LINE 263 : 2020-06-05 19:05:01,051 [DEBUG   ] stack ['$heap34.13', '$const36.14']
LINE 262 : 2020-06-05 19:05:01,051 [DEBUG   ] dispatch pc=40, inst=BUILD_TUPLE(arg=2, lineno=171)
LINE 263 : 2020-06-05 19:05:01,052 [DEBUG   ] stack ['$heap34.13', '$const36.14', '$row38.15']
LINE 262 : 2020-06-05 19:05:01,052 [DEBUG   ] dispatch pc=42, inst=BINARY_SUBSCR(arg=None, lineno=171)
LINE 263 : 2020-06-05 19:05:01,052 [DEBUG   ] stack ['$heap34.13', '$40build_tuple.16']
LINE 262 : 2020-06-05 19:05:01,052 [DEBUG   ] dispatch pc=44, inst=STORE_FAST(arg=7, lineno=171)
LINE 263 : 2020-06-05 19:05:01,052 [DEBUG   ] stack ['$42binary_subscr.17']
LINE 262 : 2020-06-05 19:05:01,052 [DEBUG   ] dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=173)
LINE 263 : 2020-06-05 19:05:01,053 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,053 [DEBUG   ] dispatch pc=48, inst=LOAD_FAST(arg=6, lineno=173)
LINE 263 : 2020-06-05 19:05:01,053 [DEBUG   ] stack ['$weight46.18']
LINE 262 : 2020-06-05 19:05:01,053 [DEBUG   ] dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=173)
LINE 263 : 2020-06-05 19:05:01,053 [DEBUG   ] stack ['$weight46.18', '$weights48.19']
LINE 262 : 2020-06-05 19:05:01,053 [DEBUG   ] dispatch pc=52, inst=BINARY_SUBSCR(arg=None, lineno=173)
LINE 263 : 2020-06-05 19:05:01,053 [DEBUG   ] stack ['$weight46.18', '$weights48.19', '$const50.20']
LINE 262 : 2020-06-05 19:05:01,053 [DEBUG   ] dispatch pc=54, inst=COMPARE_OP(arg=5, lineno=173)
LINE 263 : 2020-06-05 19:05:01,053 [DEBUG   ] stack ['$weight46.18', '$52binary_subscr.21']
LINE 262 : 2020-06-05 19:05:01,053 [DEBUG   ] dispatch pc=56, inst=POP_JUMP_IF_FALSE(arg=62, lineno=173)
LINE 263 : 2020-06-05 19:05:01,053 [DEBUG   ] stack ['$54compare_op.22']
LINE 135 : 2020-06-05 19:05:01,054 [DEBUG   ] end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,054 [DEBUG   ] pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=62 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,054 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,054 [DEBUG   ] dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=174)
LINE 263 : 2020-06-05 19:05:01,054 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,054 [DEBUG   ] dispatch pc=60, inst=RETURN_VALUE(arg=None, lineno=174)
LINE 263 : 2020-06-05 19:05:01,054 [DEBUG   ] stack ['$const58.0']
LINE 135 : 2020-06-05 19:05:01,054 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,054 [DEBUG   ] pending: deque([State(pc_initial=62 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,054 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,054 [DEBUG   ] dispatch pc=62, inst=SETUP_LOOP(arg=38, lineno=177)
LINE 263 : 2020-06-05 19:05:01,055 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,055 [DEBUG   ] dispatch pc=64, inst=LOAD_GLOBAL(arg=1, lineno=177)
LINE 263 : 2020-06-05 19:05:01,055 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,055 [DEBUG   ] dispatch pc=66, inst=LOAD_FAST(arg=5, lineno=177)
LINE 263 : 2020-06-05 19:05:01,055 [DEBUG   ] stack ['$64load_global.0']
LINE 262 : 2020-06-05 19:05:01,055 [DEBUG   ] dispatch pc=68, inst=LOAD_ATTR(arg=2, lineno=177)
LINE 263 : 2020-06-05 19:05:01,055 [DEBUG   ] stack ['$64load_global.0', '$indices66.1']
LINE 262 : 2020-06-05 19:05:01,055 [DEBUG   ] dispatch pc=70, inst=LOAD_CONST(arg=1, lineno=177)
LINE 263 : 2020-06-05 19:05:01,055 [DEBUG   ] stack ['$64load_global.0', '$68load_attr.2']
LINE 262 : 2020-06-05 19:05:01,055 [DEBUG   ] dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=177)
LINE 263 : 2020-06-05 19:05:01,055 [DEBUG   ] stack ['$64load_global.0', '$68load_attr.2', '$const70.3']
LINE 262 : 2020-06-05 19:05:01,056 [DEBUG   ] dispatch pc=74, inst=CALL_FUNCTION(arg=1, lineno=177)
LINE 263 : 2020-06-05 19:05:01,056 [DEBUG   ] stack ['$64load_global.0', '$72binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,056 [DEBUG   ] dispatch pc=76, inst=GET_ITER(arg=None, lineno=177)
LINE 263 : 2020-06-05 19:05:01,056 [DEBUG   ] stack ['$74call_function.5']
LINE 135 : 2020-06-05 19:05:01,056 [DEBUG   ] end state. edges=[Edge(pc=78, stack=('$76get_iter.6',), blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,056 [DEBUG   ] pending: deque([State(pc_initial=78 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,056 [DEBUG   ] stack: ['$phi78.0']
LINE 262 : 2020-06-05 19:05:01,056 [DEBUG   ] dispatch pc=78, inst=FOR_ITER(arg=20, lineno=177)
LINE 263 : 2020-06-05 19:05:01,056 [DEBUG   ] stack ['$phi78.0']
LINE 135 : 2020-06-05 19:05:01,056 [DEBUG   ] end state. edges=[Edge(pc=100, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=80, stack=('$phi78.0', '$78for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,057 [DEBUG   ] pending: deque([State(pc_initial=100 nstack_initial=0), State(pc_initial=80 nstack_initial=2)])
LINE 103 : 2020-06-05 19:05:01,057 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,057 [DEBUG   ] dispatch pc=100, inst=POP_BLOCK(arg=None, lineno=179)
LINE 263 : 2020-06-05 19:05:01,057 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,057 [DEBUG   ] end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,058 [DEBUG   ] pending: deque([State(pc_initial=80 nstack_initial=2), State(pc_initial=102 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,058 [DEBUG   ] stack: ['$phi80.0', '$phi80.1']
LINE 262 : 2020-06-05 19:05:01,058 [DEBUG   ] dispatch pc=80, inst=STORE_FAST(arg=8, lineno=177)
LINE 263 : 2020-06-05 19:05:01,058 [DEBUG   ] stack ['$phi80.0', '$phi80.1']
LINE 262 : 2020-06-05 19:05:01,058 [DEBUG   ] dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=178)
LINE 263 : 2020-06-05 19:05:01,058 [DEBUG   ] stack ['$phi80.0']
LINE 262 : 2020-06-05 19:05:01,059 [DEBUG   ] dispatch pc=84, inst=LOAD_FAST(arg=5, lineno=178)
LINE 263 : 2020-06-05 19:05:01,059 [DEBUG   ] stack ['$phi80.0', '$index82.2']
LINE 262 : 2020-06-05 19:05:01,059 [DEBUG   ] dispatch pc=86, inst=LOAD_FAST(arg=8, lineno=178)
LINE 263 : 2020-06-05 19:05:01,059 [DEBUG   ] stack ['$phi80.0', '$index82.2', '$indices84.3']
LINE 262 : 2020-06-05 19:05:01,059 [DEBUG   ] dispatch pc=88, inst=BINARY_SUBSCR(arg=None, lineno=178)
LINE 263 : 2020-06-05 19:05:01,060 [DEBUG   ] stack ['$phi80.0', '$index82.2', '$indices84.3', '$i86.4']
LINE 262 : 2020-06-05 19:05:01,060 [DEBUG   ] dispatch pc=90, inst=COMPARE_OP(arg=2, lineno=178)
LINE 263 : 2020-06-05 19:05:01,060 [DEBUG   ] stack ['$phi80.0', '$index82.2', '$88binary_subscr.5']
LINE 262 : 2020-06-05 19:05:01,060 [DEBUG   ] dispatch pc=92, inst=POP_JUMP_IF_FALSE(arg=78, lineno=178)
LINE 263 : 2020-06-05 19:05:01,060 [DEBUG   ] stack ['$phi80.0', '$90compare_op.6']
LINE 135 : 2020-06-05 19:05:01,061 [DEBUG   ] end state. edges=[Edge(pc=94, stack=('$phi80.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=78, stack=('$phi80.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,061 [DEBUG   ] pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=94 nstack_initial=1), State(pc_initial=78 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,061 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,061 [DEBUG   ] dispatch pc=102, inst=LOAD_FAST(arg=2, lineno=182)
LINE 263 : 2020-06-05 19:05:01,061 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,061 [DEBUG   ] dispatch pc=104, inst=LOAD_FAST(arg=6, lineno=182)
LINE 263 : 2020-06-05 19:05:01,061 [DEBUG   ] stack ['$weight102.0']
LINE 262 : 2020-06-05 19:05:01,061 [DEBUG   ] dispatch pc=106, inst=LOAD_CONST(arg=1, lineno=182)
LINE 263 : 2020-06-05 19:05:01,062 [DEBUG   ] stack ['$weight102.0', '$weights104.1']
LINE 262 : 2020-06-05 19:05:01,062 [DEBUG   ] dispatch pc=108, inst=STORE_SUBSCR(arg=None, lineno=182)
LINE 263 : 2020-06-05 19:05:01,062 [DEBUG   ] stack ['$weight102.0', '$weights104.1', '$const106.2']
LINE 262 : 2020-06-05 19:05:01,062 [DEBUG   ] dispatch pc=110, inst=LOAD_FAST(arg=3, lineno=183)
LINE 263 : 2020-06-05 19:05:01,062 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,062 [DEBUG   ] dispatch pc=112, inst=LOAD_FAST(arg=5, lineno=183)
LINE 263 : 2020-06-05 19:05:01,063 [DEBUG   ] stack ['$index110.3']
LINE 262 : 2020-06-05 19:05:01,063 [DEBUG   ] dispatch pc=114, inst=LOAD_CONST(arg=1, lineno=183)
LINE 263 : 2020-06-05 19:05:01,063 [DEBUG   ] stack ['$index110.3', '$indices112.4']
LINE 262 : 2020-06-05 19:05:01,063 [DEBUG   ] dispatch pc=116, inst=STORE_SUBSCR(arg=None, lineno=183)
LINE 263 : 2020-06-05 19:05:01,063 [DEBUG   ] stack ['$index110.3', '$indices112.4', '$const114.5']
LINE 262 : 2020-06-05 19:05:01,063 [DEBUG   ] dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=184)
LINE 263 : 2020-06-05 19:05:01,064 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,064 [DEBUG   ] dispatch pc=120, inst=LOAD_FAST(arg=7, lineno=184)
LINE 263 : 2020-06-05 19:05:01,064 [DEBUG   ] stack ['$flag118.6']
LINE 262 : 2020-06-05 19:05:01,064 [DEBUG   ] dispatch pc=122, inst=LOAD_CONST(arg=1, lineno=184)
LINE 263 : 2020-06-05 19:05:01,064 [DEBUG   ] stack ['$flag118.6', '$is_new120.7']
LINE 262 : 2020-06-05 19:05:01,065 [DEBUG   ] dispatch pc=124, inst=STORE_SUBSCR(arg=None, lineno=184)
LINE 263 : 2020-06-05 19:05:01,065 [DEBUG   ] stack ['$flag118.6', '$is_new120.7', '$const122.8']
LINE 262 : 2020-06-05 19:05:01,065 [DEBUG   ] dispatch pc=126, inst=LOAD_CONST(arg=1, lineno=187)
LINE 263 : 2020-06-05 19:05:01,065 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,065 [DEBUG   ] dispatch pc=128, inst=STORE_FAST(arg=8, lineno=187)
LINE 263 : 2020-06-05 19:05:01,065 [DEBUG   ] stack ['$const126.9']
LINE 135 : 2020-06-05 19:05:01,065 [DEBUG   ] end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,065 [DEBUG   ] pending: deque([State(pc_initial=94 nstack_initial=1), State(pc_initial=78 nstack_initial=1), State(pc_initial=130 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,065 [DEBUG   ] stack: ['$phi94.0']
LINE 262 : 2020-06-05 19:05:01,065 [DEBUG   ] dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=179)
LINE 263 : 2020-06-05 19:05:01,065 [DEBUG   ] stack ['$phi94.0']
LINE 262 : 2020-06-05 19:05:01,065 [DEBUG   ] dispatch pc=96, inst=RETURN_VALUE(arg=None, lineno=179)
LINE 263 : 2020-06-05 19:05:01,065 [DEBUG   ] stack ['$phi94.0', '$const94.1']
LINE 135 : 2020-06-05 19:05:01,066 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,066 [DEBUG   ] pending: deque([State(pc_initial=78 nstack_initial=1), State(pc_initial=130 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,066 [DEBUG   ] pending: deque([State(pc_initial=130 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,066 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,066 [DEBUG   ] dispatch pc=130, inst=SETUP_LOOP(arg=178, lineno=188)
LINE 263 : 2020-06-05 19:05:01,066 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,066 [DEBUG   ] end state. edges=[Edge(pc=132, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,066 [DEBUG   ] pending: deque([State(pc_initial=132 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,066 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,066 [DEBUG   ] dispatch pc=132, inst=LOAD_CONST(arg=3, lineno=189)
LINE 263 : 2020-06-05 19:05:01,066 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,066 [DEBUG   ] dispatch pc=134, inst=LOAD_FAST(arg=8, lineno=189)
LINE 263 : 2020-06-05 19:05:01,066 [DEBUG   ] stack ['$const132.0']
LINE 262 : 2020-06-05 19:05:01,066 [DEBUG   ] dispatch pc=136, inst=BINARY_MULTIPLY(arg=None, lineno=189)
LINE 263 : 2020-06-05 19:05:01,067 [DEBUG   ] stack ['$const132.0', '$i134.1']
LINE 262 : 2020-06-05 19:05:01,067 [DEBUG   ] dispatch pc=138, inst=LOAD_CONST(arg=2, lineno=189)
LINE 263 : 2020-06-05 19:05:01,067 [DEBUG   ] stack ['$136binary_multiply.2']
LINE 262 : 2020-06-05 19:05:01,067 [DEBUG   ] dispatch pc=140, inst=BINARY_ADD(arg=None, lineno=189)
LINE 263 : 2020-06-05 19:05:01,067 [DEBUG   ] stack ['$136binary_multiply.2', '$const138.3']
LINE 262 : 2020-06-05 19:05:01,067 [DEBUG   ] dispatch pc=142, inst=STORE_FAST(arg=9, lineno=189)
LINE 263 : 2020-06-05 19:05:01,067 [DEBUG   ] stack ['$140binary_add.4']
LINE 262 : 2020-06-05 19:05:01,067 [DEBUG   ] dispatch pc=144, inst=LOAD_FAST(arg=9, lineno=190)
LINE 263 : 2020-06-05 19:05:01,067 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,068 [DEBUG   ] dispatch pc=146, inst=LOAD_CONST(arg=2, lineno=190)
LINE 263 : 2020-06-05 19:05:01,068 [DEBUG   ] stack ['$ic1144.5']
LINE 262 : 2020-06-05 19:05:01,068 [DEBUG   ] dispatch pc=148, inst=BINARY_ADD(arg=None, lineno=190)
LINE 263 : 2020-06-05 19:05:01,068 [DEBUG   ] stack ['$ic1144.5', '$const146.6']
LINE 262 : 2020-06-05 19:05:01,068 [DEBUG   ] dispatch pc=150, inst=STORE_FAST(arg=10, lineno=190)
LINE 263 : 2020-06-05 19:05:01,068 [DEBUG   ] stack ['$148binary_add.7']
LINE 262 : 2020-06-05 19:05:01,068 [DEBUG   ] dispatch pc=152, inst=LOAD_FAST(arg=9, lineno=192)
LINE 263 : 2020-06-05 19:05:01,069 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,069 [DEBUG   ] dispatch pc=154, inst=LOAD_FAST(arg=0, lineno=192)
LINE 263 : 2020-06-05 19:05:01,069 [DEBUG   ] stack ['$ic1152.8']
LINE 262 : 2020-06-05 19:05:01,069 [DEBUG   ] dispatch pc=156, inst=LOAD_ATTR(arg=2, lineno=192)
LINE 263 : 2020-06-05 19:05:01,069 [DEBUG   ] stack ['$ic1152.8', '$heap154.9']
LINE 262 : 2020-06-05 19:05:01,069 [DEBUG   ] dispatch pc=158, inst=LOAD_CONST(arg=3, lineno=192)
LINE 263 : 2020-06-05 19:05:01,069 [DEBUG   ] stack ['$ic1152.8', '$156load_attr.10']
LINE 262 : 2020-06-05 19:05:01,069 [DEBUG   ] dispatch pc=160, inst=BINARY_SUBSCR(arg=None, lineno=192)
LINE 263 : 2020-06-05 19:05:01,069 [DEBUG   ] stack ['$ic1152.8', '$156load_attr.10', '$const158.11']
LINE 262 : 2020-06-05 19:05:01,069 [DEBUG   ] dispatch pc=162, inst=COMPARE_OP(arg=5, lineno=192)
LINE 263 : 2020-06-05 19:05:01,069 [DEBUG   ] stack ['$ic1152.8', '$160binary_subscr.12']
LINE 262 : 2020-06-05 19:05:01,069 [DEBUG   ] dispatch pc=164, inst=POP_JUMP_IF_FALSE(arg=170, lineno=192)
LINE 263 : 2020-06-05 19:05:01,069 [DEBUG   ] stack ['$162compare_op.13']
LINE 135 : 2020-06-05 19:05:01,070 [DEBUG   ] end state. edges=[Edge(pc=166, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=170, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,070 [DEBUG   ] pending: deque([State(pc_initial=166 nstack_initial=0), State(pc_initial=170 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,070 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,070 [DEBUG   ] dispatch pc=166, inst=BREAK_LOOP(arg=None, lineno=193)
LINE 263 : 2020-06-05 19:05:01,070 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,070 [DEBUG   ] end state. edges=[Edge(pc=310, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,070 [DEBUG   ] pending: deque([State(pc_initial=170 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,070 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,070 [DEBUG   ] dispatch pc=170, inst=LOAD_FAST(arg=10, lineno=194)
LINE 263 : 2020-06-05 19:05:01,070 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,070 [DEBUG   ] dispatch pc=172, inst=LOAD_FAST(arg=0, lineno=194)
LINE 263 : 2020-06-05 19:05:01,070 [DEBUG   ] stack ['$ic2170.0']
LINE 262 : 2020-06-05 19:05:01,070 [DEBUG   ] dispatch pc=174, inst=LOAD_ATTR(arg=2, lineno=194)
LINE 263 : 2020-06-05 19:05:01,071 [DEBUG   ] stack ['$ic2170.0', '$heap172.1']
LINE 262 : 2020-06-05 19:05:01,071 [DEBUG   ] dispatch pc=176, inst=LOAD_CONST(arg=3, lineno=194)
LINE 263 : 2020-06-05 19:05:01,071 [DEBUG   ] stack ['$ic2170.0', '$174load_attr.2']
LINE 262 : 2020-06-05 19:05:01,071 [DEBUG   ] dispatch pc=178, inst=BINARY_SUBSCR(arg=None, lineno=194)
LINE 263 : 2020-06-05 19:05:01,071 [DEBUG   ] stack ['$ic2170.0', '$174load_attr.2', '$const176.3']
LINE 262 : 2020-06-05 19:05:01,071 [DEBUG   ] dispatch pc=180, inst=COMPARE_OP(arg=5, lineno=194)
LINE 263 : 2020-06-05 19:05:01,071 [DEBUG   ] stack ['$ic2170.0', '$178binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,071 [DEBUG   ] dispatch pc=182, inst=POP_JUMP_IF_FALSE(arg=206, lineno=194)
LINE 263 : 2020-06-05 19:05:01,071 [DEBUG   ] stack ['$180compare_op.5']
LINE 135 : 2020-06-05 19:05:01,071 [DEBUG   ] end state. edges=[Edge(pc=184, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=206, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,071 [DEBUG   ] pending: deque([State(pc_initial=310 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,071 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,072 [DEBUG   ] dispatch pc=310, inst=LOAD_FAST(arg=2, lineno=216)
LINE 263 : 2020-06-05 19:05:01,072 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,072 [DEBUG   ] dispatch pc=312, inst=LOAD_FAST(arg=6, lineno=216)
LINE 263 : 2020-06-05 19:05:01,072 [DEBUG   ] stack ['$weight310.0']
LINE 262 : 2020-06-05 19:05:01,072 [DEBUG   ] dispatch pc=314, inst=LOAD_FAST(arg=8, lineno=216)
LINE 263 : 2020-06-05 19:05:01,072 [DEBUG   ] stack ['$weight310.0', '$weights312.1']
LINE 262 : 2020-06-05 19:05:01,072 [DEBUG   ] dispatch pc=316, inst=STORE_SUBSCR(arg=None, lineno=216)
LINE 263 : 2020-06-05 19:05:01,072 [DEBUG   ] stack ['$weight310.0', '$weights312.1', '$i314.2']
LINE 262 : 2020-06-05 19:05:01,072 [DEBUG   ] dispatch pc=318, inst=LOAD_FAST(arg=3, lineno=217)
LINE 263 : 2020-06-05 19:05:01,072 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,072 [DEBUG   ] dispatch pc=320, inst=LOAD_FAST(arg=5, lineno=217)
LINE 263 : 2020-06-05 19:05:01,072 [DEBUG   ] stack ['$index318.3']
LINE 262 : 2020-06-05 19:05:01,073 [DEBUG   ] dispatch pc=322, inst=LOAD_FAST(arg=8, lineno=217)
LINE 263 : 2020-06-05 19:05:01,073 [DEBUG   ] stack ['$index318.3', '$indices320.4']
LINE 262 : 2020-06-05 19:05:01,073 [DEBUG   ] dispatch pc=324, inst=STORE_SUBSCR(arg=None, lineno=217)
LINE 263 : 2020-06-05 19:05:01,073 [DEBUG   ] stack ['$index318.3', '$indices320.4', '$i322.5']
LINE 262 : 2020-06-05 19:05:01,073 [DEBUG   ] dispatch pc=326, inst=LOAD_FAST(arg=4, lineno=218)
LINE 263 : 2020-06-05 19:05:01,073 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,073 [DEBUG   ] dispatch pc=328, inst=LOAD_FAST(arg=7, lineno=218)
LINE 263 : 2020-06-05 19:05:01,073 [DEBUG   ] stack ['$flag326.6']
LINE 262 : 2020-06-05 19:05:01,073 [DEBUG   ] dispatch pc=330, inst=LOAD_FAST(arg=8, lineno=218)
LINE 263 : 2020-06-05 19:05:01,073 [DEBUG   ] stack ['$flag326.6', '$is_new328.7']
LINE 262 : 2020-06-05 19:05:01,073 [DEBUG   ] dispatch pc=332, inst=STORE_SUBSCR(arg=None, lineno=218)
LINE 263 : 2020-06-05 19:05:01,073 [DEBUG   ] stack ['$flag326.6', '$is_new328.7', '$i330.8']
LINE 262 : 2020-06-05 19:05:01,073 [DEBUG   ] dispatch pc=334, inst=LOAD_CONST(arg=2, lineno=220)
LINE 263 : 2020-06-05 19:05:01,073 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,074 [DEBUG   ] dispatch pc=336, inst=RETURN_VALUE(arg=None, lineno=220)
LINE 263 : 2020-06-05 19:05:01,074 [DEBUG   ] stack ['$const334.9']
LINE 135 : 2020-06-05 19:05:01,074 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,074 [DEBUG   ] pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,074 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,074 [DEBUG   ] dispatch pc=184, inst=LOAD_FAST(arg=6, lineno=195)
LINE 263 : 2020-06-05 19:05:01,074 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,074 [DEBUG   ] dispatch pc=186, inst=LOAD_FAST(arg=9, lineno=195)
LINE 263 : 2020-06-05 19:05:01,074 [DEBUG   ] stack ['$weights184.0']
LINE 262 : 2020-06-05 19:05:01,074 [DEBUG   ] dispatch pc=188, inst=BINARY_SUBSCR(arg=None, lineno=195)
LINE 263 : 2020-06-05 19:05:01,074 [DEBUG   ] stack ['$weights184.0', '$ic1186.1']
LINE 262 : 2020-06-05 19:05:01,075 [DEBUG   ] dispatch pc=190, inst=LOAD_FAST(arg=2, lineno=195)
LINE 263 : 2020-06-05 19:05:01,075 [DEBUG   ] stack ['$188binary_subscr.2']
LINE 262 : 2020-06-05 19:05:01,075 [DEBUG   ] dispatch pc=192, inst=COMPARE_OP(arg=4, lineno=195)
LINE 263 : 2020-06-05 19:05:01,075 [DEBUG   ] stack ['$188binary_subscr.2', '$weight190.3']
LINE 262 : 2020-06-05 19:05:01,075 [DEBUG   ] dispatch pc=194, inst=POP_JUMP_IF_FALSE(arg=202, lineno=195)
LINE 263 : 2020-06-05 19:05:01,075 [DEBUG   ] stack ['$192compare_op.4']
LINE 135 : 2020-06-05 19:05:01,075 [DEBUG   ] end state. edges=[Edge(pc=196, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=202, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,075 [DEBUG   ] pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=196 nstack_initial=0), State(pc_initial=202 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,075 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,075 [DEBUG   ] dispatch pc=206, inst=LOAD_FAST(arg=6, lineno=199)
LINE 263 : 2020-06-05 19:05:01,076 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,076 [DEBUG   ] dispatch pc=208, inst=LOAD_FAST(arg=9, lineno=199)
LINE 263 : 2020-06-05 19:05:01,076 [DEBUG   ] stack ['$weights206.0']
LINE 262 : 2020-06-05 19:05:01,076 [DEBUG   ] dispatch pc=210, inst=BINARY_SUBSCR(arg=None, lineno=199)
LINE 263 : 2020-06-05 19:05:01,077 [DEBUG   ] stack ['$weights206.0', '$ic1208.1']
LINE 262 : 2020-06-05 19:05:01,077 [DEBUG   ] dispatch pc=212, inst=LOAD_FAST(arg=6, lineno=199)
LINE 263 : 2020-06-05 19:05:01,077 [DEBUG   ] stack ['$210binary_subscr.2']
LINE 262 : 2020-06-05 19:05:01,077 [DEBUG   ] dispatch pc=214, inst=LOAD_FAST(arg=10, lineno=199)
LINE 263 : 2020-06-05 19:05:01,077 [DEBUG   ] stack ['$210binary_subscr.2', '$weights212.3']
LINE 262 : 2020-06-05 19:05:01,077 [DEBUG   ] dispatch pc=216, inst=BINARY_SUBSCR(arg=None, lineno=199)
LINE 263 : 2020-06-05 19:05:01,078 [DEBUG   ] stack ['$210binary_subscr.2', '$weights212.3', '$ic2214.4']
LINE 262 : 2020-06-05 19:05:01,078 [DEBUG   ] dispatch pc=218, inst=COMPARE_OP(arg=5, lineno=199)
LINE 263 : 2020-06-05 19:05:01,078 [DEBUG   ] stack ['$210binary_subscr.2', '$216binary_subscr.5']
LINE 262 : 2020-06-05 19:05:01,079 [DEBUG   ] dispatch pc=220, inst=POP_JUMP_IF_FALSE(arg=244, lineno=199)
LINE 263 : 2020-06-05 19:05:01,079 [DEBUG   ] stack ['$218compare_op.6']
LINE 135 : 2020-06-05 19:05:01,079 [DEBUG   ] end state. edges=[Edge(pc=222, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=244, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,079 [DEBUG   ] pending: deque([State(pc_initial=196 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=222 nstack_initial=0), State(pc_initial=244 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,079 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,079 [DEBUG   ] dispatch pc=196, inst=LOAD_FAST(arg=9, lineno=196)
LINE 263 : 2020-06-05 19:05:01,079 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,080 [DEBUG   ] dispatch pc=198, inst=STORE_FAST(arg=11, lineno=196)
LINE 263 : 2020-06-05 19:05:01,080 [DEBUG   ] stack ['$ic1196.0']
LINE 262 : 2020-06-05 19:05:01,080 [DEBUG   ] dispatch pc=200, inst=JUMP_FORWARD(arg=2, lineno=196)
LINE 263 : 2020-06-05 19:05:01,080 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,080 [DEBUG   ] end state. edges=[Edge(pc=204, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,080 [DEBUG   ] pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=222 nstack_initial=0), State(pc_initial=244 nstack_initial=0), State(pc_initial=204 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,080 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,080 [DEBUG   ] dispatch pc=202, inst=BREAK_LOOP(arg=None, lineno=198)
LINE 263 : 2020-06-05 19:05:01,080 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,081 [DEBUG   ] end state. edges=[Edge(pc=310, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,081 [DEBUG   ] pending: deque([State(pc_initial=222 nstack_initial=0), State(pc_initial=244 nstack_initial=0), State(pc_initial=204 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,081 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,081 [DEBUG   ] dispatch pc=222, inst=LOAD_FAST(arg=2, lineno=200)
LINE 263 : 2020-06-05 19:05:01,082 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,082 [DEBUG   ] dispatch pc=224, inst=LOAD_FAST(arg=6, lineno=200)
LINE 263 : 2020-06-05 19:05:01,082 [DEBUG   ] stack ['$weight222.0']
LINE 262 : 2020-06-05 19:05:01,082 [DEBUG   ] dispatch pc=226, inst=LOAD_FAST(arg=9, lineno=200)
LINE 263 : 2020-06-05 19:05:01,082 [DEBUG   ] stack ['$weight222.0', '$weights224.1']
LINE 262 : 2020-06-05 19:05:01,082 [DEBUG   ] dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=200)
LINE 263 : 2020-06-05 19:05:01,082 [DEBUG   ] stack ['$weight222.0', '$weights224.1', '$ic1226.2']
LINE 262 : 2020-06-05 19:05:01,082 [DEBUG   ] dispatch pc=230, inst=COMPARE_OP(arg=0, lineno=200)
LINE 263 : 2020-06-05 19:05:01,082 [DEBUG   ] stack ['$weight222.0', '$228binary_subscr.3']
LINE 262 : 2020-06-05 19:05:01,082 [DEBUG   ] dispatch pc=232, inst=POP_JUMP_IF_FALSE(arg=240, lineno=200)
LINE 263 : 2020-06-05 19:05:01,082 [DEBUG   ] stack ['$230compare_op.4']
LINE 135 : 2020-06-05 19:05:01,083 [DEBUG   ] end state. edges=[Edge(pc=234, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=240, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,083 [DEBUG   ] pending: deque([State(pc_initial=244 nstack_initial=0), State(pc_initial=204 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=240 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,083 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,083 [DEBUG   ] dispatch pc=244, inst=LOAD_FAST(arg=2, lineno=205)
LINE 263 : 2020-06-05 19:05:01,083 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,083 [DEBUG   ] dispatch pc=246, inst=LOAD_FAST(arg=6, lineno=205)
LINE 263 : 2020-06-05 19:05:01,083 [DEBUG   ] stack ['$weight244.0']
LINE 262 : 2020-06-05 19:05:01,083 [DEBUG   ] dispatch pc=248, inst=LOAD_FAST(arg=10, lineno=205)
LINE 263 : 2020-06-05 19:05:01,083 [DEBUG   ] stack ['$weight244.0', '$weights246.1']
LINE 262 : 2020-06-05 19:05:01,083 [DEBUG   ] dispatch pc=250, inst=BINARY_SUBSCR(arg=None, lineno=205)
LINE 263 : 2020-06-05 19:05:01,083 [DEBUG   ] stack ['$weight244.0', '$weights246.1', '$ic2248.2']
LINE 262 : 2020-06-05 19:05:01,083 [DEBUG   ] dispatch pc=252, inst=COMPARE_OP(arg=0, lineno=205)
LINE 263 : 2020-06-05 19:05:01,084 [DEBUG   ] stack ['$weight244.0', '$250binary_subscr.3']
LINE 262 : 2020-06-05 19:05:01,084 [DEBUG   ] dispatch pc=254, inst=POP_JUMP_IF_FALSE(arg=264, lineno=205)
LINE 263 : 2020-06-05 19:05:01,084 [DEBUG   ] stack ['$252compare_op.4']
LINE 135 : 2020-06-05 19:05:01,084 [DEBUG   ] end state. edges=[Edge(pc=258, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=264, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,084 [DEBUG   ] pending: deque([State(pc_initial=204 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=240 nstack_initial=0), State(pc_initial=258 nstack_initial=0), State(pc_initial=264 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,084 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,084 [DEBUG   ] dispatch pc=204, inst=JUMP_FORWARD(arg=60, lineno=198)
LINE 263 : 2020-06-05 19:05:01,084 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,084 [DEBUG   ] end state. edges=[Edge(pc=266, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,084 [DEBUG   ] pending: deque([State(pc_initial=310 nstack_initial=0), State(pc_initial=234 nstack_initial=0), State(pc_initial=240 nstack_initial=0), State(pc_initial=258 nstack_initial=0), State(pc_initial=264 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,084 [DEBUG   ] pending: deque([State(pc_initial=234 nstack_initial=0), State(pc_initial=240 nstack_initial=0), State(pc_initial=258 nstack_initial=0), State(pc_initial=264 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,084 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,084 [DEBUG   ] dispatch pc=234, inst=LOAD_FAST(arg=9, lineno=201)
LINE 263 : 2020-06-05 19:05:01,084 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,084 [DEBUG   ] dispatch pc=236, inst=STORE_FAST(arg=11, lineno=201)
LINE 263 : 2020-06-05 19:05:01,085 [DEBUG   ] stack ['$ic1234.0']
LINE 262 : 2020-06-05 19:05:01,085 [DEBUG   ] dispatch pc=238, inst=JUMP_FORWARD(arg=2, lineno=201)
LINE 263 : 2020-06-05 19:05:01,085 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,085 [DEBUG   ] end state. edges=[Edge(pc=242, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,085 [DEBUG   ] pending: deque([State(pc_initial=240 nstack_initial=0), State(pc_initial=258 nstack_initial=0), State(pc_initial=264 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=242 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,085 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,085 [DEBUG   ] dispatch pc=240, inst=BREAK_LOOP(arg=None, lineno=203)
LINE 263 : 2020-06-05 19:05:01,085 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,085 [DEBUG   ] end state. edges=[Edge(pc=310, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,085 [DEBUG   ] pending: deque([State(pc_initial=258 nstack_initial=0), State(pc_initial=264 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=242 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,085 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,085 [DEBUG   ] dispatch pc=258, inst=LOAD_FAST(arg=10, lineno=206)
LINE 263 : 2020-06-05 19:05:01,085 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,085 [DEBUG   ] dispatch pc=260, inst=STORE_FAST(arg=11, lineno=206)
LINE 263 : 2020-06-05 19:05:01,085 [DEBUG   ] stack ['$ic2258.0']
LINE 262 : 2020-06-05 19:05:01,085 [DEBUG   ] dispatch pc=262, inst=JUMP_FORWARD(arg=2, lineno=206)
LINE 263 : 2020-06-05 19:05:01,085 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,085 [DEBUG   ] end state. edges=[Edge(pc=266, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,086 [DEBUG   ] pending: deque([State(pc_initial=264 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=242 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,086 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,086 [DEBUG   ] dispatch pc=264, inst=BREAK_LOOP(arg=None, lineno=208)
LINE 263 : 2020-06-05 19:05:01,086 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,086 [DEBUG   ] end state. edges=[Edge(pc=310, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,086 [DEBUG   ] pending: deque([State(pc_initial=266 nstack_initial=0), State(pc_initial=242 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=310 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,086 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,086 [DEBUG   ] dispatch pc=266, inst=LOAD_FAST(arg=6, lineno=210)
LINE 263 : 2020-06-05 19:05:01,086 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,086 [DEBUG   ] dispatch pc=268, inst=LOAD_FAST(arg=11, lineno=210)
LINE 263 : 2020-06-05 19:05:01,086 [DEBUG   ] stack ['$weights266.0']
LINE 262 : 2020-06-05 19:05:01,086 [DEBUG   ] dispatch pc=270, inst=BINARY_SUBSCR(arg=None, lineno=210)
LINE 263 : 2020-06-05 19:05:01,086 [DEBUG   ] stack ['$weights266.0', '$i_swap268.1']
LINE 262 : 2020-06-05 19:05:01,086 [DEBUG   ] dispatch pc=272, inst=LOAD_FAST(arg=6, lineno=210)
LINE 263 : 2020-06-05 19:05:01,087 [DEBUG   ] stack ['$270binary_subscr.2']
LINE 262 : 2020-06-05 19:05:01,087 [DEBUG   ] dispatch pc=274, inst=LOAD_FAST(arg=8, lineno=210)
LINE 263 : 2020-06-05 19:05:01,087 [DEBUG   ] stack ['$270binary_subscr.2', '$weights272.3']
LINE 262 : 2020-06-05 19:05:01,087 [DEBUG   ] dispatch pc=276, inst=STORE_SUBSCR(arg=None, lineno=210)
LINE 263 : 2020-06-05 19:05:01,087 [DEBUG   ] stack ['$270binary_subscr.2', '$weights272.3', '$i274.4']
LINE 262 : 2020-06-05 19:05:01,087 [DEBUG   ] dispatch pc=278, inst=LOAD_FAST(arg=5, lineno=211)
LINE 263 : 2020-06-05 19:05:01,087 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,087 [DEBUG   ] dispatch pc=280, inst=LOAD_FAST(arg=11, lineno=211)
LINE 263 : 2020-06-05 19:05:01,087 [DEBUG   ] stack ['$indices278.5']
LINE 262 : 2020-06-05 19:05:01,087 [DEBUG   ] dispatch pc=282, inst=BINARY_SUBSCR(arg=None, lineno=211)
LINE 263 : 2020-06-05 19:05:01,087 [DEBUG   ] stack ['$indices278.5', '$i_swap280.6']
LINE 262 : 2020-06-05 19:05:01,087 [DEBUG   ] dispatch pc=284, inst=LOAD_FAST(arg=5, lineno=211)
LINE 263 : 2020-06-05 19:05:01,087 [DEBUG   ] stack ['$282binary_subscr.7']
LINE 262 : 2020-06-05 19:05:01,087 [DEBUG   ] dispatch pc=286, inst=LOAD_FAST(arg=8, lineno=211)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack ['$282binary_subscr.7', '$indices284.8']
LINE 262 : 2020-06-05 19:05:01,088 [DEBUG   ] dispatch pc=288, inst=STORE_SUBSCR(arg=None, lineno=211)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack ['$282binary_subscr.7', '$indices284.8', '$i286.9']
LINE 262 : 2020-06-05 19:05:01,088 [DEBUG   ] dispatch pc=290, inst=LOAD_FAST(arg=7, lineno=212)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,088 [DEBUG   ] dispatch pc=292, inst=LOAD_FAST(arg=11, lineno=212)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack ['$is_new290.10']
LINE 262 : 2020-06-05 19:05:01,088 [DEBUG   ] dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=212)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack ['$is_new290.10', '$i_swap292.11']
LINE 262 : 2020-06-05 19:05:01,088 [DEBUG   ] dispatch pc=296, inst=LOAD_FAST(arg=7, lineno=212)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack ['$294binary_subscr.12']
LINE 262 : 2020-06-05 19:05:01,088 [DEBUG   ] dispatch pc=298, inst=LOAD_FAST(arg=8, lineno=212)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack ['$294binary_subscr.12', '$is_new296.13']
LINE 262 : 2020-06-05 19:05:01,088 [DEBUG   ] dispatch pc=300, inst=STORE_SUBSCR(arg=None, lineno=212)
LINE 263 : 2020-06-05 19:05:01,088 [DEBUG   ] stack ['$294binary_subscr.12', '$is_new296.13', '$i298.14']
LINE 262 : 2020-06-05 19:05:01,089 [DEBUG   ] dispatch pc=302, inst=LOAD_FAST(arg=11, lineno=214)
LINE 263 : 2020-06-05 19:05:01,089 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,089 [DEBUG   ] dispatch pc=304, inst=STORE_FAST(arg=8, lineno=214)
LINE 263 : 2020-06-05 19:05:01,089 [DEBUG   ] stack ['$i_swap302.15']
LINE 262 : 2020-06-05 19:05:01,089 [DEBUG   ] dispatch pc=306, inst=JUMP_ABSOLUTE(arg=132, lineno=214)
LINE 263 : 2020-06-05 19:05:01,089 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,089 [DEBUG   ] end state. edges=[Edge(pc=132, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,089 [DEBUG   ] pending: deque([State(pc_initial=242 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=132 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,089 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,089 [DEBUG   ] dispatch pc=242, inst=JUMP_FORWARD(arg=22, lineno=203)
LINE 263 : 2020-06-05 19:05:01,089 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,089 [DEBUG   ] end state. edges=[Edge(pc=266, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,089 [DEBUG   ] pending: deque([State(pc_initial=310 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,089 [DEBUG   ] pending: deque([State(pc_initial=266 nstack_initial=0), State(pc_initial=310 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,089 [DEBUG   ] pending: deque([State(pc_initial=310 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,090 [DEBUG   ] pending: deque([State(pc_initial=132 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,090 [DEBUG   ] pending: deque([State(pc_initial=266 nstack_initial=0)])
LINE 163 : 2020-06-05 19:05:01,091 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:01,091 [DEBUG   ] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=78 nstack_initial=1): {'$phi78.0'},
             State(pc_initial=80 nstack_initial=2): {'$phi80.1'},
             State(pc_initial=94 nstack_initial=1): set(),
             State(pc_initial=100 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=132 nstack_initial=0): set(),
             State(pc_initial=166 nstack_initial=0): set(),
             State(pc_initial=170 nstack_initial=0): set(),
             State(pc_initial=184 nstack_initial=0): set(),
             State(pc_initial=196 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=204 nstack_initial=0): set(),
             State(pc_initial=206 nstack_initial=0): set(),
             State(pc_initial=222 nstack_initial=0): set(),
             State(pc_initial=234 nstack_initial=0): set(),
             State(pc_initial=240 nstack_initial=0): set(),
             State(pc_initial=242 nstack_initial=0): set(),
             State(pc_initial=244 nstack_initial=0): set(),
             State(pc_initial=258 nstack_initial=0): set(),
             State(pc_initial=264 nstack_initial=0): set(),
             State(pc_initial=266 nstack_initial=0): set(),
             State(pc_initial=310 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:01,091 [DEBUG   ] defmap: {'$phi78.0': State(pc_initial=62 nstack_initial=0),
 '$phi80.1': State(pc_initial=78 nstack_initial=1)}
LINE 190 : 2020-06-05 19:05:01,091 [DEBUG   ] phismap: defaultdict(<class 'set'>,
            {'$phi78.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=2))},
             '$phi80.0': {('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi80.1': {('$78for_iter.2',
                           State(pc_initial=78 nstack_initial=1))},
             '$phi94.0': {('$phi80.0', State(pc_initial=80 nstack_initial=2))}})
LINE 211 : 2020-06-05 19:05:01,091 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi78.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0)),
                          ('$phi78.0', State(pc_initial=78 nstack_initial=1))},
             '$phi80.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))},
             '$phi80.1': {('$78for_iter.2',
                           State(pc_initial=78 nstack_initial=1))},
             '$phi94.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))}})
LINE 211 : 2020-06-05 19:05:01,092 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi78.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))},
             '$phi80.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))},
             '$phi80.1': {('$78for_iter.2',
                           State(pc_initial=78 nstack_initial=1))},
             '$phi94.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))}})
LINE 211 : 2020-06-05 19:05:01,092 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi78.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))},
             '$phi80.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))},
             '$phi80.1': {('$78for_iter.2',
                           State(pc_initial=78 nstack_initial=1))},
             '$phi94.0': {('$76get_iter.6',
                           State(pc_initial=62 nstack_initial=0))}})
LINE 220 : 2020-06-05 19:05:01,092 [DEBUG   ] keep phismap: {'$phi78.0': {('$76get_iter.6', State(pc_initial=62 nstack_initial=0))},
 '$phi80.1': {('$78for_iter.2', State(pc_initial=78 nstack_initial=1))}}
LINE 226 : 2020-06-05 19:05:01,092 [DEBUG   ] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=62 nstack_initial=0): {'$phi78.0': '$76get_iter.6'},
             State(pc_initial=78 nstack_initial=1): {'$phi80.1': '$78for_iter.2'}})
LINE 236 : 2020-06-05 19:05:01,092 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:01,093 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$row4.1'}), (6, {'func': '$2load_global.0', 'args': ['$row4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$heap10.3'}), (12, {'res': '$const12.4'}), (14, {'res': '$row14.5'}), (16, {'items': ['$const12.4', '$row14.5'], 'res': '$16build_tuple.6'}), (18, {'index': '$16build_tuple.6', 'target': '$heap10.3', 'res': '$18binary_subscr.7'}), (20, {'value': '$18binary_subscr.7'}), (22, {'res': '$heap22.8'}), (24, {'res': '$const24.9'}), (26, {'res': '$row26.10'}), (28, {'items': ['$const24.9', '$row26.10'], 'res': '$28build_tuple.11'}), (30, {'index': '$28build_tuple.11', 'target': '$heap22.8', 'res': '$30binary_subscr.12'}), (32, {'value': '$30binary_subscr.12'}), (34, {'res': '$heap34.13'}), (36, {'res': '$const36.14'}), (38, {'res': '$row38.15'}), (40, {'items': ['$const36.14', '$row38.15'], 'res': '$40build_tuple.16'}), (42, {'index': '$40build_tuple.16', 'target': '$heap34.13', 'res': '$42binary_subscr.17'}), (44, {'value': '$42binary_subscr.17'}), (46, {'res': '$weight46.18'}), (48, {'res': '$weights48.19'}), (50, {'res': '$const50.20'}), (52, {'index': '$const50.20', 'target': '$weights48.19', 'res': '$52binary_subscr.21'}), (54, {'lhs': '$weight46.18', 'rhs': '$52binary_subscr.21', 'res': '$54compare_op.22'}), (56, {'pred': '$54compare_op.22'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 62: ()})
LINE 147 : 2020-06-05 19:05:01,093 [DEBUG   ] block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'retval': '$const58.0', 'castval': '$60return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:01,093 [DEBUG   ] block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_global.0'}), (66, {'res': '$indices66.1'}), (68, {'item': '$indices66.1', 'res': '$68load_attr.2'}), (70, {'res': '$const70.3'}), (72, {'index': '$const70.3', 'target': '$68load_attr.2', 'res': '$72binary_subscr.4'}), (74, {'func': '$64load_global.0', 'args': ['$72binary_subscr.4'], 'res': '$74call_function.5'}), (76, {'value': '$74call_function.5', 'res': '$76get_iter.6'})), outgoing_phis={'$phi78.0': '$76get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={78: ('$76get_iter.6',)})
LINE 147 : 2020-06-05 19:05:01,093 [DEBUG   ] block_infos State(pc_initial=78 nstack_initial=1):
AdaptBlockInfo(insts=((78, {'iterator': '$phi78.0', 'pair': '$78for_iter.1', 'indval': '$78for_iter.2', 'pred': '$78for_iter.3'}),), outgoing_phis={'$phi80.1': '$78for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={100: (), 80: ('$phi78.0', '$78for_iter.2')})
LINE 147 : 2020-06-05 19:05:01,093 [DEBUG   ] block_infos State(pc_initial=80 nstack_initial=2):
AdaptBlockInfo(insts=((80, {'value': '$phi80.1'}), (82, {'res': '$index82.2'}), (84, {'res': '$indices84.3'}), (86, {'res': '$i86.4'}), (88, {'index': '$i86.4', 'target': '$indices84.3', 'res': '$88binary_subscr.5'}), (90, {'lhs': '$index82.2', 'rhs': '$88binary_subscr.5', 'res': '$90compare_op.6'}), (92, {'pred': '$90compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={94: ('$phi80.0',), 78: ('$phi80.0',)})
LINE 147 : 2020-06-05 19:05:01,093 [DEBUG   ] block_infos State(pc_initial=94 nstack_initial=1):
AdaptBlockInfo(insts=((94, {'res': '$const94.1'}), (96, {'retval': '$const94.1', 'castval': '$96return_value.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=100 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 102, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={102: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$weight102.0'}), (104, {'res': '$weights104.1'}), (106, {'res': '$const106.2'}), (108, {'target': '$weights104.1', 'index': '$const106.2', 'value': '$weight102.0'}), (110, {'res': '$index110.3'}), (112, {'res': '$indices112.4'}), (114, {'res': '$const114.5'}), (116, {'target': '$indices112.4', 'index': '$const114.5', 'value': '$index110.3'}), (118, {'res': '$flag118.6'}), (120, {'res': '$is_new120.7'}), (122, {'res': '$const122.8'}), (124, {'target': '$is_new120.7', 'index': '$const122.8', 'value': '$flag118.6'}), (126, {'res': '$const126.9'}), (128, {'value': '$const126.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={132: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=132 nstack_initial=0):
AdaptBlockInfo(insts=((132, {'res': '$const132.0'}), (134, {'res': '$i134.1'}), (136, {'lhs': '$const132.0', 'rhs': '$i134.1', 'res': '$136binary_multiply.2'}), (138, {'res': '$const138.3'}), (140, {'lhs': '$136binary_multiply.2', 'rhs': '$const138.3', 'res': '$140binary_add.4'}), (142, {'value': '$140binary_add.4'}), (144, {'res': '$ic1144.5'}), (146, {'res': '$const146.6'}), (148, {'lhs': '$ic1144.5', 'rhs': '$const146.6', 'res': '$148binary_add.7'}), (150, {'value': '$148binary_add.7'}), (152, {'res': '$ic1152.8'}), (154, {'res': '$heap154.9'}), (156, {'item': '$heap154.9', 'res': '$156load_attr.10'}), (158, {'res': '$const158.11'}), (160, {'index': '$const158.11', 'target': '$156load_attr.10', 'res': '$160binary_subscr.12'}), (162, {'lhs': '$ic1152.8', 'rhs': '$160binary_subscr.12', 'res': '$162compare_op.13'}), (164, {'pred': '$162compare_op.13'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={166: (), 170: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=166 nstack_initial=0):
AdaptBlockInfo(insts=((166, {'end': 310}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={310: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=170 nstack_initial=0):
AdaptBlockInfo(insts=((170, {'res': '$ic2170.0'}), (172, {'res': '$heap172.1'}), (174, {'item': '$heap172.1', 'res': '$174load_attr.2'}), (176, {'res': '$const176.3'}), (178, {'index': '$const176.3', 'target': '$174load_attr.2', 'res': '$178binary_subscr.4'}), (180, {'lhs': '$ic2170.0', 'rhs': '$178binary_subscr.4', 'res': '$180compare_op.5'}), (182, {'pred': '$180compare_op.5'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={184: (), 206: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=184 nstack_initial=0):
AdaptBlockInfo(insts=((184, {'res': '$weights184.0'}), (186, {'res': '$ic1186.1'}), (188, {'index': '$ic1186.1', 'target': '$weights184.0', 'res': '$188binary_subscr.2'}), (190, {'res': '$weight190.3'}), (192, {'lhs': '$188binary_subscr.2', 'rhs': '$weight190.3', 'res': '$192compare_op.4'}), (194, {'pred': '$192compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={196: (), 202: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=196 nstack_initial=0):
AdaptBlockInfo(insts=((196, {'res': '$ic1196.0'}), (198, {'value': '$ic1196.0'}), (200, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={204: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'end': 310}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={310: ()})
LINE 147 : 2020-06-05 19:05:01,094 [DEBUG   ] block_infos State(pc_initial=204 nstack_initial=0):
AdaptBlockInfo(insts=((204, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={266: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=206 nstack_initial=0):
AdaptBlockInfo(insts=((206, {'res': '$weights206.0'}), (208, {'res': '$ic1208.1'}), (210, {'index': '$ic1208.1', 'target': '$weights206.0', 'res': '$210binary_subscr.2'}), (212, {'res': '$weights212.3'}), (214, {'res': '$ic2214.4'}), (216, {'index': '$ic2214.4', 'target': '$weights212.3', 'res': '$216binary_subscr.5'}), (218, {'lhs': '$210binary_subscr.2', 'rhs': '$216binary_subscr.5', 'res': '$218compare_op.6'}), (220, {'pred': '$218compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={222: (), 244: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=222 nstack_initial=0):
AdaptBlockInfo(insts=((222, {'res': '$weight222.0'}), (224, {'res': '$weights224.1'}), (226, {'res': '$ic1226.2'}), (228, {'index': '$ic1226.2', 'target': '$weights224.1', 'res': '$228binary_subscr.3'}), (230, {'lhs': '$weight222.0', 'rhs': '$228binary_subscr.3', 'res': '$230compare_op.4'}), (232, {'pred': '$230compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={234: (), 240: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=234 nstack_initial=0):
AdaptBlockInfo(insts=((234, {'res': '$ic1234.0'}), (236, {'value': '$ic1234.0'}), (238, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={242: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=240 nstack_initial=0):
AdaptBlockInfo(insts=((240, {'end': 310}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={310: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=242 nstack_initial=0):
AdaptBlockInfo(insts=((242, {}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={266: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=244 nstack_initial=0):
AdaptBlockInfo(insts=((244, {'res': '$weight244.0'}), (246, {'res': '$weights246.1'}), (248, {'res': '$ic2248.2'}), (250, {'index': '$ic2248.2', 'target': '$weights246.1', 'res': '$250binary_subscr.3'}), (252, {'lhs': '$weight244.0', 'rhs': '$250binary_subscr.3', 'res': '$252compare_op.4'}), (254, {'pred': '$252compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={258: (), 264: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=258 nstack_initial=0):
AdaptBlockInfo(insts=((258, {'res': '$ic2258.0'}), (260, {'value': '$ic2258.0'}), (262, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={266: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=264 nstack_initial=0):
AdaptBlockInfo(insts=((264, {'end': 310}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={310: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=266 nstack_initial=0):
AdaptBlockInfo(insts=((266, {'res': '$weights266.0'}), (268, {'res': '$i_swap268.1'}), (270, {'index': '$i_swap268.1', 'target': '$weights266.0', 'res': '$270binary_subscr.2'}), (272, {'res': '$weights272.3'}), (274, {'res': '$i274.4'}), (276, {'target': '$weights272.3', 'index': '$i274.4', 'value': '$270binary_subscr.2'}), (278, {'res': '$indices278.5'}), (280, {'res': '$i_swap280.6'}), (282, {'index': '$i_swap280.6', 'target': '$indices278.5', 'res': '$282binary_subscr.7'}), (284, {'res': '$indices284.8'}), (286, {'res': '$i286.9'}), (288, {'target': '$indices284.8', 'index': '$i286.9', 'value': '$282binary_subscr.7'}), (290, {'res': '$is_new290.10'}), (292, {'res': '$i_swap292.11'}), (294, {'index': '$i_swap292.11', 'target': '$is_new290.10', 'res': '$294binary_subscr.12'}), (296, {'res': '$is_new296.13'}), (298, {'res': '$i298.14'}), (300, {'target': '$is_new296.13', 'index': '$i298.14', 'value': '$294binary_subscr.12'}), (302, {'res': '$i_swap302.15'}), (304, {'value': '$i_swap302.15'}), (306, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 310, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={132: ()})
LINE 147 : 2020-06-05 19:05:01,095 [DEBUG   ] block_infos State(pc_initial=310 nstack_initial=0):
AdaptBlockInfo(insts=((310, {'res': '$weight310.0'}), (312, {'res': '$weights312.1'}), (314, {'res': '$i314.2'}), (316, {'target': '$weights312.1', 'index': '$i314.2', 'value': '$weight310.0'}), (318, {'res': '$index318.3'}), (320, {'res': '$indices320.4'}), (322, {'res': '$i322.5'}), (324, {'target': '$indices320.4', 'index': '$i322.5', 'value': '$index318.3'}), (326, {'res': '$flag326.6'}), (328, {'res': '$is_new328.7'}), (330, {'res': '$i330.8'}), (332, {'target': '$is_new328.7', 'index': '$i330.8', 'value': '$flag326.6'}), (334, {'res': '$const334.9'}), (336, {'retval': '$const334.9', 'castval': '$336return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:01,099 [DEBUG   ] label 0:
    heap = arg(0, name=heap)                 ['heap']
    row = arg(1, name=row)                   ['row']
    weight = arg(2, name=weight)             ['weight']
    index = arg(3, name=index)               ['index']
    flag = arg(4, name=flag)                 ['flag']
    $2load_global.0 = global(int: <class 'int'>) ['$2load_global.0']
    $6call_function.2 = call $2load_global.0(row, func=$2load_global.0, args=[Var(row, utils.py:168)], kws=(), vararg=None) ['$2load_global.0', '$6call_function.2', 'row']
    row.1 = $6call_function.2                ['$6call_function.2', 'row.1']
    $const12.4 = const(int, 0)               ['$const12.4']
    $16build_tuple.6 = build_tuple(items=[Var($const12.4, utils.py:169), Var(row.1, utils.py:168)]) ['$16build_tuple.6', '$const12.4', 'row.1']
    $18binary_subscr.7 = getitem(value=heap, index=$16build_tuple.6) ['$16build_tuple.6', '$18binary_subscr.7', 'heap']
    indices = $18binary_subscr.7             ['$18binary_subscr.7', 'indices']
    $const24.9 = const(int, 1)               ['$const24.9']
    $28build_tuple.11 = build_tuple(items=[Var($const24.9, utils.py:170), Var(row.1, utils.py:168)]) ['$28build_tuple.11', '$const24.9', 'row.1']
    $30binary_subscr.12 = getitem(value=heap, index=$28build_tuple.11) ['$28build_tuple.11', '$30binary_subscr.12', 'heap']
    weights = $30binary_subscr.12            ['$30binary_subscr.12', 'weights']
    $const36.14 = const(int, 2)              ['$const36.14']
    $40build_tuple.16 = build_tuple(items=[Var($const36.14, utils.py:171), Var(row.1, utils.py:168)]) ['$40build_tuple.16', '$const36.14', 'row.1']
    $42binary_subscr.17 = getitem(value=heap, index=$40build_tuple.16) ['$40build_tuple.16', '$42binary_subscr.17', 'heap']
    is_new = $42binary_subscr.17             ['$42binary_subscr.17', 'is_new']
    $const50.20 = const(int, 0)              ['$const50.20']
    $52binary_subscr.21 = getitem(value=weights, index=$const50.20) ['$52binary_subscr.21', '$const50.20', 'weights']
    $54compare_op.22 = weight >= $52binary_subscr.21 ['$52binary_subscr.21', '$54compare_op.22', 'weight']
    branch $54compare_op.22, 58, 62          ['$54compare_op.22']
label 58:
    $const58.0 = const(int, 0)               ['$const58.0']
    $60return_value.1 = cast(value=$const58.0) ['$60return_value.1', '$const58.0']
    return $60return_value.1                 ['$60return_value.1']
label 62:
    $64load_global.0 = global(range: <class 'range'>) ['$64load_global.0']
    $68load_attr.2 = getattr(value=indices, attr=shape) ['$68load_attr.2', 'indices']
    $const70.3 = const(int, 0)               ['$const70.3']
    $72binary_subscr.4 = getitem(value=$68load_attr.2, index=$const70.3) ['$68load_attr.2', '$72binary_subscr.4', '$const70.3']
    $74call_function.5 = call $64load_global.0($72binary_subscr.4, func=$64load_global.0, args=[Var($72binary_subscr.4, utils.py:177)], kws=(), vararg=None) ['$64load_global.0', '$72binary_subscr.4', '$74call_function.5']
    $76get_iter.6 = getiter(value=$74call_function.5) ['$74call_function.5', '$76get_iter.6']
    $phi78.0 = $76get_iter.6                 ['$76get_iter.6', '$phi78.0']
    jump 78                                  []
label 78:
    $78for_iter.1 = iternext(value=$phi78.0) ['$78for_iter.1', '$phi78.0']
    $78for_iter.2 = pair_first(value=$78for_iter.1) ['$78for_iter.1', '$78for_iter.2']
    $78for_iter.3 = pair_second(value=$78for_iter.1) ['$78for_iter.1', '$78for_iter.3']
    $phi80.1 = $78for_iter.2                 ['$78for_iter.2', '$phi80.1']
    branch $78for_iter.3, 80, 100            ['$78for_iter.3']
label 80:
    i = $phi80.1                             ['$phi80.1', 'i']
    $88binary_subscr.5 = getitem(value=indices, index=i) ['$88binary_subscr.5', 'i', 'indices']
    $90compare_op.6 = index == $88binary_subscr.5 ['$88binary_subscr.5', '$90compare_op.6', 'index']
    branch $90compare_op.6, 94, 78           ['$90compare_op.6']
label 94:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96return_value.2 = cast(value=$const94.1) ['$96return_value.2', '$const94.1']
    return $96return_value.2                 ['$96return_value.2']
label 100:
    jump 102                                 []
label 102:
    $const106.2 = const(int, 0)              ['$const106.2']
    weights[$const106.2] = weight            ['$const106.2', 'weight', 'weights']
    $const114.5 = const(int, 0)              ['$const114.5']
    indices[$const114.5] = index             ['$const114.5', 'index', 'indices']
    $const122.8 = const(int, 0)              ['$const122.8']
    is_new[$const122.8] = flag               ['$const122.8', 'flag', 'is_new']
    $const126.9 = const(int, 0)              ['$const126.9']
    i = $const126.9                          ['$const126.9', 'i']
    jump 130                                 []
label 130:
    jump 132                                 []
label 132:
    $const132.0 = const(int, 2)              ['$const132.0']
    $136binary_multiply.2 = $const132.0 * i  ['$136binary_multiply.2', '$const132.0', 'i']
    $const138.3 = const(int, 1)              ['$const138.3']
    $140binary_add.4 = $136binary_multiply.2 + $const138.3 ['$136binary_multiply.2', '$140binary_add.4', '$const138.3']
    ic1 = $140binary_add.4                   ['$140binary_add.4', 'ic1']
    $const146.6 = const(int, 1)              ['$const146.6']
    $148binary_add.7 = ic1 + $const146.6     ['$148binary_add.7', '$const146.6', 'ic1']
    ic2 = $148binary_add.7                   ['$148binary_add.7', 'ic2']
    $156load_attr.10 = getattr(value=heap, attr=shape) ['$156load_attr.10', 'heap']
    $const158.11 = const(int, 2)             ['$const158.11']
    $160binary_subscr.12 = getitem(value=$156load_attr.10, index=$const158.11) ['$156load_attr.10', '$160binary_subscr.12', '$const158.11']
    $162compare_op.13 = ic1 >= $160binary_subscr.12 ['$160binary_subscr.12', '$162compare_op.13', 'ic1']
    branch $162compare_op.13, 166, 170       ['$162compare_op.13']
label 166:
    jump 310                                 []
label 170:
    $174load_attr.2 = getattr(value=heap, attr=shape) ['$174load_attr.2', 'heap']
    $const176.3 = const(int, 2)              ['$const176.3']
    $178binary_subscr.4 = getitem(value=$174load_attr.2, index=$const176.3) ['$174load_attr.2', '$178binary_subscr.4', '$const176.3']
    $180compare_op.5 = ic2 >= $178binary_subscr.4 ['$178binary_subscr.4', '$180compare_op.5', 'ic2']
    branch $180compare_op.5, 184, 206        ['$180compare_op.5']
label 184:
    $188binary_subscr.2 = getitem(value=weights, index=ic1) ['$188binary_subscr.2', 'ic1', 'weights']
    $192compare_op.4 = $188binary_subscr.2 > weight ['$188binary_subscr.2', '$192compare_op.4', 'weight']
    branch $192compare_op.4, 196, 202        ['$192compare_op.4']
label 196:
    i_swap = ic1                             ['i_swap', 'ic1']
    jump 204                                 []
label 202:
    jump 310                                 []
label 204:
    jump 266                                 []
label 206:
    $210binary_subscr.2 = getitem(value=weights, index=ic1) ['$210binary_subscr.2', 'ic1', 'weights']
    $216binary_subscr.5 = getitem(value=weights, index=ic2) ['$216binary_subscr.5', 'ic2', 'weights']
    $218compare_op.6 = $210binary_subscr.2 >= $216binary_subscr.5 ['$210binary_subscr.2', '$216binary_subscr.5', '$218compare_op.6']
    branch $218compare_op.6, 222, 244        ['$218compare_op.6']
label 222:
    $228binary_subscr.3 = getitem(value=weights, index=ic1) ['$228binary_subscr.3', 'ic1', 'weights']
    $230compare_op.4 = weight < $228binary_subscr.3 ['$228binary_subscr.3', '$230compare_op.4', 'weight']
    branch $230compare_op.4, 234, 240        ['$230compare_op.4']
label 234:
    i_swap = ic1                             ['i_swap', 'ic1']
    jump 242                                 []
label 240:
    jump 310                                 []
label 242:
    jump 266                                 []
label 244:
    $250binary_subscr.3 = getitem(value=weights, index=ic2) ['$250binary_subscr.3', 'ic2', 'weights']
    $252compare_op.4 = weight < $250binary_subscr.3 ['$250binary_subscr.3', '$252compare_op.4', 'weight']
    branch $252compare_op.4, 258, 264        ['$252compare_op.4']
label 258:
    i_swap = ic2                             ['i_swap', 'ic2']
    jump 266                                 []
label 264:
    jump 310                                 []
label 266:
    $270binary_subscr.2 = getitem(value=weights, index=i_swap) ['$270binary_subscr.2', 'i_swap', 'weights']
    weights[i] = $270binary_subscr.2         ['$270binary_subscr.2', 'i', 'weights']
    $282binary_subscr.7 = getitem(value=indices, index=i_swap) ['$282binary_subscr.7', 'i_swap', 'indices']
    indices[i] = $282binary_subscr.7         ['$282binary_subscr.7', 'i', 'indices']
    $294binary_subscr.12 = getitem(value=is_new, index=i_swap) ['$294binary_subscr.12', 'i_swap', 'is_new']
    is_new[i] = $294binary_subscr.12         ['$294binary_subscr.12', 'i', 'is_new']
    i = i_swap                               ['i', 'i_swap']
    jump 132                                 []
label 310:
    weights[i] = weight                      ['i', 'weight', 'weights']
    indices[i] = index                       ['i', 'index', 'indices']
    is_new[i] = flag                         ['flag', 'i', 'is_new']
    $const334.9 = const(int, 1)              ['$const334.9']
    $336return_value.10 = cast(value=$const334.9) ['$336return_value.10', '$const334.9']
    return $336return_value.10               ['$336return_value.10']

LINE 74  : 2020-06-05 19:05:01,506 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=252)
           2	LOAD_FAST(arg=0, lineno=252)
           4	LOAD_CONST(arg=1, lineno=252)
           6	LOAD_FAST(arg=1, lineno=252)
           8	BUILD_TUPLE(arg=2, lineno=252)
          10	BINARY_SUBSCR(arg=None, lineno=252)
          12	STORE_FAST(arg=5, lineno=252)
          14	LOAD_FAST(arg=0, lineno=253)
          16	LOAD_CONST(arg=2, lineno=253)
          18	LOAD_FAST(arg=1, lineno=253)
          20	BUILD_TUPLE(arg=2, lineno=253)
          22	BINARY_SUBSCR(arg=None, lineno=253)
          24	STORE_FAST(arg=6, lineno=253)
          26	LOAD_FAST(arg=0, lineno=254)
          28	LOAD_CONST(arg=3, lineno=254)
          30	LOAD_FAST(arg=1, lineno=254)
          32	BUILD_TUPLE(arg=2, lineno=254)
          34	BINARY_SUBSCR(arg=None, lineno=254)
          36	STORE_FAST(arg=7, lineno=254)
          38	LOAD_FAST(arg=2, lineno=256)
          40	LOAD_FAST(arg=6, lineno=256)
          42	LOAD_CONST(arg=1, lineno=256)
          44	BINARY_SUBSCR(arg=None, lineno=256)
          46	COMPARE_OP(arg=5, lineno=256)
          48	POP_JUMP_IF_FALSE(arg=54, lineno=256)
          50	LOAD_CONST(arg=1, lineno=257)
          52	RETURN_VALUE(arg=None, lineno=257)
>         54	LOAD_FAST(arg=2, lineno=260)
          56	LOAD_FAST(arg=6, lineno=260)
          58	LOAD_CONST(arg=1, lineno=260)
          60	STORE_SUBSCR(arg=None, lineno=260)
          62	LOAD_FAST(arg=3, lineno=261)
          64	LOAD_FAST(arg=5, lineno=261)
          66	LOAD_CONST(arg=1, lineno=261)
          68	STORE_SUBSCR(arg=None, lineno=261)
          70	LOAD_FAST(arg=4, lineno=262)
          72	LOAD_FAST(arg=7, lineno=262)
          74	LOAD_CONST(arg=1, lineno=262)
          76	STORE_SUBSCR(arg=None, lineno=262)
          78	LOAD_CONST(arg=1, lineno=265)
          80	STORE_FAST(arg=8, lineno=265)
          82	SETUP_LOOP(arg=176, lineno=266)
>         84	LOAD_CONST(arg=3, lineno=267)
          86	LOAD_FAST(arg=8, lineno=267)
          88	BINARY_MULTIPLY(arg=None, lineno=267)
          90	LOAD_CONST(arg=2, lineno=267)
          92	BINARY_ADD(arg=None, lineno=267)
          94	STORE_FAST(arg=9, lineno=267)
          96	LOAD_FAST(arg=9, lineno=268)
          98	LOAD_CONST(arg=2, lineno=268)
         100	BINARY_ADD(arg=None, lineno=268)
         102	STORE_FAST(arg=10, lineno=268)
         104	LOAD_FAST(arg=9, lineno=270)
         106	LOAD_FAST(arg=0, lineno=270)
         108	LOAD_ATTR(arg=0, lineno=270)
         110	LOAD_CONST(arg=3, lineno=270)
         112	BINARY_SUBSCR(arg=None, lineno=270)
         114	COMPARE_OP(arg=5, lineno=270)
         116	POP_JUMP_IF_FALSE(arg=122, lineno=270)
         118	BREAK_LOOP(arg=None, lineno=271)
         120	JUMP_FORWARD(arg=94, lineno=271)
>        122	LOAD_FAST(arg=10, lineno=272)
         124	LOAD_FAST(arg=0, lineno=272)
         126	LOAD_ATTR(arg=0, lineno=272)
         128	LOAD_CONST(arg=3, lineno=272)
         130	BINARY_SUBSCR(arg=None, lineno=272)
         132	COMPARE_OP(arg=5, lineno=272)
         134	POP_JUMP_IF_FALSE(arg=158, lineno=272)
         136	LOAD_FAST(arg=6, lineno=273)
         138	LOAD_FAST(arg=9, lineno=273)
         140	BINARY_SUBSCR(arg=None, lineno=273)
         142	LOAD_FAST(arg=2, lineno=273)
         144	COMPARE_OP(arg=4, lineno=273)
         146	POP_JUMP_IF_FALSE(arg=154, lineno=273)
         148	LOAD_FAST(arg=9, lineno=274)
         150	STORE_FAST(arg=11, lineno=274)
         152	JUMP_ABSOLUTE(arg=216, lineno=274)
>        154	BREAK_LOOP(arg=None, lineno=276)
         156	JUMP_FORWARD(arg=58, lineno=276)
>        158	LOAD_FAST(arg=6, lineno=277)
         160	LOAD_FAST(arg=9, lineno=277)
         162	BINARY_SUBSCR(arg=None, lineno=277)
         164	LOAD_FAST(arg=6, lineno=277)
         166	LOAD_FAST(arg=10, lineno=277)
         168	BINARY_SUBSCR(arg=None, lineno=277)
         170	COMPARE_OP(arg=5, lineno=277)
         172	POP_JUMP_IF_FALSE(arg=196, lineno=277)
         174	LOAD_FAST(arg=2, lineno=278)
         176	LOAD_FAST(arg=6, lineno=278)
         178	LOAD_FAST(arg=9, lineno=278)
         180	BINARY_SUBSCR(arg=None, lineno=278)
         182	COMPARE_OP(arg=0, lineno=278)
         184	POP_JUMP_IF_FALSE(arg=192, lineno=278)
         186	LOAD_FAST(arg=9, lineno=279)
         188	STORE_FAST(arg=11, lineno=279)
         190	JUMP_ABSOLUTE(arg=216, lineno=279)
>        192	BREAK_LOOP(arg=None, lineno=281)
         194	JUMP_FORWARD(arg=20, lineno=281)
>        196	LOAD_FAST(arg=2, lineno=283)
         198	LOAD_FAST(arg=6, lineno=283)
         200	LOAD_FAST(arg=10, lineno=283)
         202	BINARY_SUBSCR(arg=None, lineno=283)
         204	COMPARE_OP(arg=0, lineno=283)
         206	POP_JUMP_IF_FALSE(arg=214, lineno=283)
         208	LOAD_FAST(arg=10, lineno=284)
         210	STORE_FAST(arg=11, lineno=284)
         212	JUMP_FORWARD(arg=2, lineno=284)
>        214	BREAK_LOOP(arg=None, lineno=286)
>        216	LOAD_FAST(arg=6, lineno=288)
         218	LOAD_FAST(arg=11, lineno=288)
         220	BINARY_SUBSCR(arg=None, lineno=288)
         222	LOAD_FAST(arg=6, lineno=288)
         224	LOAD_FAST(arg=8, lineno=288)
         226	STORE_SUBSCR(arg=None, lineno=288)
         228	LOAD_FAST(arg=5, lineno=289)
         230	LOAD_FAST(arg=11, lineno=289)
         232	BINARY_SUBSCR(arg=None, lineno=289)
         234	LOAD_FAST(arg=5, lineno=289)
         236	LOAD_FAST(arg=8, lineno=289)
         238	STORE_SUBSCR(arg=None, lineno=289)
         240	LOAD_FAST(arg=7, lineno=290)
         242	LOAD_FAST(arg=11, lineno=290)
         244	BINARY_SUBSCR(arg=None, lineno=290)
         246	LOAD_FAST(arg=7, lineno=290)
         248	LOAD_FAST(arg=8, lineno=290)
         250	STORE_SUBSCR(arg=None, lineno=290)
         252	LOAD_FAST(arg=11, lineno=292)
         254	STORE_FAST(arg=8, lineno=292)
         256	JUMP_ABSOLUTE(arg=84, lineno=292)
         258	POP_BLOCK(arg=None, lineno=292)
>        260	LOAD_FAST(arg=2, lineno=294)
         262	LOAD_FAST(arg=6, lineno=294)
         264	LOAD_FAST(arg=8, lineno=294)
         266	STORE_SUBSCR(arg=None, lineno=294)
         268	LOAD_FAST(arg=3, lineno=295)
         270	LOAD_FAST(arg=5, lineno=295)
         272	LOAD_FAST(arg=8, lineno=295)
         274	STORE_SUBSCR(arg=None, lineno=295)
         276	LOAD_FAST(arg=4, lineno=296)
         278	LOAD_FAST(arg=7, lineno=296)
         280	LOAD_FAST(arg=8, lineno=296)
         282	STORE_SUBSCR(arg=None, lineno=296)
         284	LOAD_CONST(arg=2, lineno=298)
         286	RETURN_VALUE(arg=None, lineno=298)
LINE 100 : 2020-06-05 19:05:01,507 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,507 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,507 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=252)
LINE 263 : 2020-06-05 19:05:01,507 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,507 [DEBUG   ] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=252)
LINE 263 : 2020-06-05 19:05:01,507 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,507 [DEBUG   ] dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=252)
LINE 263 : 2020-06-05 19:05:01,507 [DEBUG   ] stack ['$heap2.0']
LINE 262 : 2020-06-05 19:05:01,508 [DEBUG   ] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=252)
LINE 263 : 2020-06-05 19:05:01,508 [DEBUG   ] stack ['$heap2.0', '$const4.1']
LINE 262 : 2020-06-05 19:05:01,508 [DEBUG   ] dispatch pc=8, inst=BUILD_TUPLE(arg=2, lineno=252)
LINE 263 : 2020-06-05 19:05:01,508 [DEBUG   ] stack ['$heap2.0', '$const4.1', '$row6.2']
LINE 262 : 2020-06-05 19:05:01,508 [DEBUG   ] dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=252)
LINE 263 : 2020-06-05 19:05:01,508 [DEBUG   ] stack ['$heap2.0', '$8build_tuple.3']
LINE 262 : 2020-06-05 19:05:01,509 [DEBUG   ] dispatch pc=12, inst=STORE_FAST(arg=5, lineno=252)
LINE 263 : 2020-06-05 19:05:01,509 [DEBUG   ] stack ['$10binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,509 [DEBUG   ] dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=253)
LINE 263 : 2020-06-05 19:05:01,509 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,509 [DEBUG   ] dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=253)
LINE 263 : 2020-06-05 19:05:01,509 [DEBUG   ] stack ['$heap14.5']
LINE 262 : 2020-06-05 19:05:01,509 [DEBUG   ] dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=253)
LINE 263 : 2020-06-05 19:05:01,509 [DEBUG   ] stack ['$heap14.5', '$const16.6']
LINE 262 : 2020-06-05 19:05:01,509 [DEBUG   ] dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=253)
LINE 263 : 2020-06-05 19:05:01,509 [DEBUG   ] stack ['$heap14.5', '$const16.6', '$row18.7']
LINE 262 : 2020-06-05 19:05:01,510 [DEBUG   ] dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=253)
LINE 263 : 2020-06-05 19:05:01,510 [DEBUG   ] stack ['$heap14.5', '$20build_tuple.8']
LINE 262 : 2020-06-05 19:05:01,510 [DEBUG   ] dispatch pc=24, inst=STORE_FAST(arg=6, lineno=253)
LINE 263 : 2020-06-05 19:05:01,510 [DEBUG   ] stack ['$22binary_subscr.9']
LINE 262 : 2020-06-05 19:05:01,510 [DEBUG   ] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=254)
LINE 263 : 2020-06-05 19:05:01,510 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,510 [DEBUG   ] dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=254)
LINE 263 : 2020-06-05 19:05:01,510 [DEBUG   ] stack ['$heap26.10']
LINE 262 : 2020-06-05 19:05:01,510 [DEBUG   ] dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=254)
LINE 263 : 2020-06-05 19:05:01,510 [DEBUG   ] stack ['$heap26.10', '$const28.11']
LINE 262 : 2020-06-05 19:05:01,510 [DEBUG   ] dispatch pc=32, inst=BUILD_TUPLE(arg=2, lineno=254)
LINE 263 : 2020-06-05 19:05:01,510 [DEBUG   ] stack ['$heap26.10', '$const28.11', '$row30.12']
LINE 262 : 2020-06-05 19:05:01,510 [DEBUG   ] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=254)
LINE 263 : 2020-06-05 19:05:01,510 [DEBUG   ] stack ['$heap26.10', '$32build_tuple.13']
LINE 262 : 2020-06-05 19:05:01,511 [DEBUG   ] dispatch pc=36, inst=STORE_FAST(arg=7, lineno=254)
LINE 263 : 2020-06-05 19:05:01,511 [DEBUG   ] stack ['$34binary_subscr.14']
LINE 262 : 2020-06-05 19:05:01,511 [DEBUG   ] dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=256)
LINE 263 : 2020-06-05 19:05:01,511 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,511 [DEBUG   ] dispatch pc=40, inst=LOAD_FAST(arg=6, lineno=256)
LINE 263 : 2020-06-05 19:05:01,511 [DEBUG   ] stack ['$weight38.15']
LINE 262 : 2020-06-05 19:05:01,511 [DEBUG   ] dispatch pc=42, inst=LOAD_CONST(arg=1, lineno=256)
LINE 263 : 2020-06-05 19:05:01,511 [DEBUG   ] stack ['$weight38.15', '$weights40.16']
LINE 262 : 2020-06-05 19:05:01,511 [DEBUG   ] dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=256)
LINE 263 : 2020-06-05 19:05:01,511 [DEBUG   ] stack ['$weight38.15', '$weights40.16', '$const42.17']
LINE 262 : 2020-06-05 19:05:01,511 [DEBUG   ] dispatch pc=46, inst=COMPARE_OP(arg=5, lineno=256)
LINE 263 : 2020-06-05 19:05:01,511 [DEBUG   ] stack ['$weight38.15', '$44binary_subscr.18']
LINE 262 : 2020-06-05 19:05:01,512 [DEBUG   ] dispatch pc=48, inst=POP_JUMP_IF_FALSE(arg=54, lineno=256)
LINE 263 : 2020-06-05 19:05:01,512 [DEBUG   ] stack ['$46compare_op.19']
LINE 135 : 2020-06-05 19:05:01,512 [DEBUG   ] end state. edges=[Edge(pc=50, stack=(), blockstack=(), npush=0), Edge(pc=54, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,512 [DEBUG   ] pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=54 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,512 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,512 [DEBUG   ] dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=257)
LINE 263 : 2020-06-05 19:05:01,512 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,512 [DEBUG   ] dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=257)
LINE 263 : 2020-06-05 19:05:01,512 [DEBUG   ] stack ['$const50.0']
LINE 135 : 2020-06-05 19:05:01,512 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,512 [DEBUG   ] pending: deque([State(pc_initial=54 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,513 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,513 [DEBUG   ] dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=260)
LINE 263 : 2020-06-05 19:05:01,513 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,513 [DEBUG   ] dispatch pc=56, inst=LOAD_FAST(arg=6, lineno=260)
LINE 263 : 2020-06-05 19:05:01,513 [DEBUG   ] stack ['$weight54.0']
LINE 262 : 2020-06-05 19:05:01,513 [DEBUG   ] dispatch pc=58, inst=LOAD_CONST(arg=1, lineno=260)
LINE 263 : 2020-06-05 19:05:01,514 [DEBUG   ] stack ['$weight54.0', '$weights56.1']
LINE 262 : 2020-06-05 19:05:01,514 [DEBUG   ] dispatch pc=60, inst=STORE_SUBSCR(arg=None, lineno=260)
LINE 263 : 2020-06-05 19:05:01,514 [DEBUG   ] stack ['$weight54.0', '$weights56.1', '$const58.2']
LINE 262 : 2020-06-05 19:05:01,514 [DEBUG   ] dispatch pc=62, inst=LOAD_FAST(arg=3, lineno=261)
LINE 263 : 2020-06-05 19:05:01,514 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,514 [DEBUG   ] dispatch pc=64, inst=LOAD_FAST(arg=5, lineno=261)
LINE 263 : 2020-06-05 19:05:01,514 [DEBUG   ] stack ['$index62.3']
LINE 262 : 2020-06-05 19:05:01,514 [DEBUG   ] dispatch pc=66, inst=LOAD_CONST(arg=1, lineno=261)
LINE 263 : 2020-06-05 19:05:01,514 [DEBUG   ] stack ['$index62.3', '$indices64.4']
LINE 262 : 2020-06-05 19:05:01,514 [DEBUG   ] dispatch pc=68, inst=STORE_SUBSCR(arg=None, lineno=261)
LINE 263 : 2020-06-05 19:05:01,514 [DEBUG   ] stack ['$index62.3', '$indices64.4', '$const66.5']
LINE 262 : 2020-06-05 19:05:01,515 [DEBUG   ] dispatch pc=70, inst=LOAD_FAST(arg=4, lineno=262)
LINE 263 : 2020-06-05 19:05:01,515 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,515 [DEBUG   ] dispatch pc=72, inst=LOAD_FAST(arg=7, lineno=262)
LINE 263 : 2020-06-05 19:05:01,515 [DEBUG   ] stack ['$flag70.6']
LINE 262 : 2020-06-05 19:05:01,515 [DEBUG   ] dispatch pc=74, inst=LOAD_CONST(arg=1, lineno=262)
LINE 263 : 2020-06-05 19:05:01,515 [DEBUG   ] stack ['$flag70.6', '$is_new72.7']
LINE 262 : 2020-06-05 19:05:01,515 [DEBUG   ] dispatch pc=76, inst=STORE_SUBSCR(arg=None, lineno=262)
LINE 263 : 2020-06-05 19:05:01,515 [DEBUG   ] stack ['$flag70.6', '$is_new72.7', '$const74.8']
LINE 262 : 2020-06-05 19:05:01,515 [DEBUG   ] dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=265)
LINE 263 : 2020-06-05 19:05:01,516 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,516 [DEBUG   ] dispatch pc=80, inst=STORE_FAST(arg=8, lineno=265)
LINE 263 : 2020-06-05 19:05:01,516 [DEBUG   ] stack ['$const78.9']
LINE 135 : 2020-06-05 19:05:01,516 [DEBUG   ] end state. edges=[Edge(pc=82, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,516 [DEBUG   ] pending: deque([State(pc_initial=82 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,516 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,516 [DEBUG   ] dispatch pc=82, inst=SETUP_LOOP(arg=176, lineno=266)
LINE 263 : 2020-06-05 19:05:01,516 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,516 [DEBUG   ] end state. edges=[Edge(pc=84, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,516 [DEBUG   ] pending: deque([State(pc_initial=84 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,516 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,516 [DEBUG   ] dispatch pc=84, inst=LOAD_CONST(arg=3, lineno=267)
LINE 263 : 2020-06-05 19:05:01,516 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=86, inst=LOAD_FAST(arg=8, lineno=267)
LINE 263 : 2020-06-05 19:05:01,517 [DEBUG   ] stack ['$const84.0']
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=88, inst=BINARY_MULTIPLY(arg=None, lineno=267)
LINE 263 : 2020-06-05 19:05:01,517 [DEBUG   ] stack ['$const84.0', '$i86.1']
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=90, inst=LOAD_CONST(arg=2, lineno=267)
LINE 263 : 2020-06-05 19:05:01,517 [DEBUG   ] stack ['$88binary_multiply.2']
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=92, inst=BINARY_ADD(arg=None, lineno=267)
LINE 263 : 2020-06-05 19:05:01,517 [DEBUG   ] stack ['$88binary_multiply.2', '$const90.3']
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=94, inst=STORE_FAST(arg=9, lineno=267)
LINE 263 : 2020-06-05 19:05:01,517 [DEBUG   ] stack ['$92binary_add.4']
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=96, inst=LOAD_FAST(arg=9, lineno=268)
LINE 263 : 2020-06-05 19:05:01,517 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=98, inst=LOAD_CONST(arg=2, lineno=268)
LINE 263 : 2020-06-05 19:05:01,517 [DEBUG   ] stack ['$ic196.5']
LINE 262 : 2020-06-05 19:05:01,517 [DEBUG   ] dispatch pc=100, inst=BINARY_ADD(arg=None, lineno=268)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack ['$ic196.5', '$const98.6']
LINE 262 : 2020-06-05 19:05:01,518 [DEBUG   ] dispatch pc=102, inst=STORE_FAST(arg=10, lineno=268)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack ['$100binary_add.7']
LINE 262 : 2020-06-05 19:05:01,518 [DEBUG   ] dispatch pc=104, inst=LOAD_FAST(arg=9, lineno=270)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,518 [DEBUG   ] dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=270)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack ['$ic1104.8']
LINE 262 : 2020-06-05 19:05:01,518 [DEBUG   ] dispatch pc=108, inst=LOAD_ATTR(arg=0, lineno=270)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack ['$ic1104.8', '$heap106.9']
LINE 262 : 2020-06-05 19:05:01,518 [DEBUG   ] dispatch pc=110, inst=LOAD_CONST(arg=3, lineno=270)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack ['$ic1104.8', '$108load_attr.10']
LINE 262 : 2020-06-05 19:05:01,518 [DEBUG   ] dispatch pc=112, inst=BINARY_SUBSCR(arg=None, lineno=270)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack ['$ic1104.8', '$108load_attr.10', '$const110.11']
LINE 262 : 2020-06-05 19:05:01,518 [DEBUG   ] dispatch pc=114, inst=COMPARE_OP(arg=5, lineno=270)
LINE 263 : 2020-06-05 19:05:01,518 [DEBUG   ] stack ['$ic1104.8', '$112binary_subscr.12']
LINE 262 : 2020-06-05 19:05:01,519 [DEBUG   ] dispatch pc=116, inst=POP_JUMP_IF_FALSE(arg=122, lineno=270)
LINE 263 : 2020-06-05 19:05:01,519 [DEBUG   ] stack ['$114compare_op.13']
LINE 135 : 2020-06-05 19:05:01,519 [DEBUG   ] end state. edges=[Edge(pc=118, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=122, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,519 [DEBUG   ] pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,519 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,519 [DEBUG   ] dispatch pc=118, inst=BREAK_LOOP(arg=None, lineno=271)
LINE 263 : 2020-06-05 19:05:01,519 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,519 [DEBUG   ] end state. edges=[Edge(pc=260, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,519 [DEBUG   ] pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,519 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,519 [DEBUG   ] dispatch pc=122, inst=LOAD_FAST(arg=10, lineno=272)
LINE 263 : 2020-06-05 19:05:01,520 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,520 [DEBUG   ] dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=272)
LINE 263 : 2020-06-05 19:05:01,520 [DEBUG   ] stack ['$ic2122.0']
LINE 262 : 2020-06-05 19:05:01,520 [DEBUG   ] dispatch pc=126, inst=LOAD_ATTR(arg=0, lineno=272)
LINE 263 : 2020-06-05 19:05:01,520 [DEBUG   ] stack ['$ic2122.0', '$heap124.1']
LINE 262 : 2020-06-05 19:05:01,520 [DEBUG   ] dispatch pc=128, inst=LOAD_CONST(arg=3, lineno=272)
LINE 263 : 2020-06-05 19:05:01,520 [DEBUG   ] stack ['$ic2122.0', '$126load_attr.2']
LINE 262 : 2020-06-05 19:05:01,520 [DEBUG   ] dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=272)
LINE 263 : 2020-06-05 19:05:01,520 [DEBUG   ] stack ['$ic2122.0', '$126load_attr.2', '$const128.3']
LINE 262 : 2020-06-05 19:05:01,520 [DEBUG   ] dispatch pc=132, inst=COMPARE_OP(arg=5, lineno=272)
LINE 263 : 2020-06-05 19:05:01,520 [DEBUG   ] stack ['$ic2122.0', '$130binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,520 [DEBUG   ] dispatch pc=134, inst=POP_JUMP_IF_FALSE(arg=158, lineno=272)
LINE 263 : 2020-06-05 19:05:01,521 [DEBUG   ] stack ['$132compare_op.5']
LINE 135 : 2020-06-05 19:05:01,521 [DEBUG   ] end state. edges=[Edge(pc=136, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=158, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,521 [DEBUG   ] pending: deque([State(pc_initial=260 nstack_initial=0), State(pc_initial=136 nstack_initial=0), State(pc_initial=158 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,521 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,521 [DEBUG   ] dispatch pc=260, inst=LOAD_FAST(arg=2, lineno=294)
LINE 263 : 2020-06-05 19:05:01,521 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,521 [DEBUG   ] dispatch pc=262, inst=LOAD_FAST(arg=6, lineno=294)
LINE 263 : 2020-06-05 19:05:01,521 [DEBUG   ] stack ['$weight260.0']
LINE 262 : 2020-06-05 19:05:01,521 [DEBUG   ] dispatch pc=264, inst=LOAD_FAST(arg=8, lineno=294)
LINE 263 : 2020-06-05 19:05:01,521 [DEBUG   ] stack ['$weight260.0', '$weights262.1']
LINE 262 : 2020-06-05 19:05:01,521 [DEBUG   ] dispatch pc=266, inst=STORE_SUBSCR(arg=None, lineno=294)
LINE 263 : 2020-06-05 19:05:01,521 [DEBUG   ] stack ['$weight260.0', '$weights262.1', '$i264.2']
LINE 262 : 2020-06-05 19:05:01,522 [DEBUG   ] dispatch pc=268, inst=LOAD_FAST(arg=3, lineno=295)
LINE 263 : 2020-06-05 19:05:01,522 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,522 [DEBUG   ] dispatch pc=270, inst=LOAD_FAST(arg=5, lineno=295)
LINE 263 : 2020-06-05 19:05:01,522 [DEBUG   ] stack ['$index268.3']
LINE 262 : 2020-06-05 19:05:01,522 [DEBUG   ] dispatch pc=272, inst=LOAD_FAST(arg=8, lineno=295)
LINE 263 : 2020-06-05 19:05:01,522 [DEBUG   ] stack ['$index268.3', '$indices270.4']
LINE 262 : 2020-06-05 19:05:01,522 [DEBUG   ] dispatch pc=274, inst=STORE_SUBSCR(arg=None, lineno=295)
LINE 263 : 2020-06-05 19:05:01,522 [DEBUG   ] stack ['$index268.3', '$indices270.4', '$i272.5']
LINE 262 : 2020-06-05 19:05:01,522 [DEBUG   ] dispatch pc=276, inst=LOAD_FAST(arg=4, lineno=296)
LINE 263 : 2020-06-05 19:05:01,522 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,522 [DEBUG   ] dispatch pc=278, inst=LOAD_FAST(arg=7, lineno=296)
LINE 263 : 2020-06-05 19:05:01,522 [DEBUG   ] stack ['$flag276.6']
LINE 262 : 2020-06-05 19:05:01,523 [DEBUG   ] dispatch pc=280, inst=LOAD_FAST(arg=8, lineno=296)
LINE 263 : 2020-06-05 19:05:01,523 [DEBUG   ] stack ['$flag276.6', '$is_new278.7']
LINE 262 : 2020-06-05 19:05:01,523 [DEBUG   ] dispatch pc=282, inst=STORE_SUBSCR(arg=None, lineno=296)
LINE 263 : 2020-06-05 19:05:01,523 [DEBUG   ] stack ['$flag276.6', '$is_new278.7', '$i280.8']
LINE 262 : 2020-06-05 19:05:01,523 [DEBUG   ] dispatch pc=284, inst=LOAD_CONST(arg=2, lineno=298)
LINE 263 : 2020-06-05 19:05:01,523 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,523 [DEBUG   ] dispatch pc=286, inst=RETURN_VALUE(arg=None, lineno=298)
LINE 263 : 2020-06-05 19:05:01,523 [DEBUG   ] stack ['$const284.9']
LINE 135 : 2020-06-05 19:05:01,523 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,523 [DEBUG   ] pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=158 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,523 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,524 [DEBUG   ] dispatch pc=136, inst=LOAD_FAST(arg=6, lineno=273)
LINE 263 : 2020-06-05 19:05:01,524 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,524 [DEBUG   ] dispatch pc=138, inst=LOAD_FAST(arg=9, lineno=273)
LINE 263 : 2020-06-05 19:05:01,524 [DEBUG   ] stack ['$weights136.0']
LINE 262 : 2020-06-05 19:05:01,524 [DEBUG   ] dispatch pc=140, inst=BINARY_SUBSCR(arg=None, lineno=273)
LINE 263 : 2020-06-05 19:05:01,524 [DEBUG   ] stack ['$weights136.0', '$ic1138.1']
LINE 262 : 2020-06-05 19:05:01,524 [DEBUG   ] dispatch pc=142, inst=LOAD_FAST(arg=2, lineno=273)
LINE 263 : 2020-06-05 19:05:01,525 [DEBUG   ] stack ['$140binary_subscr.2']
LINE 262 : 2020-06-05 19:05:01,525 [DEBUG   ] dispatch pc=144, inst=COMPARE_OP(arg=4, lineno=273)
LINE 263 : 2020-06-05 19:05:01,525 [DEBUG   ] stack ['$140binary_subscr.2', '$weight142.3']
LINE 262 : 2020-06-05 19:05:01,525 [DEBUG   ] dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=154, lineno=273)
LINE 263 : 2020-06-05 19:05:01,525 [DEBUG   ] stack ['$144compare_op.4']
LINE 135 : 2020-06-05 19:05:01,525 [DEBUG   ] end state. edges=[Edge(pc=148, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=154, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,525 [DEBUG   ] pending: deque([State(pc_initial=158 nstack_initial=0), State(pc_initial=148 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,525 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,525 [DEBUG   ] dispatch pc=158, inst=LOAD_FAST(arg=6, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,526 [DEBUG   ] dispatch pc=160, inst=LOAD_FAST(arg=9, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack ['$weights158.0']
LINE 262 : 2020-06-05 19:05:01,526 [DEBUG   ] dispatch pc=162, inst=BINARY_SUBSCR(arg=None, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack ['$weights158.0', '$ic1160.1']
LINE 262 : 2020-06-05 19:05:01,526 [DEBUG   ] dispatch pc=164, inst=LOAD_FAST(arg=6, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack ['$162binary_subscr.2']
LINE 262 : 2020-06-05 19:05:01,526 [DEBUG   ] dispatch pc=166, inst=LOAD_FAST(arg=10, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack ['$162binary_subscr.2', '$weights164.3']
LINE 262 : 2020-06-05 19:05:01,526 [DEBUG   ] dispatch pc=168, inst=BINARY_SUBSCR(arg=None, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack ['$162binary_subscr.2', '$weights164.3', '$ic2166.4']
LINE 262 : 2020-06-05 19:05:01,526 [DEBUG   ] dispatch pc=170, inst=COMPARE_OP(arg=5, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack ['$162binary_subscr.2', '$168binary_subscr.5']
LINE 262 : 2020-06-05 19:05:01,526 [DEBUG   ] dispatch pc=172, inst=POP_JUMP_IF_FALSE(arg=196, lineno=277)
LINE 263 : 2020-06-05 19:05:01,526 [DEBUG   ] stack ['$170compare_op.6']
LINE 135 : 2020-06-05 19:05:01,527 [DEBUG   ] end state. edges=[Edge(pc=174, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=196, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,527 [DEBUG   ] pending: deque([State(pc_initial=148 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=196 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,527 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,527 [DEBUG   ] dispatch pc=148, inst=LOAD_FAST(arg=9, lineno=274)
LINE 263 : 2020-06-05 19:05:01,527 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,527 [DEBUG   ] dispatch pc=150, inst=STORE_FAST(arg=11, lineno=274)
LINE 263 : 2020-06-05 19:05:01,527 [DEBUG   ] stack ['$ic1148.0']
LINE 262 : 2020-06-05 19:05:01,527 [DEBUG   ] dispatch pc=152, inst=JUMP_ABSOLUTE(arg=216, lineno=274)
LINE 263 : 2020-06-05 19:05:01,527 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,527 [DEBUG   ] end state. edges=[Edge(pc=216, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,527 [DEBUG   ] pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=196 nstack_initial=0), State(pc_initial=216 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,527 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,527 [DEBUG   ] dispatch pc=154, inst=BREAK_LOOP(arg=None, lineno=276)
LINE 263 : 2020-06-05 19:05:01,527 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,527 [DEBUG   ] end state. edges=[Edge(pc=260, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,528 [DEBUG   ] pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=196 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,528 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,528 [DEBUG   ] dispatch pc=174, inst=LOAD_FAST(arg=2, lineno=278)
LINE 263 : 2020-06-05 19:05:01,528 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,528 [DEBUG   ] dispatch pc=176, inst=LOAD_FAST(arg=6, lineno=278)
LINE 263 : 2020-06-05 19:05:01,528 [DEBUG   ] stack ['$weight174.0']
LINE 262 : 2020-06-05 19:05:01,528 [DEBUG   ] dispatch pc=178, inst=LOAD_FAST(arg=9, lineno=278)
LINE 263 : 2020-06-05 19:05:01,528 [DEBUG   ] stack ['$weight174.0', '$weights176.1']
LINE 262 : 2020-06-05 19:05:01,528 [DEBUG   ] dispatch pc=180, inst=BINARY_SUBSCR(arg=None, lineno=278)
LINE 263 : 2020-06-05 19:05:01,528 [DEBUG   ] stack ['$weight174.0', '$weights176.1', '$ic1178.2']
LINE 262 : 2020-06-05 19:05:01,528 [DEBUG   ] dispatch pc=182, inst=COMPARE_OP(arg=0, lineno=278)
LINE 263 : 2020-06-05 19:05:01,529 [DEBUG   ] stack ['$weight174.0', '$180binary_subscr.3']
LINE 262 : 2020-06-05 19:05:01,529 [DEBUG   ] dispatch pc=184, inst=POP_JUMP_IF_FALSE(arg=192, lineno=278)
LINE 263 : 2020-06-05 19:05:01,529 [DEBUG   ] stack ['$182compare_op.4']
LINE 135 : 2020-06-05 19:05:01,529 [DEBUG   ] end state. edges=[Edge(pc=186, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=192, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,529 [DEBUG   ] pending: deque([State(pc_initial=196 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=186 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,529 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,529 [DEBUG   ] dispatch pc=196, inst=LOAD_FAST(arg=2, lineno=283)
LINE 263 : 2020-06-05 19:05:01,529 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,529 [DEBUG   ] dispatch pc=198, inst=LOAD_FAST(arg=6, lineno=283)
LINE 263 : 2020-06-05 19:05:01,530 [DEBUG   ] stack ['$weight196.0']
LINE 262 : 2020-06-05 19:05:01,530 [DEBUG   ] dispatch pc=200, inst=LOAD_FAST(arg=10, lineno=283)
LINE 263 : 2020-06-05 19:05:01,530 [DEBUG   ] stack ['$weight196.0', '$weights198.1']
LINE 262 : 2020-06-05 19:05:01,530 [DEBUG   ] dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=283)
LINE 263 : 2020-06-05 19:05:01,530 [DEBUG   ] stack ['$weight196.0', '$weights198.1', '$ic2200.2']
LINE 262 : 2020-06-05 19:05:01,531 [DEBUG   ] dispatch pc=204, inst=COMPARE_OP(arg=0, lineno=283)
LINE 263 : 2020-06-05 19:05:01,531 [DEBUG   ] stack ['$weight196.0', '$202binary_subscr.3']
LINE 262 : 2020-06-05 19:05:01,531 [DEBUG   ] dispatch pc=206, inst=POP_JUMP_IF_FALSE(arg=214, lineno=283)
LINE 263 : 2020-06-05 19:05:01,531 [DEBUG   ] stack ['$204compare_op.4']
LINE 135 : 2020-06-05 19:05:01,531 [DEBUG   ] end state. edges=[Edge(pc=208, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=214, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,531 [DEBUG   ] pending: deque([State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=186 nstack_initial=0), State(pc_initial=192 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=214 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,531 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,531 [DEBUG   ] dispatch pc=216, inst=LOAD_FAST(arg=6, lineno=288)
LINE 263 : 2020-06-05 19:05:01,531 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,531 [DEBUG   ] dispatch pc=218, inst=LOAD_FAST(arg=11, lineno=288)
LINE 263 : 2020-06-05 19:05:01,531 [DEBUG   ] stack ['$weights216.0']
LINE 262 : 2020-06-05 19:05:01,531 [DEBUG   ] dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=288)
LINE 263 : 2020-06-05 19:05:01,532 [DEBUG   ] stack ['$weights216.0', '$i_swap218.1']
LINE 262 : 2020-06-05 19:05:01,532 [DEBUG   ] dispatch pc=222, inst=LOAD_FAST(arg=6, lineno=288)
LINE 263 : 2020-06-05 19:05:01,532 [DEBUG   ] stack ['$220binary_subscr.2']
LINE 262 : 2020-06-05 19:05:01,532 [DEBUG   ] dispatch pc=224, inst=LOAD_FAST(arg=8, lineno=288)
LINE 263 : 2020-06-05 19:05:01,532 [DEBUG   ] stack ['$220binary_subscr.2', '$weights222.3']
LINE 262 : 2020-06-05 19:05:01,532 [DEBUG   ] dispatch pc=226, inst=STORE_SUBSCR(arg=None, lineno=288)
LINE 263 : 2020-06-05 19:05:01,532 [DEBUG   ] stack ['$220binary_subscr.2', '$weights222.3', '$i224.4']
LINE 262 : 2020-06-05 19:05:01,532 [DEBUG   ] dispatch pc=228, inst=LOAD_FAST(arg=5, lineno=289)
LINE 263 : 2020-06-05 19:05:01,532 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,533 [DEBUG   ] dispatch pc=230, inst=LOAD_FAST(arg=11, lineno=289)
LINE 263 : 2020-06-05 19:05:01,533 [DEBUG   ] stack ['$indices228.5']
LINE 262 : 2020-06-05 19:05:01,533 [DEBUG   ] dispatch pc=232, inst=BINARY_SUBSCR(arg=None, lineno=289)
LINE 263 : 2020-06-05 19:05:01,533 [DEBUG   ] stack ['$indices228.5', '$i_swap230.6']
LINE 262 : 2020-06-05 19:05:01,533 [DEBUG   ] dispatch pc=234, inst=LOAD_FAST(arg=5, lineno=289)
LINE 263 : 2020-06-05 19:05:01,533 [DEBUG   ] stack ['$232binary_subscr.7']
LINE 262 : 2020-06-05 19:05:01,533 [DEBUG   ] dispatch pc=236, inst=LOAD_FAST(arg=8, lineno=289)
LINE 263 : 2020-06-05 19:05:01,533 [DEBUG   ] stack ['$232binary_subscr.7', '$indices234.8']
LINE 262 : 2020-06-05 19:05:01,533 [DEBUG   ] dispatch pc=238, inst=STORE_SUBSCR(arg=None, lineno=289)
LINE 263 : 2020-06-05 19:05:01,533 [DEBUG   ] stack ['$232binary_subscr.7', '$indices234.8', '$i236.9']
LINE 262 : 2020-06-05 19:05:01,533 [DEBUG   ] dispatch pc=240, inst=LOAD_FAST(arg=7, lineno=290)
LINE 263 : 2020-06-05 19:05:01,533 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,533 [DEBUG   ] dispatch pc=242, inst=LOAD_FAST(arg=11, lineno=290)
LINE 263 : 2020-06-05 19:05:01,533 [DEBUG   ] stack ['$is_new240.10']
LINE 262 : 2020-06-05 19:05:01,534 [DEBUG   ] dispatch pc=244, inst=BINARY_SUBSCR(arg=None, lineno=290)
LINE 263 : 2020-06-05 19:05:01,534 [DEBUG   ] stack ['$is_new240.10', '$i_swap242.11']
LINE 262 : 2020-06-05 19:05:01,534 [DEBUG   ] dispatch pc=246, inst=LOAD_FAST(arg=7, lineno=290)
LINE 263 : 2020-06-05 19:05:01,534 [DEBUG   ] stack ['$244binary_subscr.12']
LINE 262 : 2020-06-05 19:05:01,534 [DEBUG   ] dispatch pc=248, inst=LOAD_FAST(arg=8, lineno=290)
LINE 263 : 2020-06-05 19:05:01,534 [DEBUG   ] stack ['$244binary_subscr.12', '$is_new246.13']
LINE 262 : 2020-06-05 19:05:01,534 [DEBUG   ] dispatch pc=250, inst=STORE_SUBSCR(arg=None, lineno=290)
LINE 263 : 2020-06-05 19:05:01,534 [DEBUG   ] stack ['$244binary_subscr.12', '$is_new246.13', '$i248.14']
LINE 262 : 2020-06-05 19:05:01,534 [DEBUG   ] dispatch pc=252, inst=LOAD_FAST(arg=11, lineno=292)
LINE 263 : 2020-06-05 19:05:01,534 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,534 [DEBUG   ] dispatch pc=254, inst=STORE_FAST(arg=8, lineno=292)
LINE 263 : 2020-06-05 19:05:01,534 [DEBUG   ] stack ['$i_swap252.15']
LINE 262 : 2020-06-05 19:05:01,534 [DEBUG   ] dispatch pc=256, inst=JUMP_ABSOLUTE(arg=84, lineno=292)
LINE 263 : 2020-06-05 19:05:01,534 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,534 [DEBUG   ] end state. edges=[Edge(pc=84, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,535 [DEBUG   ] pending: deque([State(pc_initial=260 nstack_initial=0), State(pc_initial=186 nstack_initial=0), State(pc_initial=192 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=214 nstack_initial=0), State(pc_initial=84 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,535 [DEBUG   ] pending: deque([State(pc_initial=186 nstack_initial=0), State(pc_initial=192 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=214 nstack_initial=0), State(pc_initial=84 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,535 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,535 [DEBUG   ] dispatch pc=186, inst=LOAD_FAST(arg=9, lineno=279)
LINE 263 : 2020-06-05 19:05:01,535 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,535 [DEBUG   ] dispatch pc=188, inst=STORE_FAST(arg=11, lineno=279)
LINE 263 : 2020-06-05 19:05:01,535 [DEBUG   ] stack ['$ic1186.0']
LINE 262 : 2020-06-05 19:05:01,535 [DEBUG   ] dispatch pc=190, inst=JUMP_ABSOLUTE(arg=216, lineno=279)
LINE 263 : 2020-06-05 19:05:01,535 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,535 [DEBUG   ] end state. edges=[Edge(pc=216, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,535 [DEBUG   ] pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=208 nstack_initial=0), State(pc_initial=214 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=216 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,535 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,535 [DEBUG   ] dispatch pc=192, inst=BREAK_LOOP(arg=None, lineno=281)
LINE 263 : 2020-06-05 19:05:01,535 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,536 [DEBUG   ] end state. edges=[Edge(pc=260, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,536 [DEBUG   ] pending: deque([State(pc_initial=208 nstack_initial=0), State(pc_initial=214 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,536 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,536 [DEBUG   ] dispatch pc=208, inst=LOAD_FAST(arg=10, lineno=284)
LINE 263 : 2020-06-05 19:05:01,536 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,536 [DEBUG   ] dispatch pc=210, inst=STORE_FAST(arg=11, lineno=284)
LINE 263 : 2020-06-05 19:05:01,536 [DEBUG   ] stack ['$ic2208.0']
LINE 262 : 2020-06-05 19:05:01,536 [DEBUG   ] dispatch pc=212, inst=JUMP_FORWARD(arg=2, lineno=284)
LINE 263 : 2020-06-05 19:05:01,536 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,536 [DEBUG   ] end state. edges=[Edge(pc=216, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,536 [DEBUG   ] pending: deque([State(pc_initial=214 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=216 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,537 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,537 [DEBUG   ] dispatch pc=214, inst=BREAK_LOOP(arg=None, lineno=286)
LINE 263 : 2020-06-05 19:05:01,537 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,537 [DEBUG   ] end state. edges=[Edge(pc=260, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,537 [DEBUG   ] pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,537 [DEBUG   ] pending: deque([State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,537 [DEBUG   ] pending: deque([State(pc_initial=260 nstack_initial=0), State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,537 [DEBUG   ] pending: deque([State(pc_initial=216 nstack_initial=0), State(pc_initial=260 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:01,537 [DEBUG   ] pending: deque([State(pc_initial=260 nstack_initial=0)])
LINE 163 : 2020-06-05 19:05:01,538 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:01,538 [DEBUG   ] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=136 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=154 nstack_initial=0): set(),
             State(pc_initial=158 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=186 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=196 nstack_initial=0): set(),
             State(pc_initial=208 nstack_initial=0): set(),
             State(pc_initial=214 nstack_initial=0): set(),
             State(pc_initial=216 nstack_initial=0): set(),
             State(pc_initial=260 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:01,539 [DEBUG   ] defmap: {}
LINE 190 : 2020-06-05 19:05:01,539 [DEBUG   ] phismap: defaultdict(<class 'set'>, {})
LINE 211 : 2020-06-05 19:05:01,539 [DEBUG   ] changing phismap: defaultdict(<class 'set'>, {})
LINE 220 : 2020-06-05 19:05:01,539 [DEBUG   ] keep phismap: {}
LINE 226 : 2020-06-05 19:05:01,539 [DEBUG   ] new_out: defaultdict(<class 'dict'>, {})
LINE 236 : 2020-06-05 19:05:01,539 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:01,539 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$heap2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$row6.2'}), (8, {'items': ['$const4.1', '$row6.2'], 'res': '$8build_tuple.3'}), (10, {'index': '$8build_tuple.3', 'target': '$heap2.0', 'res': '$10binary_subscr.4'}), (12, {'value': '$10binary_subscr.4'}), (14, {'res': '$heap14.5'}), (16, {'res': '$const16.6'}), (18, {'res': '$row18.7'}), (20, {'items': ['$const16.6', '$row18.7'], 'res': '$20build_tuple.8'}), (22, {'index': '$20build_tuple.8', 'target': '$heap14.5', 'res': '$22binary_subscr.9'}), (24, {'value': '$22binary_subscr.9'}), (26, {'res': '$heap26.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$row30.12'}), (32, {'items': ['$const28.11', '$row30.12'], 'res': '$32build_tuple.13'}), (34, {'index': '$32build_tuple.13', 'target': '$heap26.10', 'res': '$34binary_subscr.14'}), (36, {'value': '$34binary_subscr.14'}), (38, {'res': '$weight38.15'}), (40, {'res': '$weights40.16'}), (42, {'res': '$const42.17'}), (44, {'index': '$const42.17', 'target': '$weights40.16', 'res': '$44binary_subscr.18'}), (46, {'lhs': '$weight38.15', 'rhs': '$44binary_subscr.18', 'res': '$46compare_op.19'}), (48, {'pred': '$46compare_op.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: (), 54: ()})
LINE 147 : 2020-06-05 19:05:01,539 [DEBUG   ] block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}), (52, {'retval': '$const50.0', 'castval': '$52return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:01,539 [DEBUG   ] block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$weight54.0'}), (56, {'res': '$weights56.1'}), (58, {'res': '$const58.2'}), (60, {'target': '$weights56.1', 'index': '$const58.2', 'value': '$weight54.0'}), (62, {'res': '$index62.3'}), (64, {'res': '$indices64.4'}), (66, {'res': '$const66.5'}), (68, {'target': '$indices64.4', 'index': '$const66.5', 'value': '$index62.3'}), (70, {'res': '$flag70.6'}), (72, {'res': '$is_new72.7'}), (74, {'res': '$const74.8'}), (76, {'target': '$is_new72.7', 'index': '$const74.8', 'value': '$flag70.6'}), (78, {'res': '$const78.9'}), (80, {'value': '$const78.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ()})
LINE 147 : 2020-06-05 19:05:01,540 [DEBUG   ] block_infos State(pc_initial=82 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: ()})
LINE 147 : 2020-06-05 19:05:01,540 [DEBUG   ] block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$const84.0'}), (86, {'res': '$i86.1'}), (88, {'lhs': '$const84.0', 'rhs': '$i86.1', 'res': '$88binary_multiply.2'}), (90, {'res': '$const90.3'}), (92, {'lhs': '$88binary_multiply.2', 'rhs': '$const90.3', 'res': '$92binary_add.4'}), (94, {'value': '$92binary_add.4'}), (96, {'res': '$ic196.5'}), (98, {'res': '$const98.6'}), (100, {'lhs': '$ic196.5', 'rhs': '$const98.6', 'res': '$100binary_add.7'}), (102, {'value': '$100binary_add.7'}), (104, {'res': '$ic1104.8'}), (106, {'res': '$heap106.9'}), (108, {'item': '$heap106.9', 'res': '$108load_attr.10'}), (110, {'res': '$const110.11'}), (112, {'index': '$const110.11', 'target': '$108load_attr.10', 'res': '$112binary_subscr.12'}), (114, {'lhs': '$ic1104.8', 'rhs': '$112binary_subscr.12', 'res': '$114compare_op.13'}), (116, {'pred': '$114compare_op.13'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={118: (), 122: ()})
LINE 147 : 2020-06-05 19:05:01,540 [DEBUG   ] block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'end': 260}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={260: ()})
LINE 147 : 2020-06-05 19:05:01,540 [DEBUG   ] block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'res': '$ic2122.0'}), (124, {'res': '$heap124.1'}), (126, {'item': '$heap124.1', 'res': '$126load_attr.2'}), (128, {'res': '$const128.3'}), (130, {'index': '$const128.3', 'target': '$126load_attr.2', 'res': '$130binary_subscr.4'}), (132, {'lhs': '$ic2122.0', 'rhs': '$130binary_subscr.4', 'res': '$132compare_op.5'}), (134, {'pred': '$132compare_op.5'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={136: (), 158: ()})
LINE 147 : 2020-06-05 19:05:01,540 [DEBUG   ] block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$weights136.0'}), (138, {'res': '$ic1138.1'}), (140, {'index': '$ic1138.1', 'target': '$weights136.0', 'res': '$140binary_subscr.2'}), (142, {'res': '$weight142.3'}), (144, {'lhs': '$140binary_subscr.2', 'rhs': '$weight142.3', 'res': '$144compare_op.4'}), (146, {'pred': '$144compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={148: (), 154: ()})
LINE 147 : 2020-06-05 19:05:01,540 [DEBUG   ] block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$ic1148.0'}), (150, {'value': '$ic1148.0'}), (152, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={216: ()})
LINE 147 : 2020-06-05 19:05:01,540 [DEBUG   ] block_infos State(pc_initial=154 nstack_initial=0):
AdaptBlockInfo(insts=((154, {'end': 260}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={260: ()})
LINE 147 : 2020-06-05 19:05:01,541 [DEBUG   ] block_infos State(pc_initial=158 nstack_initial=0):
AdaptBlockInfo(insts=((158, {'res': '$weights158.0'}), (160, {'res': '$ic1160.1'}), (162, {'index': '$ic1160.1', 'target': '$weights158.0', 'res': '$162binary_subscr.2'}), (164, {'res': '$weights164.3'}), (166, {'res': '$ic2166.4'}), (168, {'index': '$ic2166.4', 'target': '$weights164.3', 'res': '$168binary_subscr.5'}), (170, {'lhs': '$162binary_subscr.2', 'rhs': '$168binary_subscr.5', 'res': '$170compare_op.6'}), (172, {'pred': '$170compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={174: (), 196: ()})
LINE 147 : 2020-06-05 19:05:01,541 [DEBUG   ] block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=((174, {'res': '$weight174.0'}), (176, {'res': '$weights176.1'}), (178, {'res': '$ic1178.2'}), (180, {'index': '$ic1178.2', 'target': '$weights176.1', 'res': '$180binary_subscr.3'}), (182, {'lhs': '$weight174.0', 'rhs': '$180binary_subscr.3', 'res': '$182compare_op.4'}), (184, {'pred': '$182compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={186: (), 192: ()})
LINE 147 : 2020-06-05 19:05:01,541 [DEBUG   ] block_infos State(pc_initial=186 nstack_initial=0):
AdaptBlockInfo(insts=((186, {'res': '$ic1186.0'}), (188, {'value': '$ic1186.0'}), (190, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={216: ()})
LINE 147 : 2020-06-05 19:05:01,541 [DEBUG   ] block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'end': 260}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={260: ()})
LINE 147 : 2020-06-05 19:05:01,541 [DEBUG   ] block_infos State(pc_initial=196 nstack_initial=0):
AdaptBlockInfo(insts=((196, {'res': '$weight196.0'}), (198, {'res': '$weights198.1'}), (200, {'res': '$ic2200.2'}), (202, {'index': '$ic2200.2', 'target': '$weights198.1', 'res': '$202binary_subscr.3'}), (204, {'lhs': '$weight196.0', 'rhs': '$202binary_subscr.3', 'res': '$204compare_op.4'}), (206, {'pred': '$204compare_op.4'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={208: (), 214: ()})
LINE 147 : 2020-06-05 19:05:01,542 [DEBUG   ] block_infos State(pc_initial=208 nstack_initial=0):
AdaptBlockInfo(insts=((208, {'res': '$ic2208.0'}), (210, {'value': '$ic2208.0'}), (212, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={216: ()})
LINE 147 : 2020-06-05 19:05:01,542 [DEBUG   ] block_infos State(pc_initial=214 nstack_initial=0):
AdaptBlockInfo(insts=((214, {'end': 260}),), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={260: ()})
LINE 147 : 2020-06-05 19:05:01,542 [DEBUG   ] block_infos State(pc_initial=216 nstack_initial=0):
AdaptBlockInfo(insts=((216, {'res': '$weights216.0'}), (218, {'res': '$i_swap218.1'}), (220, {'index': '$i_swap218.1', 'target': '$weights216.0', 'res': '$220binary_subscr.2'}), (222, {'res': '$weights222.3'}), (224, {'res': '$i224.4'}), (226, {'target': '$weights222.3', 'index': '$i224.4', 'value': '$220binary_subscr.2'}), (228, {'res': '$indices228.5'}), (230, {'res': '$i_swap230.6'}), (232, {'index': '$i_swap230.6', 'target': '$indices228.5', 'res': '$232binary_subscr.7'}), (234, {'res': '$indices234.8'}), (236, {'res': '$i236.9'}), (238, {'target': '$indices234.8', 'index': '$i236.9', 'value': '$232binary_subscr.7'}), (240, {'res': '$is_new240.10'}), (242, {'res': '$i_swap242.11'}), (244, {'index': '$i_swap242.11', 'target': '$is_new240.10', 'res': '$244binary_subscr.12'}), (246, {'res': '$is_new246.13'}), (248, {'res': '$i248.14'}), (250, {'target': '$is_new246.13', 'index': '$i248.14', 'value': '$244binary_subscr.12'}), (252, {'res': '$i_swap252.15'}), (254, {'value': '$i_swap252.15'}), (256, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 260, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={84: ()})
LINE 147 : 2020-06-05 19:05:01,542 [DEBUG   ] block_infos State(pc_initial=260 nstack_initial=0):
AdaptBlockInfo(insts=((260, {'res': '$weight260.0'}), (262, {'res': '$weights262.1'}), (264, {'res': '$i264.2'}), (266, {'target': '$weights262.1', 'index': '$i264.2', 'value': '$weight260.0'}), (268, {'res': '$index268.3'}), (270, {'res': '$indices270.4'}), (272, {'res': '$i272.5'}), (274, {'target': '$indices270.4', 'index': '$i272.5', 'value': '$index268.3'}), (276, {'res': '$flag276.6'}), (278, {'res': '$is_new278.7'}), (280, {'res': '$i280.8'}), (282, {'target': '$is_new278.7', 'index': '$i280.8', 'value': '$flag276.6'}), (284, {'res': '$const284.9'}), (286, {'retval': '$const284.9', 'castval': '$286return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:01,545 [DEBUG   ] label 0:
    heap = arg(0, name=heap)                 ['heap']
    row = arg(1, name=row)                   ['row']
    weight = arg(2, name=weight)             ['weight']
    index = arg(3, name=index)               ['index']
    flag = arg(4, name=flag)                 ['flag']
    $const4.1 = const(int, 0)                ['$const4.1']
    $8build_tuple.3 = build_tuple(items=[Var($const4.1, utils.py:252), Var(row, utils.py:252)]) ['$8build_tuple.3', '$const4.1', 'row']
    $10binary_subscr.4 = getitem(value=heap, index=$8build_tuple.3) ['$10binary_subscr.4', '$8build_tuple.3', 'heap']
    indices = $10binary_subscr.4             ['$10binary_subscr.4', 'indices']
    $const16.6 = const(int, 1)               ['$const16.6']
    $20build_tuple.8 = build_tuple(items=[Var($const16.6, utils.py:253), Var(row, utils.py:252)]) ['$20build_tuple.8', '$const16.6', 'row']
    $22binary_subscr.9 = getitem(value=heap, index=$20build_tuple.8) ['$20build_tuple.8', '$22binary_subscr.9', 'heap']
    weights = $22binary_subscr.9             ['$22binary_subscr.9', 'weights']
    $const28.11 = const(int, 2)              ['$const28.11']
    $32build_tuple.13 = build_tuple(items=[Var($const28.11, utils.py:254), Var(row, utils.py:252)]) ['$32build_tuple.13', '$const28.11', 'row']
    $34binary_subscr.14 = getitem(value=heap, index=$32build_tuple.13) ['$32build_tuple.13', '$34binary_subscr.14', 'heap']
    is_new = $34binary_subscr.14             ['$34binary_subscr.14', 'is_new']
    $const42.17 = const(int, 0)              ['$const42.17']
    $44binary_subscr.18 = getitem(value=weights, index=$const42.17) ['$44binary_subscr.18', '$const42.17', 'weights']
    $46compare_op.19 = weight >= $44binary_subscr.18 ['$44binary_subscr.18', '$46compare_op.19', 'weight']
    branch $46compare_op.19, 50, 54          ['$46compare_op.19']
label 50:
    $const50.0 = const(int, 0)               ['$const50.0']
    $52return_value.1 = cast(value=$const50.0) ['$52return_value.1', '$const50.0']
    return $52return_value.1                 ['$52return_value.1']
label 54:
    $const58.2 = const(int, 0)               ['$const58.2']
    weights[$const58.2] = weight             ['$const58.2', 'weight', 'weights']
    $const66.5 = const(int, 0)               ['$const66.5']
    indices[$const66.5] = index              ['$const66.5', 'index', 'indices']
    $const74.8 = const(int, 0)               ['$const74.8']
    is_new[$const74.8] = flag                ['$const74.8', 'flag', 'is_new']
    $const78.9 = const(int, 0)               ['$const78.9']
    i = $const78.9                           ['$const78.9', 'i']
    jump 82                                  []
label 82:
    jump 84                                  []
label 84:
    $const84.0 = const(int, 2)               ['$const84.0']
    $88binary_multiply.2 = $const84.0 * i    ['$88binary_multiply.2', '$const84.0', 'i']
    $const90.3 = const(int, 1)               ['$const90.3']
    $92binary_add.4 = $88binary_multiply.2 + $const90.3 ['$88binary_multiply.2', '$92binary_add.4', '$const90.3']
    ic1 = $92binary_add.4                    ['$92binary_add.4', 'ic1']
    $const98.6 = const(int, 1)               ['$const98.6']
    $100binary_add.7 = ic1 + $const98.6      ['$100binary_add.7', '$const98.6', 'ic1']
    ic2 = $100binary_add.7                   ['$100binary_add.7', 'ic2']
    $108load_attr.10 = getattr(value=heap, attr=shape) ['$108load_attr.10', 'heap']
    $const110.11 = const(int, 2)             ['$const110.11']
    $112binary_subscr.12 = getitem(value=$108load_attr.10, index=$const110.11) ['$108load_attr.10', '$112binary_subscr.12', '$const110.11']
    $114compare_op.13 = ic1 >= $112binary_subscr.12 ['$112binary_subscr.12', '$114compare_op.13', 'ic1']
    branch $114compare_op.13, 118, 122       ['$114compare_op.13']
label 118:
    jump 260                                 []
label 122:
    $126load_attr.2 = getattr(value=heap, attr=shape) ['$126load_attr.2', 'heap']
    $const128.3 = const(int, 2)              ['$const128.3']
    $130binary_subscr.4 = getitem(value=$126load_attr.2, index=$const128.3) ['$126load_attr.2', '$130binary_subscr.4', '$const128.3']
    $132compare_op.5 = ic2 >= $130binary_subscr.4 ['$130binary_subscr.4', '$132compare_op.5', 'ic2']
    branch $132compare_op.5, 136, 158        ['$132compare_op.5']
label 136:
    $140binary_subscr.2 = getitem(value=weights, index=ic1) ['$140binary_subscr.2', 'ic1', 'weights']
    $144compare_op.4 = $140binary_subscr.2 > weight ['$140binary_subscr.2', '$144compare_op.4', 'weight']
    branch $144compare_op.4, 148, 154        ['$144compare_op.4']
label 148:
    i_swap = ic1                             ['i_swap', 'ic1']
    jump 216                                 []
label 154:
    jump 260                                 []
label 158:
    $162binary_subscr.2 = getitem(value=weights, index=ic1) ['$162binary_subscr.2', 'ic1', 'weights']
    $168binary_subscr.5 = getitem(value=weights, index=ic2) ['$168binary_subscr.5', 'ic2', 'weights']
    $170compare_op.6 = $162binary_subscr.2 >= $168binary_subscr.5 ['$162binary_subscr.2', '$168binary_subscr.5', '$170compare_op.6']
    branch $170compare_op.6, 174, 196        ['$170compare_op.6']
label 174:
    $180binary_subscr.3 = getitem(value=weights, index=ic1) ['$180binary_subscr.3', 'ic1', 'weights']
    $182compare_op.4 = weight < $180binary_subscr.3 ['$180binary_subscr.3', '$182compare_op.4', 'weight']
    branch $182compare_op.4, 186, 192        ['$182compare_op.4']
label 186:
    i_swap = ic1                             ['i_swap', 'ic1']
    jump 216                                 []
label 192:
    jump 260                                 []
label 196:
    $202binary_subscr.3 = getitem(value=weights, index=ic2) ['$202binary_subscr.3', 'ic2', 'weights']
    $204compare_op.4 = weight < $202binary_subscr.3 ['$202binary_subscr.3', '$204compare_op.4', 'weight']
    branch $204compare_op.4, 208, 214        ['$204compare_op.4']
label 208:
    i_swap = ic2                             ['i_swap', 'ic2']
    jump 216                                 []
label 214:
    jump 260                                 []
label 216:
    $220binary_subscr.2 = getitem(value=weights, index=i_swap) ['$220binary_subscr.2', 'i_swap', 'weights']
    weights[i] = $220binary_subscr.2         ['$220binary_subscr.2', 'i', 'weights']
    $232binary_subscr.7 = getitem(value=indices, index=i_swap) ['$232binary_subscr.7', 'i_swap', 'indices']
    indices[i] = $232binary_subscr.7         ['$232binary_subscr.7', 'i', 'indices']
    $244binary_subscr.12 = getitem(value=is_new, index=i_swap) ['$244binary_subscr.12', 'i_swap', 'is_new']
    is_new[i] = $244binary_subscr.12         ['$244binary_subscr.12', 'i', 'is_new']
    i = i_swap                               ['i', 'i_swap']
    jump 84                                  []
label 260:
    weights[i] = weight                      ['i', 'weight', 'weights']
    indices[i] = index                       ['i', 'index', 'indices']
    is_new[i] = flag                         ['flag', 'i', 'is_new']
    $const284.9 = const(int, 1)              ['$const284.9']
    $286return_value.10 = cast(value=$const284.9) ['$286return_value.10', '$const284.9']
    return $286return_value.10               ['$286return_value.10']

LINE 74  : 2020-06-05 19:05:01,754 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=389)
           2	LOAD_FAST(arg=0, lineno=389)
           4	LOAD_CONST(arg=1, lineno=389)
           6	LOAD_FAST(arg=1, lineno=389)
           8	BUILD_TUPLE(arg=2, lineno=389)
          10	BINARY_SUBSCR(arg=None, lineno=389)
          12	STORE_FAST(arg=2, lineno=389)
          14	LOAD_FAST(arg=0, lineno=390)
          16	LOAD_CONST(arg=2, lineno=390)
          18	LOAD_FAST(arg=1, lineno=390)
          20	BUILD_TUPLE(arg=2, lineno=390)
          22	BINARY_SUBSCR(arg=None, lineno=390)
          24	STORE_FAST(arg=3, lineno=390)
          26	LOAD_FAST(arg=0, lineno=391)
          28	LOAD_CONST(arg=3, lineno=391)
          30	LOAD_FAST(arg=1, lineno=391)
          32	BUILD_TUPLE(arg=2, lineno=391)
          34	BINARY_SUBSCR(arg=None, lineno=391)
          36	STORE_FAST(arg=4, lineno=391)
          38	LOAD_GLOBAL(arg=0, lineno=393)
          40	LOAD_ATTR(arg=1, lineno=393)
          42	STORE_FAST(arg=5, lineno=393)
          44	LOAD_CONST(arg=4, lineno=394)
          46	STORE_FAST(arg=6, lineno=394)
          48	SETUP_LOOP(arg=58, lineno=396)
          50	LOAD_GLOBAL(arg=2, lineno=396)
          52	LOAD_FAST(arg=2, lineno=396)
          54	LOAD_ATTR(arg=3, lineno=396)
          56	LOAD_CONST(arg=1, lineno=396)
          58	BINARY_SUBSCR(arg=None, lineno=396)
          60	CALL_FUNCTION(arg=1, lineno=396)
          62	GET_ITER(arg=None, lineno=396)
>         64	FOR_ITER(arg=40, lineno=396)
          66	STORE_FAST(arg=7, lineno=396)
          68	LOAD_FAST(arg=4, lineno=397)
          70	LOAD_FAST(arg=7, lineno=397)
          72	BINARY_SUBSCR(arg=None, lineno=397)
          74	LOAD_CONST(arg=2, lineno=397)
          76	COMPARE_OP(arg=2, lineno=397)
          78	POP_JUMP_IF_FALSE(arg=64, lineno=397)
          80	LOAD_FAST(arg=3, lineno=397)
          82	LOAD_FAST(arg=7, lineno=397)
          84	BINARY_SUBSCR(arg=None, lineno=397)
          86	LOAD_FAST(arg=5, lineno=397)
          88	COMPARE_OP(arg=0, lineno=397)
          90	POP_JUMP_IF_FALSE(arg=64, lineno=397)
          92	LOAD_FAST(arg=3, lineno=398)
          94	LOAD_FAST(arg=7, lineno=398)
          96	BINARY_SUBSCR(arg=None, lineno=398)
          98	STORE_FAST(arg=5, lineno=398)
         100	LOAD_FAST(arg=7, lineno=399)
         102	STORE_FAST(arg=6, lineno=399)
         104	JUMP_ABSOLUTE(arg=64, lineno=399)
>        106	POP_BLOCK(arg=None, lineno=399)
>        108	LOAD_FAST(arg=6, lineno=401)
         110	LOAD_CONST(arg=1, lineno=401)
         112	COMPARE_OP(arg=5, lineno=401)
         114	POP_JUMP_IF_FALSE(arg=136, lineno=401)
         116	LOAD_CONST(arg=5, lineno=402)
         118	LOAD_FAST(arg=4, lineno=402)
         120	LOAD_FAST(arg=6, lineno=402)
         122	STORE_SUBSCR(arg=None, lineno=402)
         124	LOAD_GLOBAL(arg=4, lineno=403)
         126	LOAD_FAST(arg=2, lineno=403)
         128	LOAD_FAST(arg=6, lineno=403)
         130	BINARY_SUBSCR(arg=None, lineno=403)
         132	CALL_FUNCTION(arg=1, lineno=403)
         134	RETURN_VALUE(arg=None, lineno=403)
>        136	LOAD_CONST(arg=4, lineno=405)
         138	RETURN_VALUE(arg=None, lineno=405)
         140	LOAD_CONST(arg=6, lineno=405)
         142	RETURN_VALUE(arg=None, lineno=405)
LINE 100 : 2020-06-05 19:05:01,754 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,754 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,754 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=389)
LINE 263 : 2020-06-05 19:05:01,754 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,754 [DEBUG   ] dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=389)
LINE 263 : 2020-06-05 19:05:01,754 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,754 [DEBUG   ] dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=389)
LINE 263 : 2020-06-05 19:05:01,754 [DEBUG   ] stack ['$heap2.0']
LINE 262 : 2020-06-05 19:05:01,754 [DEBUG   ] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=389)
LINE 263 : 2020-06-05 19:05:01,755 [DEBUG   ] stack ['$heap2.0', '$const4.1']
LINE 262 : 2020-06-05 19:05:01,755 [DEBUG   ] dispatch pc=8, inst=BUILD_TUPLE(arg=2, lineno=389)
LINE 263 : 2020-06-05 19:05:01,755 [DEBUG   ] stack ['$heap2.0', '$const4.1', '$row6.2']
LINE 262 : 2020-06-05 19:05:01,755 [DEBUG   ] dispatch pc=10, inst=BINARY_SUBSCR(arg=None, lineno=389)
LINE 263 : 2020-06-05 19:05:01,755 [DEBUG   ] stack ['$heap2.0', '$8build_tuple.3']
LINE 262 : 2020-06-05 19:05:01,755 [DEBUG   ] dispatch pc=12, inst=STORE_FAST(arg=2, lineno=389)
LINE 263 : 2020-06-05 19:05:01,755 [DEBUG   ] stack ['$10binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,755 [DEBUG   ] dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=390)
LINE 263 : 2020-06-05 19:05:01,755 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,755 [DEBUG   ] dispatch pc=16, inst=LOAD_CONST(arg=2, lineno=390)
LINE 263 : 2020-06-05 19:05:01,755 [DEBUG   ] stack ['$heap14.5']
LINE 262 : 2020-06-05 19:05:01,756 [DEBUG   ] dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=390)
LINE 263 : 2020-06-05 19:05:01,756 [DEBUG   ] stack ['$heap14.5', '$const16.6']
LINE 262 : 2020-06-05 19:05:01,756 [DEBUG   ] dispatch pc=20, inst=BUILD_TUPLE(arg=2, lineno=390)
LINE 263 : 2020-06-05 19:05:01,756 [DEBUG   ] stack ['$heap14.5', '$const16.6', '$row18.7']
LINE 262 : 2020-06-05 19:05:01,756 [DEBUG   ] dispatch pc=22, inst=BINARY_SUBSCR(arg=None, lineno=390)
LINE 263 : 2020-06-05 19:05:01,757 [DEBUG   ] stack ['$heap14.5', '$20build_tuple.8']
LINE 262 : 2020-06-05 19:05:01,758 [DEBUG   ] dispatch pc=24, inst=STORE_FAST(arg=3, lineno=390)
LINE 263 : 2020-06-05 19:05:01,758 [DEBUG   ] stack ['$22binary_subscr.9']
LINE 262 : 2020-06-05 19:05:01,759 [DEBUG   ] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=391)
LINE 263 : 2020-06-05 19:05:01,759 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,759 [DEBUG   ] dispatch pc=28, inst=LOAD_CONST(arg=3, lineno=391)
LINE 263 : 2020-06-05 19:05:01,759 [DEBUG   ] stack ['$heap26.10']
LINE 262 : 2020-06-05 19:05:01,759 [DEBUG   ] dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=391)
LINE 263 : 2020-06-05 19:05:01,760 [DEBUG   ] stack ['$heap26.10', '$const28.11']
LINE 262 : 2020-06-05 19:05:01,760 [DEBUG   ] dispatch pc=32, inst=BUILD_TUPLE(arg=2, lineno=391)
LINE 263 : 2020-06-05 19:05:01,760 [DEBUG   ] stack ['$heap26.10', '$const28.11', '$row30.12']
LINE 262 : 2020-06-05 19:05:01,760 [DEBUG   ] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=391)
LINE 263 : 2020-06-05 19:05:01,760 [DEBUG   ] stack ['$heap26.10', '$32build_tuple.13']
LINE 262 : 2020-06-05 19:05:01,760 [DEBUG   ] dispatch pc=36, inst=STORE_FAST(arg=4, lineno=391)
LINE 263 : 2020-06-05 19:05:01,760 [DEBUG   ] stack ['$34binary_subscr.14']
LINE 262 : 2020-06-05 19:05:01,760 [DEBUG   ] dispatch pc=38, inst=LOAD_GLOBAL(arg=0, lineno=393)
LINE 263 : 2020-06-05 19:05:01,760 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,761 [DEBUG   ] dispatch pc=40, inst=LOAD_ATTR(arg=1, lineno=393)
LINE 263 : 2020-06-05 19:05:01,761 [DEBUG   ] stack ['$38load_global.15']
LINE 262 : 2020-06-05 19:05:01,761 [DEBUG   ] dispatch pc=42, inst=STORE_FAST(arg=5, lineno=393)
LINE 263 : 2020-06-05 19:05:01,761 [DEBUG   ] stack ['$40load_attr.16']
LINE 262 : 2020-06-05 19:05:01,761 [DEBUG   ] dispatch pc=44, inst=LOAD_CONST(arg=4, lineno=394)
LINE 263 : 2020-06-05 19:05:01,761 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,761 [DEBUG   ] dispatch pc=46, inst=STORE_FAST(arg=6, lineno=394)
LINE 263 : 2020-06-05 19:05:01,761 [DEBUG   ] stack ['$const44.17']
LINE 135 : 2020-06-05 19:05:01,761 [DEBUG   ] end state. edges=[Edge(pc=48, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,761 [DEBUG   ] pending: deque([State(pc_initial=48 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,762 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,762 [DEBUG   ] dispatch pc=48, inst=SETUP_LOOP(arg=58, lineno=396)
LINE 263 : 2020-06-05 19:05:01,762 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,762 [DEBUG   ] dispatch pc=50, inst=LOAD_GLOBAL(arg=2, lineno=396)
LINE 263 : 2020-06-05 19:05:01,762 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,762 [DEBUG   ] dispatch pc=52, inst=LOAD_FAST(arg=2, lineno=396)
LINE 263 : 2020-06-05 19:05:01,762 [DEBUG   ] stack ['$50load_global.0']
LINE 262 : 2020-06-05 19:05:01,762 [DEBUG   ] dispatch pc=54, inst=LOAD_ATTR(arg=3, lineno=396)
LINE 263 : 2020-06-05 19:05:01,762 [DEBUG   ] stack ['$50load_global.0', '$ind52.1']
LINE 262 : 2020-06-05 19:05:01,763 [DEBUG   ] dispatch pc=56, inst=LOAD_CONST(arg=1, lineno=396)
LINE 263 : 2020-06-05 19:05:01,763 [DEBUG   ] stack ['$50load_global.0', '$54load_attr.2']
LINE 262 : 2020-06-05 19:05:01,763 [DEBUG   ] dispatch pc=58, inst=BINARY_SUBSCR(arg=None, lineno=396)
LINE 263 : 2020-06-05 19:05:01,763 [DEBUG   ] stack ['$50load_global.0', '$54load_attr.2', '$const56.3']
LINE 262 : 2020-06-05 19:05:01,763 [DEBUG   ] dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=396)
LINE 263 : 2020-06-05 19:05:01,763 [DEBUG   ] stack ['$50load_global.0', '$58binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,763 [DEBUG   ] dispatch pc=62, inst=GET_ITER(arg=None, lineno=396)
LINE 263 : 2020-06-05 19:05:01,763 [DEBUG   ] stack ['$60call_function.5']
LINE 135 : 2020-06-05 19:05:01,764 [DEBUG   ] end state. edges=[Edge(pc=64, stack=('$62get_iter.6',), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,764 [DEBUG   ] pending: deque([State(pc_initial=64 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,764 [DEBUG   ] stack: ['$phi64.0']
LINE 262 : 2020-06-05 19:05:01,764 [DEBUG   ] dispatch pc=64, inst=FOR_ITER(arg=40, lineno=396)
LINE 263 : 2020-06-05 19:05:01,764 [DEBUG   ] stack ['$phi64.0']
LINE 135 : 2020-06-05 19:05:01,765 [DEBUG   ] end state. edges=[Edge(pc=106, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=66, stack=('$phi64.0', '$64for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,765 [DEBUG   ] pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=66 nstack_initial=2)])
LINE 103 : 2020-06-05 19:05:01,765 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,765 [DEBUG   ] dispatch pc=106, inst=POP_BLOCK(arg=None, lineno=399)
LINE 263 : 2020-06-05 19:05:01,765 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,765 [DEBUG   ] end state. edges=[Edge(pc=108, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,766 [DEBUG   ] pending: deque([State(pc_initial=66 nstack_initial=2), State(pc_initial=108 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,766 [DEBUG   ] stack: ['$phi66.0', '$phi66.1']
LINE 262 : 2020-06-05 19:05:01,766 [DEBUG   ] dispatch pc=66, inst=STORE_FAST(arg=7, lineno=396)
LINE 263 : 2020-06-05 19:05:01,766 [DEBUG   ] stack ['$phi66.0', '$phi66.1']
LINE 262 : 2020-06-05 19:05:01,766 [DEBUG   ] dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=397)
LINE 263 : 2020-06-05 19:05:01,766 [DEBUG   ] stack ['$phi66.0']
LINE 262 : 2020-06-05 19:05:01,766 [DEBUG   ] dispatch pc=70, inst=LOAD_FAST(arg=7, lineno=397)
LINE 263 : 2020-06-05 19:05:01,766 [DEBUG   ] stack ['$phi66.0', '$flag68.2']
LINE 262 : 2020-06-05 19:05:01,766 [DEBUG   ] dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=397)
LINE 263 : 2020-06-05 19:05:01,766 [DEBUG   ] stack ['$phi66.0', '$flag68.2', '$i70.3']
LINE 262 : 2020-06-05 19:05:01,766 [DEBUG   ] dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=397)
LINE 263 : 2020-06-05 19:05:01,766 [DEBUG   ] stack ['$phi66.0', '$72binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,767 [DEBUG   ] dispatch pc=76, inst=COMPARE_OP(arg=2, lineno=397)
LINE 263 : 2020-06-05 19:05:01,767 [DEBUG   ] stack ['$phi66.0', '$72binary_subscr.4', '$const74.5']
LINE 262 : 2020-06-05 19:05:01,767 [DEBUG   ] dispatch pc=78, inst=POP_JUMP_IF_FALSE(arg=64, lineno=397)
LINE 263 : 2020-06-05 19:05:01,767 [DEBUG   ] stack ['$phi66.0', '$76compare_op.6']
LINE 135 : 2020-06-05 19:05:01,767 [DEBUG   ] end state. edges=[Edge(pc=80, stack=('$phi66.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=64, stack=('$phi66.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,767 [DEBUG   ] pending: deque([State(pc_initial=108 nstack_initial=0), State(pc_initial=80 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,767 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,767 [DEBUG   ] dispatch pc=108, inst=LOAD_FAST(arg=6, lineno=401)
LINE 263 : 2020-06-05 19:05:01,767 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,767 [DEBUG   ] dispatch pc=110, inst=LOAD_CONST(arg=1, lineno=401)
LINE 263 : 2020-06-05 19:05:01,767 [DEBUG   ] stack ['$result_index108.0']
LINE 262 : 2020-06-05 19:05:01,767 [DEBUG   ] dispatch pc=112, inst=COMPARE_OP(arg=5, lineno=401)
LINE 263 : 2020-06-05 19:05:01,767 [DEBUG   ] stack ['$result_index108.0', '$const110.1']
LINE 262 : 2020-06-05 19:05:01,768 [DEBUG   ] dispatch pc=114, inst=POP_JUMP_IF_FALSE(arg=136, lineno=401)
LINE 263 : 2020-06-05 19:05:01,768 [DEBUG   ] stack ['$112compare_op.2']
LINE 135 : 2020-06-05 19:05:01,768 [DEBUG   ] end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=136, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,768 [DEBUG   ] pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=64 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=136 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,768 [DEBUG   ] stack: ['$phi80.0']
LINE 262 : 2020-06-05 19:05:01,768 [DEBUG   ] dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=397)
LINE 263 : 2020-06-05 19:05:01,768 [DEBUG   ] stack ['$phi80.0']
LINE 262 : 2020-06-05 19:05:01,768 [DEBUG   ] dispatch pc=82, inst=LOAD_FAST(arg=7, lineno=397)
LINE 263 : 2020-06-05 19:05:01,768 [DEBUG   ] stack ['$phi80.0', '$dist80.1']
LINE 262 : 2020-06-05 19:05:01,768 [DEBUG   ] dispatch pc=84, inst=BINARY_SUBSCR(arg=None, lineno=397)
LINE 263 : 2020-06-05 19:05:01,768 [DEBUG   ] stack ['$phi80.0', '$dist80.1', '$i82.2']
LINE 262 : 2020-06-05 19:05:01,768 [DEBUG   ] dispatch pc=86, inst=LOAD_FAST(arg=5, lineno=397)
LINE 263 : 2020-06-05 19:05:01,768 [DEBUG   ] stack ['$phi80.0', '$84binary_subscr.3']
LINE 262 : 2020-06-05 19:05:01,768 [DEBUG   ] dispatch pc=88, inst=COMPARE_OP(arg=0, lineno=397)
LINE 263 : 2020-06-05 19:05:01,769 [DEBUG   ] stack ['$phi80.0', '$84binary_subscr.3', '$min_dist86.4']
LINE 262 : 2020-06-05 19:05:01,769 [DEBUG   ] dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=64, lineno=397)
LINE 263 : 2020-06-05 19:05:01,769 [DEBUG   ] stack ['$phi80.0', '$88compare_op.5']
LINE 135 : 2020-06-05 19:05:01,769 [DEBUG   ] end state. edges=[Edge(pc=92, stack=('$phi80.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=64, stack=('$phi80.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,769 [DEBUG   ] pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=136 nstack_initial=0), State(pc_initial=92 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
LINE 100 : 2020-06-05 19:05:01,769 [DEBUG   ] pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=136 nstack_initial=0), State(pc_initial=92 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,769 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,769 [DEBUG   ] dispatch pc=116, inst=LOAD_CONST(arg=5, lineno=402)
LINE 263 : 2020-06-05 19:05:01,769 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,769 [DEBUG   ] dispatch pc=118, inst=LOAD_FAST(arg=4, lineno=402)
LINE 263 : 2020-06-05 19:05:01,769 [DEBUG   ] stack ['$const116.0']
LINE 262 : 2020-06-05 19:05:01,770 [DEBUG   ] dispatch pc=120, inst=LOAD_FAST(arg=6, lineno=402)
LINE 263 : 2020-06-05 19:05:01,770 [DEBUG   ] stack ['$const116.0', '$flag118.1']
LINE 262 : 2020-06-05 19:05:01,770 [DEBUG   ] dispatch pc=122, inst=STORE_SUBSCR(arg=None, lineno=402)
LINE 263 : 2020-06-05 19:05:01,770 [DEBUG   ] stack ['$const116.0', '$flag118.1', '$result_index120.2']
LINE 262 : 2020-06-05 19:05:01,770 [DEBUG   ] dispatch pc=124, inst=LOAD_GLOBAL(arg=4, lineno=403)
LINE 263 : 2020-06-05 19:05:01,770 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,770 [DEBUG   ] dispatch pc=126, inst=LOAD_FAST(arg=2, lineno=403)
LINE 263 : 2020-06-05 19:05:01,770 [DEBUG   ] stack ['$124load_global.3']
LINE 262 : 2020-06-05 19:05:01,770 [DEBUG   ] dispatch pc=128, inst=LOAD_FAST(arg=6, lineno=403)
LINE 263 : 2020-06-05 19:05:01,770 [DEBUG   ] stack ['$124load_global.3', '$ind126.4']
LINE 262 : 2020-06-05 19:05:01,770 [DEBUG   ] dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=403)
LINE 263 : 2020-06-05 19:05:01,770 [DEBUG   ] stack ['$124load_global.3', '$ind126.4', '$result_index128.5']
LINE 262 : 2020-06-05 19:05:01,771 [DEBUG   ] dispatch pc=132, inst=CALL_FUNCTION(arg=1, lineno=403)
LINE 263 : 2020-06-05 19:05:01,771 [DEBUG   ] stack ['$124load_global.3', '$130binary_subscr.6']
LINE 262 : 2020-06-05 19:05:01,771 [DEBUG   ] dispatch pc=134, inst=RETURN_VALUE(arg=None, lineno=403)
LINE 263 : 2020-06-05 19:05:01,771 [DEBUG   ] stack ['$132call_function.7']
LINE 135 : 2020-06-05 19:05:01,771 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,771 [DEBUG   ] pending: deque([State(pc_initial=136 nstack_initial=0), State(pc_initial=92 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,771 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,771 [DEBUG   ] dispatch pc=136, inst=LOAD_CONST(arg=4, lineno=405)
LINE 263 : 2020-06-05 19:05:01,771 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,771 [DEBUG   ] dispatch pc=138, inst=RETURN_VALUE(arg=None, lineno=405)
LINE 263 : 2020-06-05 19:05:01,771 [DEBUG   ] stack ['$const136.0']
LINE 135 : 2020-06-05 19:05:01,771 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,772 [DEBUG   ] pending: deque([State(pc_initial=92 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,772 [DEBUG   ] stack: ['$phi92.0']
LINE 262 : 2020-06-05 19:05:01,772 [DEBUG   ] dispatch pc=92, inst=LOAD_FAST(arg=3, lineno=398)
LINE 263 : 2020-06-05 19:05:01,772 [DEBUG   ] stack ['$phi92.0']
LINE 262 : 2020-06-05 19:05:01,772 [DEBUG   ] dispatch pc=94, inst=LOAD_FAST(arg=7, lineno=398)
LINE 263 : 2020-06-05 19:05:01,772 [DEBUG   ] stack ['$phi92.0', '$dist92.1']
LINE 262 : 2020-06-05 19:05:01,773 [DEBUG   ] dispatch pc=96, inst=BINARY_SUBSCR(arg=None, lineno=398)
LINE 263 : 2020-06-05 19:05:01,774 [DEBUG   ] stack ['$phi92.0', '$dist92.1', '$i94.2']
LINE 262 : 2020-06-05 19:05:01,774 [DEBUG   ] dispatch pc=98, inst=STORE_FAST(arg=5, lineno=398)
LINE 263 : 2020-06-05 19:05:01,774 [DEBUG   ] stack ['$phi92.0', '$96binary_subscr.3']
LINE 262 : 2020-06-05 19:05:01,774 [DEBUG   ] dispatch pc=100, inst=LOAD_FAST(arg=7, lineno=399)
LINE 263 : 2020-06-05 19:05:01,774 [DEBUG   ] stack ['$phi92.0']
LINE 262 : 2020-06-05 19:05:01,775 [DEBUG   ] dispatch pc=102, inst=STORE_FAST(arg=6, lineno=399)
LINE 263 : 2020-06-05 19:05:01,775 [DEBUG   ] stack ['$phi92.0', '$i100.4']
LINE 262 : 2020-06-05 19:05:01,775 [DEBUG   ] dispatch pc=104, inst=JUMP_ABSOLUTE(arg=64, lineno=399)
LINE 263 : 2020-06-05 19:05:01,775 [DEBUG   ] stack ['$phi92.0']
LINE 135 : 2020-06-05 19:05:01,775 [DEBUG   ] end state. edges=[Edge(pc=64, stack=('$phi92.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,776 [DEBUG   ] pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
LINE 100 : 2020-06-05 19:05:01,776 [DEBUG   ] pending: deque([State(pc_initial=64 nstack_initial=1)])
LINE 163 : 2020-06-05 19:05:01,776 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:01,776 [DEBUG   ] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=66 nstack_initial=2): {'$phi66.1'},
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=92 nstack_initial=1): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=108 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=136 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:01,777 [DEBUG   ] defmap: {'$phi64.0': State(pc_initial=48 nstack_initial=0),
 '$phi66.1': State(pc_initial=64 nstack_initial=1)}
LINE 190 : 2020-06-05 19:05:01,777 [DEBUG   ] phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0)),
                          ('$phi66.0', State(pc_initial=66 nstack_initial=2)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1)),
                          ('$phi92.0', State(pc_initial=92 nstack_initial=1))},
             '$phi66.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi80.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi92.0': {('$phi80.0', State(pc_initial=80 nstack_initial=1))}})
LINE 211 : 2020-06-05 19:05:01,777 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi80.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi92.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))}})
LINE 211 : 2020-06-05 19:05:01,777 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi80.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi92.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))}})
LINE 211 : 2020-06-05 19:05:01,778 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi64.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))},
             '$phi80.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))},
             '$phi92.0': {('$62get_iter.6',
                           State(pc_initial=48 nstack_initial=0))}})
LINE 220 : 2020-06-05 19:05:01,778 [DEBUG   ] keep phismap: {'$phi64.0': {('$62get_iter.6', State(pc_initial=48 nstack_initial=0))},
 '$phi66.1': {('$64for_iter.2', State(pc_initial=64 nstack_initial=1))}}
LINE 226 : 2020-06-05 19:05:01,778 [DEBUG   ] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=48 nstack_initial=0): {'$phi64.0': '$62get_iter.6'},
             State(pc_initial=64 nstack_initial=1): {'$phi66.1': '$64for_iter.2'}})
LINE 236 : 2020-06-05 19:05:01,779 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:01,779 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$heap2.0'}), (4, {'res': '$const4.1'}), (6, {'res': '$row6.2'}), (8, {'items': ['$const4.1', '$row6.2'], 'res': '$8build_tuple.3'}), (10, {'index': '$8build_tuple.3', 'target': '$heap2.0', 'res': '$10binary_subscr.4'}), (12, {'value': '$10binary_subscr.4'}), (14, {'res': '$heap14.5'}), (16, {'res': '$const16.6'}), (18, {'res': '$row18.7'}), (20, {'items': ['$const16.6', '$row18.7'], 'res': '$20build_tuple.8'}), (22, {'index': '$20build_tuple.8', 'target': '$heap14.5', 'res': '$22binary_subscr.9'}), (24, {'value': '$22binary_subscr.9'}), (26, {'res': '$heap26.10'}), (28, {'res': '$const28.11'}), (30, {'res': '$row30.12'}), (32, {'items': ['$const28.11', '$row30.12'], 'res': '$32build_tuple.13'}), (34, {'index': '$32build_tuple.13', 'target': '$heap26.10', 'res': '$34binary_subscr.14'}), (36, {'value': '$34binary_subscr.14'}), (38, {'res': '$38load_global.15'}), (40, {'item': '$38load_global.15', 'res': '$40load_attr.16'}), (42, {'value': '$40load_attr.16'}), (44, {'res': '$const44.17'}), (46, {'value': '$const44.17'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={48: ()})
LINE 147 : 2020-06-05 19:05:01,779 [DEBUG   ] block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$50load_global.0'}), (52, {'res': '$ind52.1'}), (54, {'item': '$ind52.1', 'res': '$54load_attr.2'}), (56, {'res': '$const56.3'}), (58, {'index': '$const56.3', 'target': '$54load_attr.2', 'res': '$58binary_subscr.4'}), (60, {'func': '$50load_global.0', 'args': ['$58binary_subscr.4'], 'res': '$60call_function.5'}), (62, {'value': '$60call_function.5', 'res': '$62get_iter.6'})), outgoing_phis={'$phi64.0': '$62get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$62get_iter.6',)})
LINE 147 : 2020-06-05 19:05:01,779 [DEBUG   ] block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'iterator': '$phi64.0', 'pair': '$64for_iter.1', 'indval': '$64for_iter.2', 'pred': '$64for_iter.3'}),), outgoing_phis={'$phi66.1': '$64for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={106: (), 66: ('$phi64.0', '$64for_iter.2')})
LINE 147 : 2020-06-05 19:05:01,779 [DEBUG   ] block_infos State(pc_initial=66 nstack_initial=2):
AdaptBlockInfo(insts=((66, {'value': '$phi66.1'}), (68, {'res': '$flag68.2'}), (70, {'res': '$i70.3'}), (72, {'index': '$i70.3', 'target': '$flag68.2', 'res': '$72binary_subscr.4'}), (74, {'res': '$const74.5'}), (76, {'lhs': '$72binary_subscr.4', 'rhs': '$const74.5', 'res': '$76compare_op.6'}), (78, {'pred': '$76compare_op.6'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={80: ('$phi66.0',), 64: ('$phi66.0',)})
LINE 147 : 2020-06-05 19:05:01,779 [DEBUG   ] block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$dist80.1'}), (82, {'res': '$i82.2'}), (84, {'index': '$i82.2', 'target': '$dist80.1', 'res': '$84binary_subscr.3'}), (86, {'res': '$min_dist86.4'}), (88, {'lhs': '$84binary_subscr.3', 'rhs': '$min_dist86.4', 'res': '$88compare_op.5'}), (90, {'pred': '$88compare_op.5'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={92: ('$phi80.0',), 64: ('$phi80.0',)})
LINE 147 : 2020-06-05 19:05:01,779 [DEBUG   ] block_infos State(pc_initial=92 nstack_initial=1):
AdaptBlockInfo(insts=((92, {'res': '$dist92.1'}), (94, {'res': '$i94.2'}), (96, {'index': '$i94.2', 'target': '$dist92.1', 'res': '$96binary_subscr.3'}), (98, {'value': '$96binary_subscr.3'}), (100, {'res': '$i100.4'}), (102, {'value': '$i100.4'}), (104, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={64: ('$phi92.0',)})
LINE 147 : 2020-06-05 19:05:01,779 [DEBUG   ] block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 108, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={108: ()})
LINE 147 : 2020-06-05 19:05:01,780 [DEBUG   ] block_infos State(pc_initial=108 nstack_initial=0):
AdaptBlockInfo(insts=((108, {'res': '$result_index108.0'}), (110, {'res': '$const110.1'}), (112, {'lhs': '$result_index108.0', 'rhs': '$const110.1', 'res': '$112compare_op.2'}), (114, {'pred': '$112compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 136: ()})
LINE 147 : 2020-06-05 19:05:01,780 [DEBUG   ] block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'res': '$const116.0'}), (118, {'res': '$flag118.1'}), (120, {'res': '$result_index120.2'}), (122, {'target': '$flag118.1', 'index': '$result_index120.2', 'value': '$const116.0'}), (124, {'res': '$124load_global.3'}), (126, {'res': '$ind126.4'}), (128, {'res': '$result_index128.5'}), (130, {'index': '$result_index128.5', 'target': '$ind126.4', 'res': '$130binary_subscr.6'}), (132, {'func': '$124load_global.3', 'args': ['$130binary_subscr.6'], 'res': '$132call_function.7'}), (134, {'retval': '$132call_function.7', 'castval': '$134return_value.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:01,780 [DEBUG   ] block_infos State(pc_initial=136 nstack_initial=0):
AdaptBlockInfo(insts=((136, {'res': '$const136.0'}), (138, {'retval': '$const136.0', 'castval': '$138return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:01,783 [DEBUG   ] label 0:
    heap = arg(0, name=heap)                 ['heap']
    row = arg(1, name=row)                   ['row']
    $const4.1 = const(int, 0)                ['$const4.1']
    $8build_tuple.3 = build_tuple(items=[Var($const4.1, utils.py:389), Var(row, utils.py:389)]) ['$8build_tuple.3', '$const4.1', 'row']
    $10binary_subscr.4 = getitem(value=heap, index=$8build_tuple.3) ['$10binary_subscr.4', '$8build_tuple.3', 'heap']
    ind = $10binary_subscr.4                 ['$10binary_subscr.4', 'ind']
    $const16.6 = const(int, 1)               ['$const16.6']
    $20build_tuple.8 = build_tuple(items=[Var($const16.6, utils.py:390), Var(row, utils.py:389)]) ['$20build_tuple.8', '$const16.6', 'row']
    $22binary_subscr.9 = getitem(value=heap, index=$20build_tuple.8) ['$20build_tuple.8', '$22binary_subscr.9', 'heap']
    dist = $22binary_subscr.9                ['$22binary_subscr.9', 'dist']
    $const28.11 = const(int, 2)              ['$const28.11']
    $32build_tuple.13 = build_tuple(items=[Var($const28.11, utils.py:391), Var(row, utils.py:389)]) ['$32build_tuple.13', '$const28.11', 'row']
    $34binary_subscr.14 = getitem(value=heap, index=$32build_tuple.13) ['$32build_tuple.13', '$34binary_subscr.14', 'heap']
    flag = $34binary_subscr.14               ['$34binary_subscr.14', 'flag']
    $38load_global.15 = global(np: <module 'numpy' from '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/numpy/__init__.py'>) ['$38load_global.15']
    $40load_attr.16 = getattr(value=$38load_global.15, attr=inf) ['$38load_global.15', '$40load_attr.16']
    min_dist = $40load_attr.16               ['$40load_attr.16', 'min_dist']
    $const44.17 = const(int, -1)             ['$const44.17']
    result_index = $const44.17               ['$const44.17', 'result_index']
    jump 48                                  []
label 48:
    $50load_global.0 = global(range: <class 'range'>) ['$50load_global.0']
    $54load_attr.2 = getattr(value=ind, attr=shape) ['$54load_attr.2', 'ind']
    $const56.3 = const(int, 0)               ['$const56.3']
    $58binary_subscr.4 = getitem(value=$54load_attr.2, index=$const56.3) ['$54load_attr.2', '$58binary_subscr.4', '$const56.3']
    $60call_function.5 = call $50load_global.0($58binary_subscr.4, func=$50load_global.0, args=[Var($58binary_subscr.4, utils.py:396)], kws=(), vararg=None) ['$50load_global.0', '$58binary_subscr.4', '$60call_function.5']
    $62get_iter.6 = getiter(value=$60call_function.5) ['$60call_function.5', '$62get_iter.6']
    $phi64.0 = $62get_iter.6                 ['$62get_iter.6', '$phi64.0']
    jump 64                                  []
label 64:
    $64for_iter.1 = iternext(value=$phi64.0) ['$64for_iter.1', '$phi64.0']
    $64for_iter.2 = pair_first(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.2']
    $64for_iter.3 = pair_second(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.3']
    $phi66.1 = $64for_iter.2                 ['$64for_iter.2', '$phi66.1']
    branch $64for_iter.3, 66, 106            ['$64for_iter.3']
label 66:
    i = $phi66.1                             ['$phi66.1', 'i']
    $72binary_subscr.4 = getitem(value=flag, index=i) ['$72binary_subscr.4', 'flag', 'i']
    $const74.5 = const(int, 1)               ['$const74.5']
    $76compare_op.6 = $72binary_subscr.4 == $const74.5 ['$72binary_subscr.4', '$76compare_op.6', '$const74.5']
    branch $76compare_op.6, 80, 64           ['$76compare_op.6']
label 80:
    $84binary_subscr.3 = getitem(value=dist, index=i) ['$84binary_subscr.3', 'dist', 'i']
    $88compare_op.5 = $84binary_subscr.3 < min_dist ['$84binary_subscr.3', '$88compare_op.5', 'min_dist']
    branch $88compare_op.5, 92, 64           ['$88compare_op.5']
label 92:
    $96binary_subscr.3 = getitem(value=dist, index=i) ['$96binary_subscr.3', 'dist', 'i']
    min_dist = $96binary_subscr.3            ['$96binary_subscr.3', 'min_dist']
    result_index = i                         ['i', 'result_index']
    jump 64                                  []
label 106:
    jump 108                                 []
label 108:
    $const110.1 = const(int, 0)              ['$const110.1']
    $112compare_op.2 = result_index >= $const110.1 ['$112compare_op.2', '$const110.1', 'result_index']
    branch $112compare_op.2, 116, 136        ['$112compare_op.2']
label 116:
    $const116.0 = const(float, 0.0)          ['$const116.0']
    flag[result_index] = $const116.0         ['$const116.0', 'flag', 'result_index']
    $124load_global.3 = global(int: <class 'int'>) ['$124load_global.3']
    $130binary_subscr.6 = getitem(value=ind, index=result_index) ['$130binary_subscr.6', 'ind', 'result_index']
    $132call_function.7 = call $124load_global.3($130binary_subscr.6, func=$124load_global.3, args=[Var($130binary_subscr.6, utils.py:403)], kws=(), vararg=None) ['$124load_global.3', '$130binary_subscr.6', '$132call_function.7']
    $134return_value.8 = cast(value=$132call_function.7) ['$132call_function.7', '$134return_value.8']
    return $134return_value.8                ['$134return_value.8']
label 136:
    $const136.0 = const(int, -1)             ['$const136.0']
    $138return_value.1 = cast(value=$const136.0) ['$138return_value.1', '$const136.0']
    return $138return_value.1                ['$138return_value.1']

LINE 74  : 2020-06-05 19:05:01,950 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=694)
           2	LOAD_CONST(arg=1, lineno=694)
           4	STORE_FAST(arg=2, lineno=694)
           6	SETUP_LOOP(arg=46, lineno=695)
           8	LOAD_GLOBAL(arg=0, lineno=695)
          10	LOAD_FAST(arg=0, lineno=695)
          12	LOAD_ATTR(arg=1, lineno=695)
          14	LOAD_CONST(arg=2, lineno=695)
          16	BINARY_SUBSCR(arg=None, lineno=695)
          18	CALL_FUNCTION(arg=1, lineno=695)
          20	GET_ITER(arg=None, lineno=695)
>         22	FOR_ITER(arg=28, lineno=695)
          24	STORE_FAST(arg=3, lineno=695)
          26	LOAD_FAST(arg=2, lineno=696)
          28	LOAD_FAST(arg=0, lineno=696)
          30	LOAD_FAST(arg=3, lineno=696)
          32	BINARY_SUBSCR(arg=None, lineno=696)
          34	LOAD_FAST(arg=1, lineno=696)
          36	LOAD_FAST(arg=3, lineno=696)
          38	BINARY_SUBSCR(arg=None, lineno=696)
          40	BINARY_SUBTRACT(arg=None, lineno=696)
          42	LOAD_CONST(arg=3, lineno=696)
          44	BINARY_POWER(arg=None, lineno=696)
          46	INPLACE_ADD(arg=None, lineno=696)
          48	STORE_FAST(arg=2, lineno=696)
          50	JUMP_ABSOLUTE(arg=22, lineno=696)
>         52	POP_BLOCK(arg=None, lineno=696)
>         54	LOAD_FAST(arg=2, lineno=698)
          56	RETURN_VALUE(arg=None, lineno=698)
LINE 100 : 2020-06-05 19:05:01,950 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,950 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,950 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=694)
LINE 263 : 2020-06-05 19:05:01,950 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,950 [DEBUG   ] dispatch pc=2, inst=LOAD_CONST(arg=1, lineno=694)
LINE 263 : 2020-06-05 19:05:01,951 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,951 [DEBUG   ] dispatch pc=4, inst=STORE_FAST(arg=2, lineno=694)
LINE 263 : 2020-06-05 19:05:01,951 [DEBUG   ] stack ['$const2.0']
LINE 135 : 2020-06-05 19:05:01,951 [DEBUG   ] end state. edges=[Edge(pc=6, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,951 [DEBUG   ] pending: deque([State(pc_initial=6 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,951 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,951 [DEBUG   ] dispatch pc=6, inst=SETUP_LOOP(arg=46, lineno=695)
LINE 263 : 2020-06-05 19:05:01,951 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,951 [DEBUG   ] dispatch pc=8, inst=LOAD_GLOBAL(arg=0, lineno=695)
LINE 263 : 2020-06-05 19:05:01,951 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,951 [DEBUG   ] dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=695)
LINE 263 : 2020-06-05 19:05:01,951 [DEBUG   ] stack ['$8load_global.0']
LINE 262 : 2020-06-05 19:05:01,951 [DEBUG   ] dispatch pc=12, inst=LOAD_ATTR(arg=1, lineno=695)
LINE 263 : 2020-06-05 19:05:01,951 [DEBUG   ] stack ['$8load_global.0', '$x10.1']
LINE 262 : 2020-06-05 19:05:01,952 [DEBUG   ] dispatch pc=14, inst=LOAD_CONST(arg=2, lineno=695)
LINE 263 : 2020-06-05 19:05:01,952 [DEBUG   ] stack ['$8load_global.0', '$12load_attr.2']
LINE 262 : 2020-06-05 19:05:01,952 [DEBUG   ] dispatch pc=16, inst=BINARY_SUBSCR(arg=None, lineno=695)
LINE 263 : 2020-06-05 19:05:01,952 [DEBUG   ] stack ['$8load_global.0', '$12load_attr.2', '$const14.3']
LINE 262 : 2020-06-05 19:05:01,952 [DEBUG   ] dispatch pc=18, inst=CALL_FUNCTION(arg=1, lineno=695)
LINE 263 : 2020-06-05 19:05:01,952 [DEBUG   ] stack ['$8load_global.0', '$16binary_subscr.4']
LINE 262 : 2020-06-05 19:05:01,952 [DEBUG   ] dispatch pc=20, inst=GET_ITER(arg=None, lineno=695)
LINE 263 : 2020-06-05 19:05:01,952 [DEBUG   ] stack ['$18call_function.5']
LINE 135 : 2020-06-05 19:05:01,952 [DEBUG   ] end state. edges=[Edge(pc=22, stack=('$20get_iter.6',), blockstack=({'kind': BlockKind(LOOP), 'end': 54, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,952 [DEBUG   ] pending: deque([State(pc_initial=22 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,952 [DEBUG   ] stack: ['$phi22.0']
LINE 262 : 2020-06-05 19:05:01,952 [DEBUG   ] dispatch pc=22, inst=FOR_ITER(arg=28, lineno=695)
LINE 263 : 2020-06-05 19:05:01,952 [DEBUG   ] stack ['$phi22.0']
LINE 135 : 2020-06-05 19:05:01,953 [DEBUG   ] end state. edges=[Edge(pc=52, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 54, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=24, stack=('$phi22.0', '$22for_iter.2'), blockstack=({'kind': BlockKind(LOOP), 'end': 54, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,953 [DEBUG   ] pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=24 nstack_initial=2)])
LINE 103 : 2020-06-05 19:05:01,953 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,953 [DEBUG   ] dispatch pc=52, inst=POP_BLOCK(arg=None, lineno=696)
LINE 263 : 2020-06-05 19:05:01,953 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:01,953 [DEBUG   ] end state. edges=[Edge(pc=54, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:01,953 [DEBUG   ] pending: deque([State(pc_initial=24 nstack_initial=2), State(pc_initial=54 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:01,953 [DEBUG   ] stack: ['$phi24.0', '$phi24.1']
LINE 262 : 2020-06-05 19:05:01,953 [DEBUG   ] dispatch pc=24, inst=STORE_FAST(arg=3, lineno=695)
LINE 263 : 2020-06-05 19:05:01,953 [DEBUG   ] stack ['$phi24.0', '$phi24.1']
LINE 262 : 2020-06-05 19:05:01,954 [DEBUG   ] dispatch pc=26, inst=LOAD_FAST(arg=2, lineno=696)
LINE 263 : 2020-06-05 19:05:01,954 [DEBUG   ] stack ['$phi24.0']
LINE 262 : 2020-06-05 19:05:01,954 [DEBUG   ] dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=696)
LINE 263 : 2020-06-05 19:05:01,954 [DEBUG   ] stack ['$phi24.0', '$result26.2']
LINE 262 : 2020-06-05 19:05:01,954 [DEBUG   ] dispatch pc=30, inst=LOAD_FAST(arg=3, lineno=696)
LINE 263 : 2020-06-05 19:05:01,955 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$x28.3']
LINE 262 : 2020-06-05 19:05:01,955 [DEBUG   ] dispatch pc=32, inst=BINARY_SUBSCR(arg=None, lineno=696)
LINE 263 : 2020-06-05 19:05:01,955 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$x28.3', '$i30.4']
LINE 262 : 2020-06-05 19:05:01,955 [DEBUG   ] dispatch pc=34, inst=LOAD_FAST(arg=1, lineno=696)
LINE 263 : 2020-06-05 19:05:01,955 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$32binary_subscr.5']
LINE 262 : 2020-06-05 19:05:01,956 [DEBUG   ] dispatch pc=36, inst=LOAD_FAST(arg=3, lineno=696)
LINE 263 : 2020-06-05 19:05:01,956 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$32binary_subscr.5', '$y34.6']
LINE 262 : 2020-06-05 19:05:01,956 [DEBUG   ] dispatch pc=38, inst=BINARY_SUBSCR(arg=None, lineno=696)
LINE 263 : 2020-06-05 19:05:01,956 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$32binary_subscr.5', '$y34.6', '$i36.7']
LINE 262 : 2020-06-05 19:05:01,956 [DEBUG   ] dispatch pc=40, inst=BINARY_SUBTRACT(arg=None, lineno=696)
LINE 263 : 2020-06-05 19:05:01,956 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$32binary_subscr.5', '$38binary_subscr.8']
LINE 262 : 2020-06-05 19:05:01,956 [DEBUG   ] dispatch pc=42, inst=LOAD_CONST(arg=3, lineno=696)
LINE 263 : 2020-06-05 19:05:01,956 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$40binary_subtract.9']
LINE 262 : 2020-06-05 19:05:01,956 [DEBUG   ] dispatch pc=44, inst=BINARY_POWER(arg=None, lineno=696)
LINE 263 : 2020-06-05 19:05:01,956 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$40binary_subtract.9', '$const42.10']
LINE 262 : 2020-06-05 19:05:01,956 [DEBUG   ] dispatch pc=46, inst=INPLACE_ADD(arg=None, lineno=696)
LINE 263 : 2020-06-05 19:05:01,957 [DEBUG   ] stack ['$phi24.0', '$result26.2', '$44binary_power.11']
LINE 262 : 2020-06-05 19:05:01,957 [DEBUG   ] dispatch pc=48, inst=STORE_FAST(arg=2, lineno=696)
LINE 263 : 2020-06-05 19:05:01,957 [DEBUG   ] stack ['$phi24.0', '$46inplace_add.12']
LINE 262 : 2020-06-05 19:05:01,957 [DEBUG   ] dispatch pc=50, inst=JUMP_ABSOLUTE(arg=22, lineno=696)
LINE 263 : 2020-06-05 19:05:01,957 [DEBUG   ] stack ['$phi24.0']
LINE 135 : 2020-06-05 19:05:01,958 [DEBUG   ] end state. edges=[Edge(pc=22, stack=('$phi24.0',), blockstack=({'kind': BlockKind(LOOP), 'end': 54, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:01,958 [DEBUG   ] pending: deque([State(pc_initial=54 nstack_initial=0), State(pc_initial=22 nstack_initial=1)])
LINE 103 : 2020-06-05 19:05:01,958 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:01,958 [DEBUG   ] dispatch pc=54, inst=LOAD_FAST(arg=2, lineno=698)
LINE 263 : 2020-06-05 19:05:01,958 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:01,958 [DEBUG   ] dispatch pc=56, inst=RETURN_VALUE(arg=None, lineno=698)
LINE 263 : 2020-06-05 19:05:01,959 [DEBUG   ] stack ['$result54.0']
LINE 135 : 2020-06-05 19:05:01,959 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:01,959 [DEBUG   ] pending: deque([State(pc_initial=22 nstack_initial=1)])
LINE 163 : 2020-06-05 19:05:01,959 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:01,959 [DEBUG   ] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=6 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=1): {'$phi22.0'},
             State(pc_initial=24 nstack_initial=2): {'$phi24.1'},
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=54 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:01,960 [DEBUG   ] defmap: {'$phi22.0': State(pc_initial=6 nstack_initial=0),
 '$phi24.1': State(pc_initial=22 nstack_initial=1)}
LINE 190 : 2020-06-05 19:05:01,960 [DEBUG   ] phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.6',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi24.0', State(pc_initial=24 nstack_initial=2))},
             '$phi24.0': {('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
LINE 211 : 2020-06-05 19:05:01,960 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.6',
                           State(pc_initial=6 nstack_initial=0)),
                          ('$phi22.0', State(pc_initial=22 nstack_initial=1))},
             '$phi24.0': {('$20get_iter.6',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
LINE 211 : 2020-06-05 19:05:01,960 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.6',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.6',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
LINE 211 : 2020-06-05 19:05:01,960 [DEBUG   ] changing phismap: defaultdict(<class 'set'>,
            {'$phi22.0': {('$20get_iter.6',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi24.0': {('$20get_iter.6',
                           State(pc_initial=6 nstack_initial=0))},
             '$phi24.1': {('$22for_iter.2',
                           State(pc_initial=22 nstack_initial=1))}})
LINE 220 : 2020-06-05 19:05:01,961 [DEBUG   ] keep phismap: {'$phi22.0': {('$20get_iter.6', State(pc_initial=6 nstack_initial=0))},
 '$phi24.1': {('$22for_iter.2', State(pc_initial=22 nstack_initial=1))}}
LINE 226 : 2020-06-05 19:05:01,961 [DEBUG   ] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=6 nstack_initial=0): {'$phi22.0': '$20get_iter.6'},
             State(pc_initial=22 nstack_initial=1): {'$phi24.1': '$22for_iter.2'}})
LINE 236 : 2020-06-05 19:05:01,961 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:01,961 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$const2.0'}), (4, {'value': '$const2.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={6: ()})
LINE 147 : 2020-06-05 19:05:01,961 [DEBUG   ] block_infos State(pc_initial=6 nstack_initial=0):
AdaptBlockInfo(insts=((8, {'res': '$8load_global.0'}), (10, {'res': '$x10.1'}), (12, {'item': '$x10.1', 'res': '$12load_attr.2'}), (14, {'res': '$const14.3'}), (16, {'index': '$const14.3', 'target': '$12load_attr.2', 'res': '$16binary_subscr.4'}), (18, {'func': '$8load_global.0', 'args': ['$16binary_subscr.4'], 'res': '$18call_function.5'}), (20, {'value': '$18call_function.5', 'res': '$20get_iter.6'})), outgoing_phis={'$phi22.0': '$20get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: ('$20get_iter.6',)})
LINE 147 : 2020-06-05 19:05:01,962 [DEBUG   ] block_infos State(pc_initial=22 nstack_initial=1):
AdaptBlockInfo(insts=((22, {'iterator': '$phi22.0', 'pair': '$22for_iter.1', 'indval': '$22for_iter.2', 'pred': '$22for_iter.3'}),), outgoing_phis={'$phi24.1': '$22for_iter.2'}, blockstack=({'kind': BlockKind(LOOP), 'end': 54, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={52: (), 24: ('$phi22.0', '$22for_iter.2')})
LINE 147 : 2020-06-05 19:05:01,962 [DEBUG   ] block_infos State(pc_initial=24 nstack_initial=2):
AdaptBlockInfo(insts=((24, {'value': '$phi24.1'}), (26, {'res': '$result26.2'}), (28, {'res': '$x28.3'}), (30, {'res': '$i30.4'}), (32, {'index': '$i30.4', 'target': '$x28.3', 'res': '$32binary_subscr.5'}), (34, {'res': '$y34.6'}), (36, {'res': '$i36.7'}), (38, {'index': '$i36.7', 'target': '$y34.6', 'res': '$38binary_subscr.8'}), (40, {'lhs': '$32binary_subscr.5', 'rhs': '$38binary_subscr.8', 'res': '$40binary_subtract.9'}), (42, {'res': '$const42.10'}), (44, {'lhs': '$40binary_subtract.9', 'rhs': '$const42.10', 'res': '$44binary_power.11'}), (46, {'lhs': '$result26.2', 'rhs': '$44binary_power.11', 'res': '$46inplace_add.12'}), (48, {'value': '$46inplace_add.12'}), (50, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 54, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={22: ('$phi24.0',)})
LINE 147 : 2020-06-05 19:05:01,962 [DEBUG   ] block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 54, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={54: ()})
LINE 147 : 2020-06-05 19:05:01,962 [DEBUG   ] block_infos State(pc_initial=54 nstack_initial=0):
AdaptBlockInfo(insts=((54, {'res': '$result54.0'}), (56, {'retval': '$result54.0', 'castval': '$56return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:01,965 [DEBUG   ] label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    $const2.0 = const(float, 0.0)            ['$const2.0']
    result = $const2.0                       ['$const2.0', 'result']
    jump 6                                   []
label 6:
    $8load_global.0 = global(range: <class 'range'>) ['$8load_global.0']
    $12load_attr.2 = getattr(value=x, attr=shape) ['$12load_attr.2', 'x']
    $const14.3 = const(int, 0)               ['$const14.3']
    $16binary_subscr.4 = getitem(value=$12load_attr.2, index=$const14.3) ['$12load_attr.2', '$16binary_subscr.4', '$const14.3']
    $18call_function.5 = call $8load_global.0($16binary_subscr.4, func=$8load_global.0, args=[Var($16binary_subscr.4, umap_.py:695)], kws=(), vararg=None) ['$16binary_subscr.4', '$18call_function.5', '$8load_global.0']
    $20get_iter.6 = getiter(value=$18call_function.5) ['$18call_function.5', '$20get_iter.6']
    $phi22.0 = $20get_iter.6                 ['$20get_iter.6', '$phi22.0']
    jump 22                                  []
label 22:
    $22for_iter.1 = iternext(value=$phi22.0) ['$22for_iter.1', '$phi22.0']
    $22for_iter.2 = pair_first(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.2']
    $22for_iter.3 = pair_second(value=$22for_iter.1) ['$22for_iter.1', '$22for_iter.3']
    $phi24.1 = $22for_iter.2                 ['$22for_iter.2', '$phi24.1']
    branch $22for_iter.3, 24, 52             ['$22for_iter.3']
label 24:
    i = $phi24.1                             ['$phi24.1', 'i']
    $32binary_subscr.5 = getitem(value=x, index=i) ['$32binary_subscr.5', 'i', 'x']
    $38binary_subscr.8 = getitem(value=y, index=i) ['$38binary_subscr.8', 'i', 'y']
    $40binary_subtract.9 = $32binary_subscr.5 - $38binary_subscr.8 ['$32binary_subscr.5', '$38binary_subscr.8', '$40binary_subtract.9']
    $const42.10 = const(int, 2)              ['$const42.10']
    $44binary_power.11 = $40binary_subtract.9 ** $const42.10 ['$40binary_subtract.9', '$44binary_power.11', '$const42.10']
    $46inplace_add.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$44binary_power.11, static_lhs=Undefined, static_rhs=Undefined) ['$44binary_power.11', '$46inplace_add.12', 'result']
    result = $46inplace_add.12               ['$46inplace_add.12', 'result']
    jump 22                                  []
label 52:
    jump 54                                  []
label 54:
    $56return_value.1 = cast(value=result)   ['$56return_value.1', 'result']
    return $56return_value.1                 ['$56return_value.1']

LINE 74  : 2020-06-05 19:05:02,014 [DEBUG   ] bytecode dump:
>          0	NOP(arg=None, lineno=225)
           2	LOAD_DEREF(arg=1, lineno=225)
           4	LOAD_CONST(arg=1, lineno=225)
           6	CALL_FUNCTION(arg=1, lineno=225)
           8	STORE_FAST(arg=2, lineno=225)
          10	LOAD_DEREF(arg=1, lineno=226)
          12	LOAD_FAST(arg=0, lineno=226)
          14	CALL_FUNCTION(arg=1, lineno=226)
          16	STORE_FAST(arg=0, lineno=226)
          18	LOAD_FAST(arg=1, lineno=227)
          20	LOAD_CONST(arg=2, lineno=227)
          22	COMPARE_OP(arg=0, lineno=227)
          24	POP_JUMP_IF_FALSE(arg=98, lineno=227)
          26	LOAD_CONST(arg=3, lineno=228)
          28	STORE_FAST(arg=3, lineno=228)
          30	LOAD_FAST(arg=1, lineno=229)
          32	UNARY_NEGATIVE(arg=None, lineno=229)
          34	STORE_FAST(arg=4, lineno=229)
          36	LOAD_FAST(arg=4, lineno=230)
          38	LOAD_CONST(arg=2, lineno=230)
          40	COMPARE_OP(arg=0, lineno=230)
          42	POP_JUMP_IF_FALSE(arg=48, lineno=230)
          44	LOAD_GLOBAL(arg=0, lineno=231)
          46	RAISE_VARARGS(arg=1, lineno=231)
>         48	LOAD_DEREF(arg=0, lineno=232)
          50	POP_JUMP_IF_FALSE(arg=106, lineno=232)
          52	LOAD_FAST(arg=0, lineno=233)
          54	LOAD_CONST(arg=2, lineno=233)
          56	COMPARE_OP(arg=2, lineno=233)
          58	POP_JUMP_IF_FALSE(arg=76, lineno=233)
          60	LOAD_DEREF(arg=2, lineno=234)
          62	POP_JUMP_IF_FALSE(arg=68, lineno=234)
          64	LOAD_DEREF(arg=2, lineno=235)
          66	RETURN_VALUE(arg=None, lineno=235)
>         68	LOAD_GLOBAL(arg=1, lineno=237)
          70	LOAD_CONST(arg=4, lineno=237)
          72	CALL_FUNCTION(arg=1, lineno=237)
          74	RAISE_VARARGS(arg=1, lineno=237)
>         76	LOAD_FAST(arg=0, lineno=238)
          78	LOAD_CONST(arg=1, lineno=238)
          80	COMPARE_OP(arg=3, lineno=238)
          82	POP_JUMP_IF_FALSE(arg=106, lineno=238)
          84	LOAD_FAST(arg=0, lineno=238)
          86	LOAD_CONST(arg=5, lineno=238)
          88	COMPARE_OP(arg=3, lineno=238)
          90	POP_JUMP_IF_FALSE(arg=106, lineno=238)
          92	LOAD_CONST(arg=2, lineno=239)
          94	RETURN_VALUE(arg=None, lineno=239)
          96	JUMP_FORWARD(arg=8, lineno=239)
>         98	LOAD_CONST(arg=6, lineno=241)
         100	STORE_FAST(arg=3, lineno=241)
         102	LOAD_FAST(arg=1, lineno=242)
         104	STORE_FAST(arg=4, lineno=242)
>        106	LOAD_FAST(arg=4, lineno=243)
         108	LOAD_CONST(arg=7, lineno=243)
         110	COMPARE_OP(arg=4, lineno=243)
         112	POP_JUMP_IF_FALSE(arg=130, lineno=243)
         114	LOAD_GLOBAL(arg=2, lineno=245)
         116	LOAD_METHOD(arg=3, lineno=245)
         118	LOAD_FAST(arg=0, lineno=245)
         120	LOAD_GLOBAL(arg=4, lineno=245)
         122	LOAD_FAST(arg=1, lineno=245)
         124	CALL_FUNCTION(arg=1, lineno=245)
         126	CALL_METHOD(arg=2, lineno=245)
         128	RETURN_VALUE(arg=None, lineno=245)
>        130	SETUP_LOOP(arg=44, lineno=246)
>        132	LOAD_FAST(arg=4, lineno=246)
         134	LOAD_CONST(arg=2, lineno=246)
         136	COMPARE_OP(arg=3, lineno=246)
         138	POP_JUMP_IF_FALSE(arg=174, lineno=246)
         140	LOAD_FAST(arg=4, lineno=247)
         142	LOAD_CONST(arg=1, lineno=247)
         144	BINARY_AND(arg=None, lineno=247)
         146	POP_JUMP_IF_FALSE(arg=156, lineno=247)
         148	LOAD_FAST(arg=2, lineno=248)
         150	LOAD_FAST(arg=0, lineno=248)
         152	INPLACE_MULTIPLY(arg=None, lineno=248)
         154	STORE_FAST(arg=2, lineno=248)
>        156	LOAD_FAST(arg=4, lineno=249)
         158	LOAD_CONST(arg=1, lineno=249)
         160	INPLACE_RSHIFT(arg=None, lineno=249)
         162	STORE_FAST(arg=4, lineno=249)
         164	LOAD_FAST(arg=0, lineno=250)
         166	LOAD_FAST(arg=0, lineno=250)
         168	INPLACE_MULTIPLY(arg=None, lineno=250)
         170	STORE_FAST(arg=0, lineno=250)
         172	JUMP_ABSOLUTE(arg=132, lineno=250)
>        174	POP_BLOCK(arg=None, lineno=250)
>        176	LOAD_FAST(arg=3, lineno=252)
         178	POP_JUMP_IF_FALSE(arg=188, lineno=252)
         180	LOAD_CONST(arg=8, lineno=252)
         182	LOAD_FAST(arg=2, lineno=252)
         184	BINARY_TRUE_DIVIDE(arg=None, lineno=252)
         186	RETURN_VALUE(arg=None, lineno=252)
>        188	LOAD_FAST(arg=2, lineno=252)
         190	RETURN_VALUE(arg=None, lineno=252)
LINE 100 : 2020-06-05 19:05:02,014 [DEBUG   ] pending: deque([State(pc_initial=0 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,015 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,015 [DEBUG   ] dispatch pc=0, inst=NOP(arg=None, lineno=225)
LINE 263 : 2020-06-05 19:05:02,015 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,015 [DEBUG   ] dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=225)
LINE 263 : 2020-06-05 19:05:02,015 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,015 [DEBUG   ] dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=225)
LINE 263 : 2020-06-05 19:05:02,015 [DEBUG   ] stack ['$2load_deref.0']
LINE 262 : 2020-06-05 19:05:02,015 [DEBUG   ] dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=225)
LINE 263 : 2020-06-05 19:05:02,015 [DEBUG   ] stack ['$2load_deref.0', '$const4.1']
LINE 262 : 2020-06-05 19:05:02,016 [DEBUG   ] dispatch pc=8, inst=STORE_FAST(arg=2, lineno=225)
LINE 263 : 2020-06-05 19:05:02,016 [DEBUG   ] stack ['$6call_function.2']
LINE 262 : 2020-06-05 19:05:02,016 [DEBUG   ] dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=226)
LINE 263 : 2020-06-05 19:05:02,016 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,016 [DEBUG   ] dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=226)
LINE 263 : 2020-06-05 19:05:02,016 [DEBUG   ] stack ['$10load_deref.3']
LINE 262 : 2020-06-05 19:05:02,016 [DEBUG   ] dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=226)
LINE 263 : 2020-06-05 19:05:02,016 [DEBUG   ] stack ['$10load_deref.3', '$a12.4']
LINE 262 : 2020-06-05 19:05:02,016 [DEBUG   ] dispatch pc=16, inst=STORE_FAST(arg=0, lineno=226)
LINE 263 : 2020-06-05 19:05:02,016 [DEBUG   ] stack ['$14call_function.5']
LINE 262 : 2020-06-05 19:05:02,016 [DEBUG   ] dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=227)
LINE 263 : 2020-06-05 19:05:02,016 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,017 [DEBUG   ] dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=227)
LINE 263 : 2020-06-05 19:05:02,017 [DEBUG   ] stack ['$b18.6']
LINE 262 : 2020-06-05 19:05:02,017 [DEBUG   ] dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=227)
LINE 263 : 2020-06-05 19:05:02,017 [DEBUG   ] stack ['$b18.6', '$const20.7']
LINE 262 : 2020-06-05 19:05:02,017 [DEBUG   ] dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=227)
LINE 263 : 2020-06-05 19:05:02,017 [DEBUG   ] stack ['$22compare_op.8']
LINE 135 : 2020-06-05 19:05:02,017 [DEBUG   ] end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,017 [DEBUG   ] pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,017 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,017 [DEBUG   ] dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=228)
LINE 263 : 2020-06-05 19:05:02,017 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,017 [DEBUG   ] dispatch pc=28, inst=STORE_FAST(arg=3, lineno=228)
LINE 263 : 2020-06-05 19:05:02,017 [DEBUG   ] stack ['$const26.0']
LINE 262 : 2020-06-05 19:05:02,017 [DEBUG   ] dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=229)
LINE 263 : 2020-06-05 19:05:02,017 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,018 [DEBUG   ] dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=229)
LINE 263 : 2020-06-05 19:05:02,018 [DEBUG   ] stack ['$b30.1']
LINE 262 : 2020-06-05 19:05:02,018 [DEBUG   ] dispatch pc=34, inst=STORE_FAST(arg=4, lineno=229)
LINE 263 : 2020-06-05 19:05:02,018 [DEBUG   ] stack ['$32unary_negative.2']
LINE 262 : 2020-06-05 19:05:02,018 [DEBUG   ] dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=230)
LINE 263 : 2020-06-05 19:05:02,018 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,018 [DEBUG   ] dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=230)
LINE 263 : 2020-06-05 19:05:02,018 [DEBUG   ] stack ['$exp36.3']
LINE 262 : 2020-06-05 19:05:02,019 [DEBUG   ] dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=230)
LINE 263 : 2020-06-05 19:05:02,019 [DEBUG   ] stack ['$exp36.3', '$const38.4']
LINE 262 : 2020-06-05 19:05:02,019 [DEBUG   ] dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=230)
LINE 263 : 2020-06-05 19:05:02,019 [DEBUG   ] stack ['$40compare_op.5']
LINE 135 : 2020-06-05 19:05:02,019 [DEBUG   ] end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,019 [DEBUG   ] pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,019 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,019 [DEBUG   ] dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=241)
LINE 263 : 2020-06-05 19:05:02,019 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,019 [DEBUG   ] dispatch pc=100, inst=STORE_FAST(arg=3, lineno=241)
LINE 263 : 2020-06-05 19:05:02,019 [DEBUG   ] stack ['$const98.0']
LINE 262 : 2020-06-05 19:05:02,019 [DEBUG   ] dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=242)
LINE 263 : 2020-06-05 19:05:02,020 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,020 [DEBUG   ] dispatch pc=104, inst=STORE_FAST(arg=4, lineno=242)
LINE 263 : 2020-06-05 19:05:02,020 [DEBUG   ] stack ['$b102.1']
LINE 135 : 2020-06-05 19:05:02,020 [DEBUG   ] end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,020 [DEBUG   ] pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,020 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,020 [DEBUG   ] dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=231)
LINE 263 : 2020-06-05 19:05:02,020 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,020 [DEBUG   ] dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=231)
LINE 263 : 2020-06-05 19:05:02,020 [DEBUG   ] stack ['$44load_global.0']
LINE 135 : 2020-06-05 19:05:02,020 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:02,020 [DEBUG   ] pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,020 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,020 [DEBUG   ] dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=232)
LINE 263 : 2020-06-05 19:05:02,021 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,021 [DEBUG   ] dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=232)
LINE 263 : 2020-06-05 19:05:02,021 [DEBUG   ] stack ['$48load_deref.0']
LINE 135 : 2020-06-05 19:05:02,021 [DEBUG   ] end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,021 [DEBUG   ] pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,021 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,021 [DEBUG   ] dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=243)
LINE 263 : 2020-06-05 19:05:02,021 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,021 [DEBUG   ] dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=243)
LINE 263 : 2020-06-05 19:05:02,021 [DEBUG   ] stack ['$exp106.0']
LINE 262 : 2020-06-05 19:05:02,021 [DEBUG   ] dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=243)
LINE 263 : 2020-06-05 19:05:02,021 [DEBUG   ] stack ['$exp106.0', '$const108.1']
LINE 262 : 2020-06-05 19:05:02,021 [DEBUG   ] dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=243)
LINE 263 : 2020-06-05 19:05:02,022 [DEBUG   ] stack ['$110compare_op.2']
LINE 135 : 2020-06-05 19:05:02,022 [DEBUG   ] end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,022 [DEBUG   ] pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,022 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,022 [DEBUG   ] dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=233)
LINE 263 : 2020-06-05 19:05:02,022 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,022 [DEBUG   ] dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=233)
LINE 263 : 2020-06-05 19:05:02,022 [DEBUG   ] stack ['$a52.0']
LINE 262 : 2020-06-05 19:05:02,022 [DEBUG   ] dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=233)
LINE 263 : 2020-06-05 19:05:02,022 [DEBUG   ] stack ['$a52.0', '$const54.1']
LINE 262 : 2020-06-05 19:05:02,023 [DEBUG   ] dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=233)
LINE 263 : 2020-06-05 19:05:02,023 [DEBUG   ] stack ['$56compare_op.2']
LINE 135 : 2020-06-05 19:05:02,023 [DEBUG   ] end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,023 [DEBUG   ] pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:02,023 [DEBUG   ] pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,023 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,023 [DEBUG   ] dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=245)
LINE 263 : 2020-06-05 19:05:02,023 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,023 [DEBUG   ] dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=245)
LINE 263 : 2020-06-05 19:05:02,023 [DEBUG   ] stack ['$114load_global.0']
LINE 262 : 2020-06-05 19:05:02,023 [DEBUG   ] dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=245)
LINE 263 : 2020-06-05 19:05:02,023 [DEBUG   ] stack ['$116load_method.1']
LINE 262 : 2020-06-05 19:05:02,024 [DEBUG   ] dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=245)
LINE 263 : 2020-06-05 19:05:02,024 [DEBUG   ] stack ['$116load_method.1', '$a118.2']
LINE 262 : 2020-06-05 19:05:02,024 [DEBUG   ] dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=245)
LINE 263 : 2020-06-05 19:05:02,024 [DEBUG   ] stack ['$116load_method.1', '$a118.2', '$120load_global.3']
LINE 262 : 2020-06-05 19:05:02,024 [DEBUG   ] dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=245)
LINE 263 : 2020-06-05 19:05:02,024 [DEBUG   ] stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
LINE 262 : 2020-06-05 19:05:02,024 [DEBUG   ] dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=245)
LINE 263 : 2020-06-05 19:05:02,024 [DEBUG   ] stack ['$116load_method.1', '$a118.2', '$124call_function.5']
LINE 262 : 2020-06-05 19:05:02,024 [DEBUG   ] dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=245)
LINE 263 : 2020-06-05 19:05:02,024 [DEBUG   ] stack ['$126call_method.6']
LINE 135 : 2020-06-05 19:05:02,025 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:02,025 [DEBUG   ] pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,025 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,025 [DEBUG   ] dispatch pc=130, inst=SETUP_LOOP(arg=44, lineno=246)
LINE 263 : 2020-06-05 19:05:02,025 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:02,025 [DEBUG   ] end state. edges=[Edge(pc=132, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:02,025 [DEBUG   ] pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=132 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,025 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,025 [DEBUG   ] dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=234)
LINE 263 : 2020-06-05 19:05:02,025 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,025 [DEBUG   ] dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=234)
LINE 263 : 2020-06-05 19:05:02,026 [DEBUG   ] stack ['$60load_deref.0']
LINE 135 : 2020-06-05 19:05:02,026 [DEBUG   ] end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,026 [DEBUG   ] pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,026 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,027 [DEBUG   ] dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=238)
LINE 263 : 2020-06-05 19:05:02,027 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,027 [DEBUG   ] dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=238)
LINE 263 : 2020-06-05 19:05:02,028 [DEBUG   ] stack ['$a76.0']
LINE 262 : 2020-06-05 19:05:02,028 [DEBUG   ] dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=238)
LINE 263 : 2020-06-05 19:05:02,028 [DEBUG   ] stack ['$a76.0', '$const78.1']
LINE 262 : 2020-06-05 19:05:02,028 [DEBUG   ] dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=238)
LINE 263 : 2020-06-05 19:05:02,029 [DEBUG   ] stack ['$80compare_op.2']
LINE 135 : 2020-06-05 19:05:02,029 [DEBUG   ] end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,029 [DEBUG   ] pending: deque([State(pc_initial=132 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,029 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,029 [DEBUG   ] dispatch pc=132, inst=LOAD_FAST(arg=4, lineno=246)
LINE 263 : 2020-06-05 19:05:02,029 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,029 [DEBUG   ] dispatch pc=134, inst=LOAD_CONST(arg=2, lineno=246)
LINE 263 : 2020-06-05 19:05:02,029 [DEBUG   ] stack ['$exp132.0']
LINE 262 : 2020-06-05 19:05:02,029 [DEBUG   ] dispatch pc=136, inst=COMPARE_OP(arg=3, lineno=246)
LINE 263 : 2020-06-05 19:05:02,030 [DEBUG   ] stack ['$exp132.0', '$const134.1']
LINE 262 : 2020-06-05 19:05:02,030 [DEBUG   ] dispatch pc=138, inst=POP_JUMP_IF_FALSE(arg=174, lineno=246)
LINE 263 : 2020-06-05 19:05:02,030 [DEBUG   ] stack ['$136compare_op.2']
LINE 135 : 2020-06-05 19:05:02,030 [DEBUG   ] end state. edges=[Edge(pc=140, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=174, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:02,030 [DEBUG   ] pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,031 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,031 [DEBUG   ] dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=235)
LINE 263 : 2020-06-05 19:05:02,032 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,032 [DEBUG   ] dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=235)
LINE 263 : 2020-06-05 19:05:02,032 [DEBUG   ] stack ['$64load_deref.0']
LINE 135 : 2020-06-05 19:05:02,032 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:02,032 [DEBUG   ] pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,032 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,032 [DEBUG   ] dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=237)
LINE 263 : 2020-06-05 19:05:02,032 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,033 [DEBUG   ] dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=237)
LINE 263 : 2020-06-05 19:05:02,033 [DEBUG   ] stack ['$68load_global.0']
LINE 262 : 2020-06-05 19:05:02,033 [DEBUG   ] dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=237)
LINE 263 : 2020-06-05 19:05:02,033 [DEBUG   ] stack ['$68load_global.0', '$const70.1']
LINE 262 : 2020-06-05 19:05:02,033 [DEBUG   ] dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=237)
LINE 263 : 2020-06-05 19:05:02,033 [DEBUG   ] stack ['$72call_function.2']
LINE 135 : 2020-06-05 19:05:02,033 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:02,033 [DEBUG   ] pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,033 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,033 [DEBUG   ] dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=238)
LINE 263 : 2020-06-05 19:05:02,033 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,033 [DEBUG   ] dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=238)
LINE 263 : 2020-06-05 19:05:02,034 [DEBUG   ] stack ['$a84.0']
LINE 262 : 2020-06-05 19:05:02,034 [DEBUG   ] dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=238)
LINE 263 : 2020-06-05 19:05:02,034 [DEBUG   ] stack ['$a84.0', '$const86.1']
LINE 262 : 2020-06-05 19:05:02,034 [DEBUG   ] dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=238)
LINE 263 : 2020-06-05 19:05:02,034 [DEBUG   ] stack ['$88compare_op.2']
LINE 135 : 2020-06-05 19:05:02,034 [DEBUG   ] end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,034 [DEBUG   ] pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:02,035 [DEBUG   ] pending: deque([State(pc_initial=140 nstack_initial=0), State(pc_initial=174 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,035 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,035 [DEBUG   ] dispatch pc=140, inst=LOAD_FAST(arg=4, lineno=247)
LINE 263 : 2020-06-05 19:05:02,035 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,035 [DEBUG   ] dispatch pc=142, inst=LOAD_CONST(arg=1, lineno=247)
LINE 263 : 2020-06-05 19:05:02,035 [DEBUG   ] stack ['$exp140.0']
LINE 262 : 2020-06-05 19:05:02,035 [DEBUG   ] dispatch pc=144, inst=BINARY_AND(arg=None, lineno=247)
LINE 263 : 2020-06-05 19:05:02,035 [DEBUG   ] stack ['$exp140.0', '$const142.1']
LINE 262 : 2020-06-05 19:05:02,035 [DEBUG   ] dispatch pc=146, inst=POP_JUMP_IF_FALSE(arg=156, lineno=247)
LINE 263 : 2020-06-05 19:05:02,035 [DEBUG   ] stack ['$144binary_and.2']
LINE 135 : 2020-06-05 19:05:02,035 [DEBUG   ] end state. edges=[Edge(pc=148, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0), Edge(pc=156, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:02,035 [DEBUG   ] pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,035 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,035 [DEBUG   ] dispatch pc=174, inst=POP_BLOCK(arg=None, lineno=250)
LINE 263 : 2020-06-05 19:05:02,036 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:02,036 [DEBUG   ] end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,036 [DEBUG   ] pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,036 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,036 [DEBUG   ] dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=239)
LINE 263 : 2020-06-05 19:05:02,036 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,036 [DEBUG   ] dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=239)
LINE 263 : 2020-06-05 19:05:02,036 [DEBUG   ] stack ['$const92.0']
LINE 135 : 2020-06-05 19:05:02,036 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:02,036 [DEBUG   ] pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:02,036 [DEBUG   ] pending: deque([State(pc_initial=148 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,036 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,036 [DEBUG   ] dispatch pc=148, inst=LOAD_FAST(arg=2, lineno=248)
LINE 263 : 2020-06-05 19:05:02,037 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,037 [DEBUG   ] dispatch pc=150, inst=LOAD_FAST(arg=0, lineno=248)
LINE 263 : 2020-06-05 19:05:02,037 [DEBUG   ] stack ['$r148.0']
LINE 262 : 2020-06-05 19:05:02,037 [DEBUG   ] dispatch pc=152, inst=INPLACE_MULTIPLY(arg=None, lineno=248)
LINE 263 : 2020-06-05 19:05:02,037 [DEBUG   ] stack ['$r148.0', '$a150.1']
LINE 262 : 2020-06-05 19:05:02,037 [DEBUG   ] dispatch pc=154, inst=STORE_FAST(arg=2, lineno=248)
LINE 263 : 2020-06-05 19:05:02,037 [DEBUG   ] stack ['$152inplace_multiply.2']
LINE 135 : 2020-06-05 19:05:02,037 [DEBUG   ] end state. edges=[Edge(pc=156, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:02,037 [DEBUG   ] pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=156 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,037 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,037 [DEBUG   ] dispatch pc=156, inst=LOAD_FAST(arg=4, lineno=249)
LINE 263 : 2020-06-05 19:05:02,037 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,037 [DEBUG   ] dispatch pc=158, inst=LOAD_CONST(arg=1, lineno=249)
LINE 263 : 2020-06-05 19:05:02,037 [DEBUG   ] stack ['$exp156.0']
LINE 262 : 2020-06-05 19:05:02,038 [DEBUG   ] dispatch pc=160, inst=INPLACE_RSHIFT(arg=None, lineno=249)
LINE 263 : 2020-06-05 19:05:02,038 [DEBUG   ] stack ['$exp156.0', '$const158.1']
LINE 262 : 2020-06-05 19:05:02,038 [DEBUG   ] dispatch pc=162, inst=STORE_FAST(arg=4, lineno=249)
LINE 263 : 2020-06-05 19:05:02,038 [DEBUG   ] stack ['$160inplace_rshift.2']
LINE 262 : 2020-06-05 19:05:02,038 [DEBUG   ] dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=250)
LINE 263 : 2020-06-05 19:05:02,038 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,038 [DEBUG   ] dispatch pc=166, inst=LOAD_FAST(arg=0, lineno=250)
LINE 263 : 2020-06-05 19:05:02,038 [DEBUG   ] stack ['$a164.3']
LINE 262 : 2020-06-05 19:05:02,038 [DEBUG   ] dispatch pc=168, inst=INPLACE_MULTIPLY(arg=None, lineno=250)
LINE 263 : 2020-06-05 19:05:02,038 [DEBUG   ] stack ['$a164.3', '$a166.4']
LINE 262 : 2020-06-05 19:05:02,038 [DEBUG   ] dispatch pc=170, inst=STORE_FAST(arg=0, lineno=250)
LINE 263 : 2020-06-05 19:05:02,038 [DEBUG   ] stack ['$168inplace_multiply.5']
LINE 262 : 2020-06-05 19:05:02,039 [DEBUG   ] dispatch pc=172, inst=JUMP_ABSOLUTE(arg=132, lineno=250)
LINE 263 : 2020-06-05 19:05:02,039 [DEBUG   ] stack []
LINE 135 : 2020-06-05 19:05:02,039 [DEBUG   ] end state. edges=[Edge(pc=132, stack=(), blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), npush=0)]
LINE 100 : 2020-06-05 19:05:02,039 [DEBUG   ] pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=156 nstack_initial=0), State(pc_initial=132 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,039 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,039 [DEBUG   ] dispatch pc=176, inst=LOAD_FAST(arg=3, lineno=252)
LINE 263 : 2020-06-05 19:05:02,039 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,039 [DEBUG   ] dispatch pc=178, inst=POP_JUMP_IF_FALSE(arg=188, lineno=252)
LINE 263 : 2020-06-05 19:05:02,039 [DEBUG   ] stack ['$invert176.0']
LINE 135 : 2020-06-05 19:05:02,039 [DEBUG   ] end state. edges=[Edge(pc=180, stack=(), blockstack=(), npush=0), Edge(pc=188, stack=(), blockstack=(), npush=0)]
LINE 100 : 2020-06-05 19:05:02,039 [DEBUG   ] pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=132 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:02,040 [DEBUG   ] pending: deque([State(pc_initial=132 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
LINE 100 : 2020-06-05 19:05:02,040 [DEBUG   ] pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,040 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,040 [DEBUG   ] dispatch pc=180, inst=LOAD_CONST(arg=8, lineno=252)
LINE 263 : 2020-06-05 19:05:02,040 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,040 [DEBUG   ] dispatch pc=182, inst=LOAD_FAST(arg=2, lineno=252)
LINE 263 : 2020-06-05 19:05:02,040 [DEBUG   ] stack ['$const180.0']
LINE 262 : 2020-06-05 19:05:02,040 [DEBUG   ] dispatch pc=184, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=252)
LINE 263 : 2020-06-05 19:05:02,040 [DEBUG   ] stack ['$const180.0', '$r182.1']
LINE 262 : 2020-06-05 19:05:02,040 [DEBUG   ] dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=252)
LINE 263 : 2020-06-05 19:05:02,040 [DEBUG   ] stack ['$184binary_true_divide.2']
LINE 135 : 2020-06-05 19:05:02,040 [DEBUG   ] end state. edges=[]
LINE 100 : 2020-06-05 19:05:02,041 [DEBUG   ] pending: deque([State(pc_initial=188 nstack_initial=0)])
LINE 103 : 2020-06-05 19:05:02,041 [DEBUG   ] stack: []
LINE 262 : 2020-06-05 19:05:02,041 [DEBUG   ] dispatch pc=188, inst=LOAD_FAST(arg=2, lineno=252)
LINE 263 : 2020-06-05 19:05:02,041 [DEBUG   ] stack []
LINE 262 : 2020-06-05 19:05:02,041 [DEBUG   ] dispatch pc=190, inst=RETURN_VALUE(arg=None, lineno=252)
LINE 263 : 2020-06-05 19:05:02,041 [DEBUG   ] stack ['$r188.0']
LINE 135 : 2020-06-05 19:05:02,041 [DEBUG   ] end state. edges=[]
LINE 163 : 2020-06-05 19:05:02,043 [DEBUG   ] -------------------------Prune PHIs-------------------------
LINE 232 : 2020-06-05 19:05:02,043 [DEBUG   ] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=44 nstack_initial=0): set(),
             State(pc_initial=48 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=106 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=130 nstack_initial=0): set(),
             State(pc_initial=132 nstack_initial=0): set(),
             State(pc_initial=140 nstack_initial=0): set(),
             State(pc_initial=148 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=188 nstack_initial=0): set()})
LINE 189 : 2020-06-05 19:05:02,044 [DEBUG   ] defmap: {}
LINE 190 : 2020-06-05 19:05:02,045 [DEBUG   ] phismap: defaultdict(<class 'set'>, {})
LINE 211 : 2020-06-05 19:05:02,046 [DEBUG   ] changing phismap: defaultdict(<class 'set'>, {})
LINE 220 : 2020-06-05 19:05:02,046 [DEBUG   ] keep phismap: {}
LINE 226 : 2020-06-05 19:05:02,046 [DEBUG   ] new_out: defaultdict(<class 'dict'>, {})
LINE 236 : 2020-06-05 19:05:02,046 [DEBUG   ] ----------------------DONE Prune PHIs-----------------------
LINE 147 : 2020-06-05 19:05:02,047 [DEBUG   ] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
LINE 147 : 2020-06-05 19:05:02,047 [DEBUG   ] block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
LINE 147 : 2020-06-05 19:05:02,047 [DEBUG   ] block_infos State(pc_initial=44 nstack_initial=0):
AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:02,047 [DEBUG   ] block_infos State(pc_initial=48 nstack_initial=0):
AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
LINE 147 : 2020-06-05 19:05:02,047 [DEBUG   ] block_infos State(pc_initial=52 nstack_initial=0):
AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
LINE 147 : 2020-06-05 19:05:02,047 [DEBUG   ] block_infos State(pc_initial=60 nstack_initial=0):
AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=64 nstack_initial=0):
AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=106 nstack_initial=0):
AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=130 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={132: ()})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=132 nstack_initial=0):
AdaptBlockInfo(insts=((132, {'res': '$exp132.0'}), (134, {'res': '$const134.1'}), (136, {'lhs': '$exp132.0', 'rhs': '$const134.1', 'res': '$136compare_op.2'}), (138, {'pred': '$136compare_op.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={140: (), 174: ()})
LINE 147 : 2020-06-05 19:05:02,048 [DEBUG   ] block_infos State(pc_initial=140 nstack_initial=0):
AdaptBlockInfo(insts=((140, {'res': '$exp140.0'}), (142, {'res': '$const142.1'}), (144, {'lhs': '$exp140.0', 'rhs': '$const142.1', 'res': '$144binary_and.2'}), (146, {'pred': '$144binary_and.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={148: (), 156: ()})
LINE 147 : 2020-06-05 19:05:02,049 [DEBUG   ] block_infos State(pc_initial=148 nstack_initial=0):
AdaptBlockInfo(insts=((148, {'res': '$r148.0'}), (150, {'res': '$a150.1'}), (152, {'lhs': '$r148.0', 'rhs': '$a150.1', 'res': '$152inplace_multiply.2'}), (154, {'value': '$152inplace_multiply.2'})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={156: ()})
LINE 147 : 2020-06-05 19:05:02,049 [DEBUG   ] block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$exp156.0'}), (158, {'res': '$const158.1'}), (160, {'lhs': '$exp156.0', 'rhs': '$const158.1', 'res': '$160inplace_rshift.2'}), (162, {'value': '$160inplace_rshift.2'}), (164, {'res': '$a164.3'}), (166, {'res': '$a166.4'}), (168, {'lhs': '$a164.3', 'rhs': '$a166.4', 'res': '$168inplace_multiply.5'}), (170, {'value': '$168inplace_multiply.5'}), (172, {})), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={132: ()})
LINE 147 : 2020-06-05 19:05:02,049 [DEBUG   ] block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=(), outgoing_phis={}, blockstack=({'kind': BlockKind(LOOP), 'end': 176, 'entry_stack': 0, 'stack_depth': 0, 'handler': None},), active_try_block=None, outgoing_edgepushed={176: ()})
LINE 147 : 2020-06-05 19:05:02,049 [DEBUG   ] block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$invert176.0'}), (178, {'pred': '$invert176.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={180: (), 188: ()})
LINE 147 : 2020-06-05 19:05:02,049 [DEBUG   ] block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {'res': '$const180.0'}), (182, {'res': '$r182.1'}), (184, {'lhs': '$const180.0', 'rhs': '$r182.1', 'res': '$184binary_true_divide.2'}), (186, {'retval': '$184binary_true_divide.2', 'castval': '$186return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 147 : 2020-06-05 19:05:02,049 [DEBUG   ] block_infos State(pc_initial=188 nstack_initial=0):
AdaptBlockInfo(insts=((188, {'res': '$r188.0'}), (190, {'retval': '$r188.0', 'castval': '$190return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
LINE 140 : 2020-06-05 19:05:02,052 [DEBUG   ] label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $2load_deref.0 = freevar(tp: float32)    ['$2load_deref.0']
    $const4.1 = const(int, 1)                ['$const4.1']
    $6call_function.2 = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:225)], kws=(), vararg=None) ['$2load_deref.0', '$6call_function.2', '$const4.1']
    r = $6call_function.2                    ['$6call_function.2', 'r']
    $10load_deref.3 = freevar(tp: float32)   ['$10load_deref.3']
    $14call_function.5 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:225)], kws=(), vararg=None) ['$10load_deref.3', '$14call_function.5', 'a']
    a.1 = $14call_function.5                 ['$14call_function.5', 'a.1']
    $const20.7 = const(int, 0)               ['$const20.7']
    $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
    branch $22compare_op.8, 26, 98           ['$22compare_op.8']
label 26:
    $const26.0 = const(bool, True)           ['$const26.0']
    invert = $const26.0                      ['$const26.0', 'invert']
    $32unary_negative.2 = unary(fn=<built-in function neg>, value=b) ['$32unary_negative.2', 'b']
    exp = $32unary_negative.2                ['$32unary_negative.2', 'exp']
    $const38.4 = const(int, 0)               ['$const38.4']
    $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
    branch $40compare_op.5, 44, 48           ['$40compare_op.5']
label 44:
    $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
    raise $44load_global.0                   ['$44load_global.0']
label 48:
    $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
    branch $48load_deref.0, 52, 106          ['$48load_deref.0']
label 52:
    $const54.1 = const(int, 0)               ['$const54.1']
    $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
    branch $56compare_op.2, 60, 76           ['$56compare_op.2']
label 60:
    $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
    branch $60load_deref.0, 64, 68           ['$60load_deref.0']
label 64:
    $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
    $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
    return $66return_value.1                 ['$66return_value.1']
label 68:
    $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
    $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
    $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:237)], kws=(), vararg=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
    raise $72call_function.2                 ['$72call_function.2']
label 76:
    $const78.1 = const(int, 1)               ['$const78.1']
    $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
    branch $80compare_op.2, 84, 106          ['$80compare_op.2']
label 84:
    $const86.1 = const(int, -1)              ['$const86.1']
    $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
    branch $88compare_op.2, 92, 106          ['$88compare_op.2']
label 92:
    $const92.0 = const(int, 0)               ['$const92.0']
    $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
    return $94return_value.1                 ['$94return_value.1']
label 98:
    $const98.0 = const(bool, False)          ['$const98.0']
    invert = $const98.0                      ['$const98.0', 'invert']
    exp = b                                  ['b', 'exp']
    jump 106                                 []
label 106:
    $const108.1 = const(int, 65536)          ['$const108.1']
    $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
    branch $110compare_op.2, 114, 130        ['$110compare_op.2']
label 114:
    $114load_global.0 = global(math: <module 'math' from '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload/math.cpython-37m-darwin.so'>) ['$114load_global.0']
    $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
    $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
    $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:225)], kws=(), vararg=None) ['$120load_global.3', '$124call_function.5', 'b']
    $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:226), Var($124call_function.5, numbers.py:245)], kws=(), vararg=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
    $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
    return $128return_value.7                ['$128return_value.7']
label 130:
    jump 132                                 []
label 132:
    $const134.1 = const(int, 0)              ['$const134.1']
    $136compare_op.2 = exp != $const134.1    ['$136compare_op.2', '$const134.1', 'exp']
    branch $136compare_op.2, 140, 174        ['$136compare_op.2']
label 140:
    $const142.1 = const(int, 1)              ['$const142.1']
    $144binary_and.2 = exp & $const142.1     ['$144binary_and.2', '$const142.1', 'exp']
    branch $144binary_and.2, 148, 156        ['$144binary_and.2']
label 148:
    $152inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$152inplace_multiply.2', 'a.1', 'r']
    r = $152inplace_multiply.2               ['$152inplace_multiply.2', 'r']
    jump 156                                 []
label 156:
    $const158.1 = const(int, 1)              ['$const158.1']
    $160inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const158.1, static_lhs=Undefined, static_rhs=Undefined) ['$160inplace_rshift.2', '$const158.1', 'exp']
    exp = $160inplace_rshift.2               ['$160inplace_rshift.2', 'exp']
    $168inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$168inplace_multiply.5', 'a.1', 'a.1']
    a.1 = $168inplace_multiply.5             ['$168inplace_multiply.5', 'a.1']
    jump 132                                 []
label 174:
    jump 176                                 []
label 176:
    branch invert, 180, 188                  ['invert']
label 180:
    $const180.0 = const(float, 1.0)          ['$const180.0']
    $184binary_true_divide.2 = $const180.0 / r ['$184binary_true_divide.2', '$const180.0', 'r']
    $186return_value.3 = cast(value=$184binary_true_divide.2) ['$184binary_true_divide.2', '$186return_value.3']
    return $186return_value.3                ['$186return_value.3']
label 188:
    $190return_value.1 = cast(value=r)       ['$190return_value.1', 'r']
    return $190return_value.1                ['$190return_value.1']

LINE 2515: 2020-06-05 19:05:02,248 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:02,893 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:02,945 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:03,659 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:03,693 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:03,718 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:22,104 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:22,814 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:22,851 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:23,669 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:23,704 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:05:23,731 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:25,429 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:25,775 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:25,802 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:26,163 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:26,187 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:26,204 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:33,307 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:33,341 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:33,941 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:33,991 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:34,715 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:34,763 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:34,791 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:40,968 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:41,316 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:41,378 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:41,907 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:41,934 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:41,954 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:54,198 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:54,956 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:55,405 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:56,350 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:56,948 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:06:57,314 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,231 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,236 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,581 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,583 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,612 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,616 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,961 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,975 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:30,993 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:31,003 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:31,020 [DEBUG   ] update_title_pos
LINE 2515: 2020-06-05 19:12:31,027 [DEBUG   ] update_title_pos
LINE 119 : 2020-06-05 19:20:17,137 [WARNING ] R[write to console]: converting counts to integer mode

LINE 119 : 2020-06-05 19:20:18,039 [WARNING ] R[write to console]: estimating size factors

LINE 119 : 2020-06-05 19:20:18,616 [WARNING ] R[write to console]: In addition: 
LINE 119 : 2020-06-05 19:20:18,616 [WARNING ] R[write to console]: Warning message:

LINE 119 : 2020-06-05 19:20:18,617 [WARNING ] R[write to console]: In DESeqDataSet(se, design = design, ignoreRank) :
LINE 119 : 2020-06-05 19:20:18,617 [WARNING ] R[write to console]: 
 
LINE 119 : 2020-06-05 19:20:18,618 [WARNING ] R[write to console]:  some variables in design formula are characters, converting to factors

LINE 119 : 2020-06-05 19:20:35,475 [WARNING ] R[write to console]: converting counts to integer mode

LINE 119 : 2020-06-05 19:20:35,766 [WARNING ] R[write to console]: estimating size factors

LINE 119 : 2020-06-05 19:20:36,290 [WARNING ] R[write to console]: Error in estimateSizeFactorsForMatrix(counts(object), locfunc = locfunc,  : 
  every gene contains at least one zero, cannot compute log geometric means
Calls: <Anonymous> ... estimateSizeFactors -> .local -> estimateSizeFactorsForMatrix

LINE 119 : 2020-06-05 19:20:36,290 [WARNING ] R[write to console]: In addition: 
LINE 119 : 2020-06-05 19:20:36,290 [WARNING ] R[write to console]: Warning message:

LINE 119 : 2020-06-05 19:20:36,290 [WARNING ] R[write to console]: In DESeqDataSet(se, design = design, ignoreRank) :
LINE 119 : 2020-06-05 19:20:36,290 [WARNING ] R[write to console]: 
 
LINE 119 : 2020-06-05 19:20:36,291 [WARNING ] R[write to console]:  some variables in design formula are characters, converting to factors

LINE 119 : 2020-06-05 19:20:48,907 [WARNING ] R[write to console]: converting counts to integer mode

LINE 119 : 2020-06-05 19:20:49,433 [WARNING ] R[write to console]: estimating size factors

LINE 119 : 2020-06-05 19:20:50,075 [WARNING ] R[write to console]: estimating dispersions

LINE 119 : 2020-06-05 19:20:50,158 [WARNING ] R[write to console]: gene-wise dispersion estimates

LINE 119 : 2020-06-05 19:21:09,367 [WARNING ] R[write to console]: mean-dispersion relationship

LINE 119 : 2020-06-05 19:21:09,470 [WARNING ] R[write to console]: -- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.

LINE 119 : 2020-06-05 19:21:09,652 [WARNING ] R[write to console]: final dispersion estimates

LINE 119 : 2020-06-05 19:21:28,731 [WARNING ] R[write to console]: fitting model and testing

LINE 119 : 2020-06-05 19:21:35,730 [WARNING ] R[write to console]: -- replacing outliers and refitting for 2 genes
-- DESeq argument 'minReplicatesForReplace' = 7 
-- original counts are preserved in counts(dds)

LINE 119 : 2020-06-05 19:21:35,782 [WARNING ] R[write to console]: estimating dispersions

LINE 119 : 2020-06-05 19:21:36,359 [WARNING ] R[write to console]: fitting model and testing

LINE 119 : 2020-06-05 19:24:30,072 [WARNING ] R[write to console]: converting counts to integer mode

LINE 119 : 2020-06-05 19:24:30,473 [WARNING ] R[write to console]: estimating size factors

LINE 119 : 2020-06-05 19:24:30,932 [WARNING ] R[write to console]: estimating dispersions

LINE 119 : 2020-06-05 19:24:31,010 [WARNING ] R[write to console]: gene-wise dispersion estimates

LINE 119 : 2020-06-05 19:24:50,759 [WARNING ] R[write to console]: mean-dispersion relationship

LINE 119 : 2020-06-05 19:24:50,841 [WARNING ] R[write to console]: -- note: fitType='parametric', but the dispersion trend was not well captured by the
   function: y = a/x + b, and a local regression fit was automatically substituted.
   specify fitType='local' or 'mean' to avoid this message next time.

LINE 119 : 2020-06-05 19:24:50,980 [WARNING ] R[write to console]: final dispersion estimates

LINE 119 : 2020-06-05 19:25:03,027 [WARNING ] R[write to console]: fitting model and testing

LINE 119 : 2020-06-05 19:25:10,087 [WARNING ] R[write to console]: -- replacing outliers and refitting for 2 genes
-- DESeq argument 'minReplicatesForReplace' = 7 
-- original counts are preserved in counts(dds)

LINE 119 : 2020-06-05 19:25:10,130 [WARNING ] R[write to console]: estimating dispersions

LINE 119 : 2020-06-05 19:25:11,227 [WARNING ] R[write to console]: fitting model and testing

