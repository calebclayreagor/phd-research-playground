embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
lin1 <- getLineages(embedding, labels, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
lin1 <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
embedding_mat
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
labels_vec
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
labels_vec
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
labels
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
head(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
head(labels)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.table("labels.csv",header=TRUE,sep=',',row.names=1)
head(embedding)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
head(embedding)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
lin1
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
head(embedding)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep='',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep='',row.names=1)
head(labels)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
head(labels)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding_mat, labels_vec, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
embedding_mat <- as.matrix(embedding)
labels_vec <- as.vector(labels)
lin1 <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
Cstack_info()
lineages <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
Cstack_info()
as.vector(labels)
lineages <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
Cstack_info()
lineages <- getLineages(as.matrix(embedding), as.vector(labels), start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
data("slingshotexample")
rd
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
data("slingshotExample")
rd
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
Cstack_info()
lineages <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
data("slingshotExample")
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
Cstack_info()
lineages <- getLineages(rd, cl, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
data("slingshotExample")
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(rd, cl, start.clus = '1')
lineages
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
data("slingshotExample")
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
lineages
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
lineages
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("slingshot")
# library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
lineages
knitr::opts_chunk$set(echo = TRUE)
#if (!requireNamespace("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("slingshot")
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
lineages
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
lineages
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
ulimit
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
knitr::opts_chunk$set(echo = TRUE)
library(slingshot, quietly = FALSE)
embedding=read.table("embedding.csv",header=TRUE,sep=',',row.names=1)
labels=read.csv("labels.csv",header=TRUE,sep=',',row.names=1)
lineages <- getLineages(embedding, labels, start.clus = '1')
library(Seurat)
y
head(fish_data)
install.packages("Seurat")
# install.packages("Seurat")
library(Seurat)
fish_data=read.table("datasetIntegration/fish.csv",header=TRUE,sep=',',row.names=1)
fish_data=read.table("/datasetIntegration/fish.csv",header=TRUE,sep=',',row.names=1)
fish_data=read.table("./datasetIntegration/fish.csv",header=TRUE,sep=',',row.names=1)
# install.packages("Seurat")
library(Seurat)
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
getwd()
setwd("/Users/calebreagor/Library/Mobile\ Documents/com~apple~CloudDocs/Documents/grad/HudspethLab")
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
setwd("/Users/calebreagor/Library/Mobile\ Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/")
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
head(fish_data)
View(fish_data)
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
head(fish_data)
View(fish_data)
mouse_data=read.table("mouse.csv",header=TRUE,sep=',',row.names=1)
View(mouse_data)
fish_object <- CreateSeuratObject(counts=fish_data) # these are actually normalized and imputed
mouse_object <- CreateSeuratObject(counts=mouse_data)
mouse_object
anchors <- FindIntegrationAnchors(c(fish_object,mouse_object),dims=1:30)
anchors <- FindIntegrationAnchors(c(fish_object,mouse_object),scale=FALSE,dims=1:30)
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
mouse_data=read.table("mouse.csv",header=TRUE,sep=',',row.names=1)
fish_object <- CreateSeuratObject(counts=fish_data)    # these are actually normalized and imputed
mouse_object <- CreateSeuratObject(counts=mouse_data)
View(fish_object)
View(fish_data)
fish_seurObj <- CreateSeuratObject(counts=fish_data)
mouse_seurObj <- CreateSeuratObject(counts=mouse_data)
fish_seurObj <- NormalizeData(fish_seurObj,verbose = FALSE)
mouse_seurObj <- NormalizeData(mouse_seurObj,verbose = FALSE)
fish_seurObj
fish_seurObj <- FindVariableFeatures(fish_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
mouse_seurObj <- FindVariableFeatures(mouse_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
anchors <- FindIntegrationAnchors(c(fish_object,mouse_object),dims=1:30)
anchors <- FindIntegrationAnchors(c(fish_seurObj,mouse_seurObj),dims=1:30)
integrated <- IntegrateData(anchorset=anchors,dims=1:30)
integrated
DefaultAssay(integrated) <- "integrated"
integrated <- ScaleData(integrated,verbose = FALSE)
integrated
library(data.table)
outdata <- as.data.frame(as.matrix(integrated@scale.data))
integrated <- RunPCA(integrated,npcs=30,verbose = FALSE)
integrated <- RunUMAP(integrated,reduction="pca",dims=1:30)
colnames(x = integrated[[]])
integrated[['tsne']]
integrated[['UMAP']]
integrated[['umap']]
outdata <- as.data.frame(as.matrix(GetAssayData(object=integrated,slot='umap')))
outdata <- as.data.frame(as.matrix(integrated[['umap']]))
outdata <- as.data.frame(integrated[['umap']])
outdata <- as.data.frame(Embeddings(integrated,reduction = "umap"))
fwrite(x=outdata,row.names=TRUE,file="umap.csv")
integrated <- RunTSNE(integrated,reduction="pca",dims=1:30)
fwrite(x=outdata,row.names=TRUE,file="tsne.csv")
integrated <- RunTSNE(integrated,reduction.use="pca")
outdata <- as.data.frame(Embeddings(integrated,reduction = "tsne"))
fwrite(x=outdata,row.names=TRUE,file="tsne.csv")
integrated <- RunTSNE(integrated,reduction.use="pca")
setwd("/Users/calebreagor/Library/Mobile\ Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/")
library(Seurat)
# load fish and mouse single cell data -> Seurat objects
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
mouse_data=read.table("mouse.csv",header=TRUE,sep=',',row.names=1)
fish_seurObj <- CreateSeuratObject(counts=fish_data)
mouse_seurObj <- CreateSeuratObject(counts=mouse_data)
setwd("/Users/calebreagor/Library/Mobile\ Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/")
library(Seurat)
# load fish and mouse single cell data -> Seurat objects
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
mouse_data=read.table("mouse.csv",header=TRUE,sep=',',row.names=1)
fish_seurObj <- CreateSeuratObject(counts=fish_data)
mouse_seurObj <- CreateSeuratObject(counts=mouse_data)
# preprocess: normalize and find variable features
fish_seurObj <- NormalizeData(fish_seurObj,verbose = FALSE)
mouse_seurObj <- NormalizeData(mouse_seurObj,verbose = FALSE)
fish_seurObj <- FindVariableFeatures(fish_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
mouse_seurObj <- FindVariableFeatures(mouse_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
# integrate datasets and embedding
anchors <- FindIntegrationAnchors(c(fish_seurObj,mouse_seurObj),dims=1:30)
integrated <- IntegrateData(anchorset=anchors,dims=1:30)
DefaultAssay(integrated) <- "integrated"
integrated <- ScaleData(integrated,verbose = FALSE)
integrated <- RunPCA(integrated,npcs=30,verbose = FALSE)
integrated <- RunUMAP(integrated,reduction="pca",dims=1:30)
integrated <- RunTSNE(integrated,reduction.use="pca")
library(data.table)
umap_out <- as.data.frame(Embeddings(integrated,reduction = "umap"))
fwrite(x=umap_out,row.names=TRUE,file="umap.csv")
tsne_out <- as.data.frame(Embeddings(integrated,reduction = "tsne"))
fwrite(x=tsne_out,row.names=TRUE,file="tsne.csv")
setwd("/Users/calebreagor/Library/Mobile\ Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/")
library(Seurat)
# load fish and mouse single cell data -> Seurat objects
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
mouse_data=read.table("mouse.csv",header=TRUE,sep=',',row.names=1)
fish_seurObj <- CreateSeuratObject(counts=fish_data)
mouse_seurObj <- CreateSeuratObject(counts=mouse_data)
# preprocess: normalize and find variable features
fish_seurObj <- NormalizeData(fish_seurObj,verbose = FALSE)
mouse_seurObj <- NormalizeData(mouse_seurObj,verbose = FALSE)
fish_seurObj <- FindVariableFeatures(fish_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
mouse_seurObj <- FindVariableFeatures(mouse_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
# integrate datasets and embedding
anchors <- FindIntegrationAnchors(c(fish_seurObj,mouse_seurObj),dims=1:30)
integrated <- IntegrateData(anchorset=anchors,dims=1:30)
DefaultAssay(integrated) <- "integrated"
integrated <- ScaleData(integrated,verbose = FALSE)
integrated <- RunPCA(integrated,npcs=30,verbose = FALSE)
integrated <- RunUMAP(integrated,reduction="pca",dims=1:30)
integrated <- RunTSNE(integrated,reduction.use="pca")
library(data.table)
umap_out <- as.data.frame(Embeddings(integrated,reduction = "umap"))
fwrite(x=umap_out,row.names=TRUE,file="umap.csv")
tsne_out <- as.data.frame(Embeddings(integrated,reduction = "tsne"))
fwrite(x=tsne_out,row.names=TRUE,file="tsne.csv")
setwd("/Users/calebreagor/Library/Mobile\ Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/")
library(Seurat)
# load fish and mouse single cell data -> Seurat objects
fish_data=read.table("fish.csv",header=TRUE,sep=',',row.names=1)
mouse_data=read.table("mouse.csv",header=TRUE,sep=',',row.names=1)
fish_seurObj <- CreateSeuratObject(counts=fish_data)
mouse_seurObj <- CreateSeuratObject(counts=mouse_data)
# preprocess: normalize and find variable features
fish_seurObj <- NormalizeData(fish_seurObj,verbose = FALSE)
mouse_seurObj <- NormalizeData(mouse_seurObj,verbose = FALSE)
fish_seurObj <- FindVariableFeatures(fish_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
mouse_seurObj <- FindVariableFeatures(mouse_seurObj, selection.method = "vst",nfeatures = 2000, verbose = FALSE)
# integrate datasets and embedding
anchors <- FindIntegrationAnchors(c(fish_seurObj,mouse_seurObj),dims=1:30)
integrated <- IntegrateData(anchorset=anchors,dims=1:30)
DefaultAssay(integrated) <- "integrated"
integrated <- ScaleData(integrated,verbose = FALSE)
integrated <- RunPCA(integrated,npcs=30,verbose = FALSE)
integrated <- RunUMAP(integrated,reduction="pca",dims=1:30)
integrated <- RunTSNE(integrated,reduction.use="pca")
library(data.table)
umap_out <- as.data.frame(Embeddings(integrated,reduction = "umap"))
fwrite(x=umap_out,row.names=TRUE,file="umap.csv")
tsne_out <- as.data.frame(Embeddings(integrated,reduction = "tsne"))
fwrite(x=tsne_out,row.names=TRUE,file="tsne.csv")
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/datasetIntegration/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/compDev/integration.R', echo=TRUE)
# dependencies
library(Seurat)
library(data.table)
# load cc genes from wd "refs"
setwd(paste("/Users/calebreagor/",
"Library/Mobile\ ",
"Documents/com~apple",
"~CloudDocs/Documents/",
"grad/HudspethLab/",
"metaAnalysis/refs/",
sep=""))
s_genes=read.table("s_phase_genes.csv",
header=TRUE,
sep=',',
row.names=1)
g2m_genes=read.table("g2m_phase_genes.csv",
header=TRUE,
sep=',',
row.names=1)
# wd "datasets"
setwd(paste("/Users/calebreagor/",
"Library/Mobile\ ",
"Documents/com~apple",
"~CloudDocs/Documents/",
"grad/HudspethLab/",
"metaAnalysis/datasets/",
sep=""))
# load single cell datasets
lush=read.table("lush.csv",
header=TRUE,
sep=',',
row.names=1)
# load single cell datasets
lush=read.table("lush.csv",
header=TRUE,
sep=',',
row.names=1)
burns=read.table("burns.csv",
header=TRUE,
sep=',',
row.names=1)
hoa=read.table("hoa.csv",
header=TRUE,
sep=',',
row.names=1)
lush_seur <- CreateSeuratObject(counts=lush)
burns_seur <- CreateSeuratObject(counts=burns)
hoa_seur <- CreateSeuratObject(counts=hoa)
# preprocessing
n_features <- 8500
lush_seur <- NormalizeData(lush_seur)
burns_seur <- NormalizeData(burns_seur)
hoa_seur <- NormalizeData(hoa_seur)
lush_seur <- FindVariableFeatures(lush_seur,
selection.method="vst",
nfeatures=n_features)
burns_seur <- FindVariableFeatures(burns_seur,
selection.method="vst",
nfeatures=n_features)
hoa_seur <- FindVariableFeatures(hoa_seur,
selection.method="vst",
nfeatures=n_features)
# assign cells to cell cycle
lush_seur <- CellCycleScoring(lush_seur,
set.ident=TRUE,
s.features=s_genes$Gene.name,
g2m.features=g2m_genes$Gene.name)
burns_seur <- CellCycleScoring(burns_seur,
set.ident=TRUE,
s.features=s_genes$Gene.name,
g2m.features=g2m_genes$Gene.name)
hoa_seur <- CellCycleScoring(hoa_seur,
set.ident=TRUE,
s.features=s_genes$Gene.name,
g2m.features=g2m_genes$Gene.name)
# align datasets
n_anchors <- 50
anchors <- FindIntegrationAnchors(c(lush_seur,
burns_seur,
hoa_seur),
dims=1:n_anchors)
anchors
anchors$anchors.features
anchors.features
anchors.anchors.features
anchors@anchor.features
source('~/Library/Mobile Documents/com~apple~CloudDocs/Documents/grad/HudspethLab/metaAnalysis/alignment.R', echo=TRUE)
